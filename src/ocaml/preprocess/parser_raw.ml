
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20210419

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WITH
    | WHILE_LWT
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23 "src/ocaml/preprocess/parser_raw.ml"
  )
    | TYPE
    | TRY_LWT
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 36 "src/ocaml/preprocess/parser_raw.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTED_STRING_ITEM of (
# 849 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 49 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTED_STRING_EXPR of (
# 846 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 54 "src/ocaml/preprocess/parser_raw.ml"
  )
    | QUOTE
    | QUESTIONQUESTION
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 830 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 63 "src/ocaml/preprocess/parser_raw.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 73 "src/ocaml/preprocess/parser_raw.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NONLOCAL
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH_LWT
    | MATCH
    | LPAREN
    | LOCAL
    | LIDENT of (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 94 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET_LWT
    | LETOP of (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 100 "src/ocaml/preprocess/parser_raw.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 120 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INT of (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 125 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 132 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP3 of (
# 783 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 137 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP2 of (
# 782 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 142 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP1 of (
# 781 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 147 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INFIXOP0 of (
# 780 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 152 "src/ocaml/preprocess/parser_raw.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 841 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 160 "src/ocaml/preprocess/parser_raw.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATERDOT
    | GREATER
    | GLOBAL
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR_LWT
    | FOR
    | FLOAT of (
# 768 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 176 "src/ocaml/preprocess/parser_raw.ml"
  )
    | FINALLY_LWT
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTTILDE
    | DOTOP of (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 192 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DOTLESS
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 866 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 201 "src/ocaml/preprocess/parser_raw.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 865 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 208 "src/ocaml/preprocess/parser_raw.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 748 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 219 "src/ocaml/preprocess/parser_raw.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 232 "src/ocaml/preprocess/parser_raw.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 18 "src/ocaml/preprocess/parser_raw.mly"
  

[@@@ocaml.warning "-9"]

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir
open Msupport_parsing

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc ?attrs d = Typ.mk ~loc:(make_loc loc) ?attrs d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkoperator =
  mkexpvar

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])


let local_loc = mknoloc "ocaml.local"
let local_ext_loc = mknoloc "extension.local"

let local_attr =
  Attr.mk ~loc:Location.none local_loc (PStr [])

let local_extension =
  Exp.mk ~loc:Location.none (Pexp_extension(local_ext_loc, PStr []))

let mkexp_stack ~loc exp =
  ghexp ~loc (Pexp_apply(local_extension, [Nolabel, exp]))

let mkpat_stack pat =
  {pat with ppat_attributes = local_attr :: pat.ppat_attributes}

let mktyp_stack typ =
  {typ with ptyp_attributes = local_attr :: typ.ptyp_attributes}

let wrap_exp_stack exp =
  {exp with pexp_attributes = local_attr :: exp.pexp_attributes}

let mkexp_local_if p ~loc exp =
  if p then mkexp_stack ~loc exp else exp

let mkpat_local_if p pat =
  if p then mkpat_stack pat else pat

let mktyp_local_if p typ =
  if p then mktyp_stack typ else typ

let wrap_exp_local_if p exp =
  if p then wrap_exp_stack exp else exp

let curry_attr =
  Attr.mk ~loc:Location.none (mknoloc "ocaml.curry") (PStr [])

let is_curry_attr attr =
  attr.attr_name.txt = "ocaml.curry"

let mktyp_curry typ =
  {typ with ptyp_attributes = curry_attr :: typ.ptyp_attributes}

let maybe_curry_typ typ =
  match typ.ptyp_desc with
  | Ptyp_arrow _ ->
      if List.exists is_curry_attr typ.ptyp_attributes then typ
      else mktyp_curry typ
  | _ -> typ

let global_loc = mknoloc "ocaml.global"

let global_attr =
  Attr.mk ~loc:Location.none global_loc (PStr [])

let nonlocal_loc = mknoloc "ocaml.nonlocal"

let nonlocal_attr =
  Attr.mk ~loc:Location.none nonlocal_loc (PStr [])

let mkld_global ld =
  { ld with pld_attributes = global_attr :: ld.pld_attributes }

let mkld_nonlocal ld =
  { ld with pld_attributes = nonlocal_attr :: ld.pld_attributes }

let mkld_global_maybe gbl ld =
  match gbl with
  | Global -> mkld_global ld
  | Nonlocal -> mkld_nonlocal ld
  | Nothing -> ld

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> ghpat ~loc (Ppat_constraint(p, typ))

(*
let syntax_error () =
  raise Syntaxerr.Escape_error
*)

let not_expecting loc nonterm =
  raise_error Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

(*
let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))
*)

let expecting loc nonterm =
    raise_error Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))

let dotop ~left ~right ~assign ~ext ~multi =
  let assign = if assign then "<-" else "" in
  let mid = if multi then ";.." else "" in
  String.concat "" ["."; ext; left; mid; right; assign]
let paren = "(",")"
let brace = "{", "}"
let bracket = "[", "]"
let lident x =  Lident x
let ldot x y = Ldot(x,y)
let dotop_fun ~loc dotop =
  ghexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.fast then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let multi_indices ~loc = function
  | [a] -> false, a
  | l -> true, mkexp ~loc (Pexp_array l)

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc path (left,right) ext array index =
  let multi, index = multi_indices ~loc index in
  index_get ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
    array index

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc path (left,right) ext array index value=
  let multi, index = multi_indices ~loc index in
  index_set ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
    array index value


let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.fast then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.fast then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let make_ghost x = { x with loc = { x.loc with loc_ghost = true }}

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_longident ~loc lid =
  let lid = make_ghost (loc_map (fun id -> Lident (Longident.last id)) lid) in
  ghexp ~loc (Pexp_ident lid)

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))

let pat_of_label lbl =
  Pat.mk ~loc:lbl.loc  (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext

let mk_quotedext ~loc (id, idloc, str, strloc, delim) =
  let exp_id = mkloc id idloc in
  let e = ghexp ~loc (Pexp_constant (Pconst_string (str, strloc, delim))) in
  (exp_id, PStr [mkstrexp e []])

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos =
  List.map (fun def -> Ptop_def [def]) (Str.text (rhs_text pos))

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2
    (fun txt -> List.map (fun def -> Ptop_def [def]) (Str.text txt))
    items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

(*
type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }
*)

let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise_error (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        (* assert (ptyp.ptype_kind = Ptype_abstract); *)
        (* assert (ptyp.ptype_attributes = []); *)
        begin match ptyp.ptype_manifest with
        | Some ty -> Some (lid, ty)
        | None -> None
        end
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported";
        None
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [], pmty.pmty_attributes)
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.filter_map map_cstr cstrs, pmty.pmty_attributes)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"
      ; (Location.mkloc (Lident "_") pmty.pmty_loc, [], [])

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }

let merloc startpos ?endpos x =
  let endpos = match endpos with
    | None -> x.pexp_loc.Location.loc_end
    | Some endpos -> endpos
  in
  let loc = make_loc (startpos, endpos) in
  let str = mkloc "merlin.loc" loc in
  let attr = { attr_name = str; attr_loc = loc; attr_payload = PStr [] } in
  { x with pexp_attributes = attr :: x.pexp_attributes }

let val_of_lwt_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_lwt_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern (Fake.app Fake.Lwt.un_lwt lb.lb_expression))
      lbs.lbs_bindings
  in
  Fake.app Fake.Lwt.in_lwt
    (mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
       (lbs.lbs_extension, []))


# 928 "src/ocaml/preprocess/parser_raw.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          136
      | AMPERSAND ->
          135
      | AND ->
          134
      | ANDOP _ ->
          133
      | AS ->
          132
      | ASSERT ->
          131
      | BACKQUOTE ->
          130
      | BANG ->
          129
      | BAR ->
          128
      | BARBAR ->
          127
      | BARRBRACKET ->
          126
      | BEGIN ->
          125
      | CHAR _ ->
          124
      | CLASS ->
          123
      | COLON ->
          122
      | COLONCOLON ->
          121
      | COLONEQUAL ->
          120
      | COLONGREATER ->
          119
      | COMMA ->
          118
      | COMMENT _ ->
          117
      | CONSTRAINT ->
          116
      | DO ->
          115
      | DOCSTRING _ ->
          114
      | DONE ->
          113
      | DOT ->
          112
      | DOTDOT ->
          111
      | DOTLESS ->
          110
      | DOTOP _ ->
          109
      | DOTTILDE ->
          108
      | DOWNTO ->
          107
      | ELSE ->
          106
      | END ->
          105
      | EOF ->
          104
      | EOL ->
          103
      | EQUAL ->
          102
      | EXCEPTION ->
          101
      | EXTERNAL ->
          100
      | FALSE ->
          99
      | FINALLY_LWT ->
          98
      | FLOAT _ ->
          97
      | FOR ->
          96
      | FOR_LWT ->
          95
      | FUN ->
          94
      | FUNCTION ->
          93
      | FUNCTOR ->
          92
      | GLOBAL ->
          91
      | GREATER ->
          90
      | GREATERDOT ->
          89
      | GREATERRBRACE ->
          88
      | GREATERRBRACKET ->
          87
      | HASH ->
          86
      | HASHOP _ ->
          85
      | IF ->
          84
      | IN ->
          83
      | INCLUDE ->
          82
      | INFIXOP0 _ ->
          81
      | INFIXOP1 _ ->
          80
      | INFIXOP2 _ ->
          79
      | INFIXOP3 _ ->
          78
      | INFIXOP4 _ ->
          77
      | INHERIT ->
          76
      | INITIALIZER ->
          75
      | INT _ ->
          74
      | LABEL _ ->
          73
      | LAZY ->
          72
      | LBRACE ->
          71
      | LBRACELESS ->
          70
      | LBRACKET ->
          69
      | LBRACKETAT ->
          68
      | LBRACKETATAT ->
          67
      | LBRACKETATATAT ->
          66
      | LBRACKETBAR ->
          65
      | LBRACKETGREATER ->
          64
      | LBRACKETLESS ->
          63
      | LBRACKETPERCENT ->
          62
      | LBRACKETPERCENTPERCENT ->
          61
      | LESS ->
          60
      | LESSMINUS ->
          59
      | LET ->
          58
      | LETOP _ ->
          57
      | LET_LWT ->
          56
      | LIDENT _ ->
          55
      | LOCAL ->
          54
      | LPAREN ->
          53
      | MATCH ->
          52
      | MATCH_LWT ->
          51
      | METHOD ->
          50
      | MINUS ->
          49
      | MINUSDOT ->
          48
      | MINUSGREATER ->
          47
      | MODULE ->
          46
      | MUTABLE ->
          45
      | NEW ->
          44
      | NONLOCAL ->
          43
      | NONREC ->
          42
      | OBJECT ->
          41
      | OF ->
          40
      | OPEN ->
          39
      | OPTLABEL _ ->
          38
      | OR ->
          37
      | PERCENT ->
          36
      | PLUS ->
          35
      | PLUSDOT ->
          34
      | PLUSEQ ->
          33
      | PREFIXOP _ ->
          32
      | PRIVATE ->
          31
      | QUESTION ->
          30
      | QUESTIONQUESTION ->
          29
      | QUOTE ->
          28
      | QUOTED_STRING_EXPR _ ->
          27
      | QUOTED_STRING_ITEM _ ->
          26
      | RBRACE ->
          25
      | RBRACKET ->
          24
      | REC ->
          23
      | RPAREN ->
          22
      | SEMI ->
          21
      | SEMISEMI ->
          20
      | SIG ->
          19
      | STAR ->
          18
      | STRING _ ->
          17
      | STRUCT ->
          16
      | THEN ->
          15
      | TILDE ->
          14
      | TO ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TRY_LWT ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | VAL ->
          6
      | VIRTUAL ->
          5
      | WHEN ->
          4
      | WHILE ->
          3
      | WHILE_LWT ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTLESS ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOTTILDE ->
          Obj.repr ()
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FINALLY_LWT ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FOR_LWT ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GLOBAL ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERDOT ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LET_LWT ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LOCAL ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MATCH_LWT ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONLOCAL ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUESTIONQUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | QUOTED_STRING_EXPR _v ->
          Obj.repr _v
      | QUOTED_STRING_ITEM _v ->
          Obj.repr _v
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TRY_LWT ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WHILE_LWT ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
    (16, "\000\000\000\000\000\000\002\243\002\242\002\241\002\240\002\239\002\192\002\238\002\237\002\236\002\235\002\234\002\233\002\232\002\231\002\230\002\229\002\228\002\227\002\226\002\225\002\211\002\224\002\223\002\222\002\221\002\220\002\219\002\191\002\218\002\217\002\216\002\215\002\214\002\213\002\212\002\210\002\209\002\208\002\207\002\206\002\205\002\204\002\203\002\202\002\201\002\200\002\199\002\198\002\197\002\196\002\195\002\194\002\193\000\000\000\000\000*\000\199\000\000\000\000\000\000\000\000\000\000\000\000\002\157\001k\000\000\000\000\000\000\000\000\000\000\000\000\000p\000k\000\201\000\000\000\000\000\000\000\000\001i\000\000\000\000\001l\001j\001q\000A\002\140\000\000\001'\000\000\001\197\000np\000\000\001`\001o\000\000\001^\000^\000\030\000\000\000\000\001\153\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0034\000(\000\000\000\000\000\031\000\026\000\000\000\000\000\000\000\000\002\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\250\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\253\002N\000\214\002@\000\000\000\"\000\000\002A\000\000\000\000\001\207\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\003 \000\000\003!\000\000\000\127\000\000\000\000\000!\000\000\000\000\000\000\000#\000\000\000$\000\000\000&\000\000\000\000\000'\0024\0023\000\000\000\000\000\000\000\000\000\000\002\252\000\000\000\000\000\000\000\000\000\000\002\251\000\000\000\000\0026\000\000\000\000\000\000\000\000\000\000\000\000\001U\001O\000\000\000\000\001P\000\000\000\029\000\000\000\028\000\000\000\000\000r\000\000\000\000\000\000\000 \000\027\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000m\000\000\001\147\001\145\001\146\000\000\000\000\000\000\000\000\000\000\000\000\000\237\000\000\001\169\000\000\000\240\000\238\000o\001\165\000\000\000q\000\000\000\000\000\000\000\000\000\000\000\000\000{\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\222\000s\000\000\000\000\002#\002!\002\"\000\000\001\161\000\000\000\000\000\223\000\000\000\000\001\168\001\164\0033\000\000\000\000\000\000\000\000\000\000\001\171\001\167\001\163\000\000\000\000\001\170\001\166\001\162\001\160\000\000\002-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002-\000\000\000\000\000\000\000\000\000\000\000\000\001-\000\227\000\000\000\000\002\023\000\000\000\000\000\000\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\000\000u\000\000\000\202\000w\000\000\003\021\002(\002)\002$\002&\002%\002'\000\000\000\000\000\000\000\203\0037\000\000\000\000\002-\000\000\000\226\000\000\000\000\000\000\000\000\003\020\000\000\000\235\000\015\000\014\000\000\000\000\000\000\000\000\001\127\000\000\000\000\000\000\000\000\000\000\000\000\002\179\000\000\002w\002x\000\000\002u\002v\000\000\000\000\000\000\000\000\000\000\001\129\001\128\000\000\002\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\031\003\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\001\000\001\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\243\000\000\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\002\184\000l\000j\002\173\003I\002\174\002\002\002\176\000\000\000\000\002\181\002t\002\183\000\000\000\000\000\000\002\187\000\000\000\000\000\000\001\255\001\246\000\000\000\000\000\000\000\000\000\000\001\245\000\000\002\001\002\190\000\000\002\000\001\250\000\000\002\188\000\000\000\000\000\000\000\000\000\000\001\247\000\000\002\186\000\000\002z\000\000\000\000\002X\002\185\002\182\000\000\000\000\000\000\000\000\001\212\001B\001C\002|\000\000\002{\000\000\000\000\002\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\000\000\000\000\000\253\002\th\001\141\001g\001\139\002/\000\000\001\134\000\000\000\216\000\000\000\000\001y\000\000\000\000\001}\000\000\001\230\000\000\000\000\001\229\001|\001z\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\143\001mn\000\000\000\000\001\b\001\007\001\005\000\000\000\000\000\000\000\208\000\207\002\247\000\000\000\000\000\000\000\000\001\014\000\000\000\000\001\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\006\002\004\002\005\000\000\000\000\000\000\000\000\000\018\001\017\001K\000\000\000\000\000\000\002\130\000\000\000\000\002\137\000\000\000\000\000\000\000\000\002\135\000\000\000\000\002R\000\000\000\000\002\134\000\000\000\000\002\136\002\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0022\0021\000\180\000\000\002\132\000\000\000\000\002\131\000\000\000\000\002\133\001\024\000\000\000\000\001\025\000\000\000\000\000\183\000\000\001\027\001\026\000\000\000\000\002\152\000\000\002\164\000\000\002\163\000\000\000\000\000\000\000\000\000\000\000b\000d\000a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\129\000\000\000\000\002=\000c\002<\002\169\000\000\002\171\000\000\002\170\000\000\000\000\000\000\000\000\000\000\000f\000h\000e\000g\002\168\000\000\000\000\002\153\000\000\000\000\000\000\002 \000\000\001\226\000\000\000\000\000\000\002[\002\031\000\000\002\160\000\000\000\000\000\000\001n\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\211\000\212\000\000\000\000\001\006\000\146\000\000\000\145\000\000\000\000\001M\000\000\001N\001L\0028\000\000\000\000\0029\0027\000\000\000\000\000\000\000\000\000\000\002\139\000\000\002\138\000\000\000\000\002}\000\000\000\000\002\159\000\000\000\000\000\000\002U\002\150\000\000\002\149\000\000\002\165\000\000\002\166\002\162\000\000\002\161\000\000\002\167\000\143\000\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\000\001t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\000\000\000\001\016\002\246\002\248\001\023\001\224\000\000\000\251\000\000\000\000\000\250\000\252\000\000\000\000\000\000\000\000\000\000\001F\000\000\000\000\001E\001D\001H\000\000\001G\000\000\000\000\000\000\000\000\000\000\001\011\000\000\000\000\001\t`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\175\000\000\000\000\000\000\001\174\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001%\002n\000\000\000\000\000\000\002l\000\000\000\000\000\000\002k\000\000\001v\000\000\000\000\000\000\000\000\002qr\002d\000\000\002j\002e\002p\002o\002m\0010\000\000\002b\000\000\000\000\000\000\000\000\000\000\002-\000\000\000\000\001)\002f\000\000\000\000\000\000\000\000\000\000\000\000\002-\000\000\000\000\001+\002g\002c\002s\001/\002\012\002a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000\000\000\000\000\000\000\000\000\000\000\000\0003\000\000\000\000\000U\000\000\0001\001\020\000\000\000@\000-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\018\000\000\000T\000\000\000\000\000W\000\000\000\000\001\214\000\000\0005\000\000\000\000\000\000\0004\000\000\000\000\000\000\0008\000\000\000X\000\000\000:\000;\000\000\0018\000\000\000\000\000\000\000\000\000\000\000\000\000>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\029\003\027\003\018\000\000\000\000\003\022\002\244\003\017\003\026\003\025\000\000\0014\000\000\000\000\003\015\000\000\003\019\003\016\003\028\002\011\000\000\000\000\003\012\000\000\000\204\000\000\003\011\000\000\000\000\000\234\000\000\000\155\000\000\001w\000\000\001\173\000\000\000\000\000\000\001\172\000\000\000\000\0013\0012\000\000\002\020\000\225\000\000\000\000\000\000\000\000\002i\002,\002*\002+\000\000\000\000\000\000\002-\000\000\000\224\000\000\000\000\000\000\000\000\002h\000\000\001\131\000\000\000\022\000\000\003P\000\000\000\200\002\147\000\000\000\000\000\000\000\000\002\141\000\000\000\000\002\142\000\000\002\127\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000\000\000\134\000\000\000\000\000\000\000\151\000\000\000+\000\000\000\000\000\000\000\000\000\136\000\000\000\230\000\001\000\000\000\000\000\233\000\002\000\000\000\000\000\000\001b\001c\000\003\000\000\000\000\000\000\000\000\001e\001f\001d\000\019\001a\000\020\000\000\001\235\000\000\000\004\000\000\001\236\000\000\000\005\000\000\001\237\000\000\000\000\001\238\000\006\000\000\000\007\000\000\001\239\000\000\000\b\000\000\001\240\000\000\000\t\000\000\001\241\000\000\000\000\001\242\000\n\000\000\000\000\001\243\000\011\000\000\000\000\000\000\000\000\000\000\003(\003#\003$\003'\003%\000\000\003,\000\012\000\000\003+\000\000\001:\000\000\000\000\003)\000\000\003*\000\000\000\000\000\000\000\000\001>\001?\000\000\000\000\001=\001<\000\r\000\000\000\000\000\000\003F\000\000\003E")
  
  and error =
    (137, "3\248H0\177J\223\230g\160(\007\220\138\000\028p\024\220 \b\\$o\241'\208\004\003\232\005\000\0068\023\183dj\255\230o\249*\015\220J\136<\240/n\200\128\130\255\021\144\000L\028\007N8,\n\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$\250\000\128}\000\160\000\199\002\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\207\225\"\202\197+\127\153\158\128\160\031p(\000\241\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\132\141\254$\250\000\128}\000\160\000\199\001\141\194\000\133\130F\255\018}\000@>\128P\000c\128\198\225\000B\193#\127\137\030\128 \031@(\0001\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000\132\000@(\0189\000\000\002\128P\000cn\253\217\191\127\247\255\252\157\031\238e\132\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\012B\031\137[\253H\244\249\132\250A\192\025\174\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\bB\000 \020\t\028\128\000\001@(\0001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\221\145\001\005\254+ \000\1528\014\156pX\020\026\025\252$YX\165o\2433\208\020\003\238\005\000\0308\000\000\000\000\002\000\001@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\001\000\007\224\006\002@\000>!\000\016 \004\nt\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\bp\128\000@\000\000\000\000\000\000\b\001\001\000\128 P \128\000\000\128\000\000\000\000\000\004\000\128\128\000\016(\016@\000\000@\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\132\128\021@\002\006\tHp\000D\000\029\129\002 \004\002@\b \001\002\000\004(\000 \000\012@\000\016\000\001 \004\016\000\129\000\002\016\000\016\000\006 \000\b\000\000`\000\002&\b\017@\002\000@\000\000\000\000\000\016\0000\000\001\018\004\b\160\001\000 \000\000\000\000\000\b\000\024\000\000\137\002\004P\000\000\016\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\b\144\000E\000\000\001\000\000\000\000\000\000@\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\b\144\000@\000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000H\001\020\b @\000\134\000\004\000\001\216\001\018\000@\024\128\001\176 \000p\184P\000 \001\000\016\000\b\000\018\000E\000\012\016%!\192\001\016\000f\004A\132\016\006 \000h\b\000\028.\020\000\b\000@\004\000\002\000\003\000\0044\004\004\014\023\b\000\004\000\000\000\000\128\000\001\128\000\024\000\000\005\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\000\000\001B\225\000\000\136\000\000@\000\000\000\016\000\128\000\000\000 \000\000\000D\000\000\000\004\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\n\000\145\160\000\004\132\016\224`\b\128\t\002$\000 \133\128]\192\002\006CHp0D@\029\128\022a\022\001\128\000\024\000\000\007\011\132\000\002\000\000\000\000\000\000\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\002\000\012\000\004\208\016\0008\\ \000\016\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000@\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\160\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000 \000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\000\000\000\000\bp\000\129\144R\028\012\017\016\007`\005\136E\128`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\0000\000\003\000\000\000\161p\128\000@\000\000\000\000\000\004$\000\238\000\0162\nC\129\130\"\000\236\000\177\b\176\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\132\128\029\192\002\006AHp0D@\029\128\022!\022B@.\224\001\003 \1648\024\" \014\192\011\016\139\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004,\002\238\000\0162\026C\129\130\"\000\236\000\177\b\176\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\192.\224\001\003!\1648\024\" \014\192\011\016\139\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\016\176\011\184\000@\200i\014\006\b\136\003\176\002\196\"\200H\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\192\000\0008\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\192\000\012\000\000\002\133\194\000\001\000\000\000\000\000\000\016\144\003\184\000@\200)\014\006\b\136\003\176\002\196\"\200H\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\000B@\014\224\001\003 \1648\024\" \014\192\011\016\139! \007p\000\129\144R\028\012\017\016\007`\005\136E\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\001\220\000 d\020\135\003\004D\001\216\001b\017`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\b\000\000\000\128\000\002\000\000\000\000\b\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000 \000\000\000\000\129\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\004\000\000\000\000\017 \000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000 \000\000\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\000\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\238\000\0162\nC\129\130\"\000\236\000\177\b`\000\000\020.\016\000\b\000\000\000\000\000\000\132\128\029\192\002\006AHp0D@\029\128\022!\022B@\014\224\001\003 \1648\024\" \014\192\011\016\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\024\000\001\128\000\000P\184@\000 \000\000\000\000\000\002\018\000w\000\b\025\005!\192\193\017\000v\000X\132Y\t\000;\128\004\012\130\144\224`\136\128;\000,B,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\128\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000D\000\000\000\000\000\128\000\002\000\000\000\000\000\128\000\000 \000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\128\000\000\000\000\000\003\000\0000\000\000\nb\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000@\000\000\000\000\001\000\000\000\000\000\000@\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\bbb\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\130\000\1648\000\"\000\012\192\b0\130\000\192\000\012\000\000\002\133\194\128\001\000\000\000\000\000\000\000\000\000\000\000\005\000@\000\000\000\004\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\005\128Q@\002\006\003Hp\000d\000\025\128\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001`\020P\000\129\000\210\028\000\025\000\006`\004\bA\000`\000\006\000\000\001B\225@\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\024\000\001\128\000\000P\184@\000 \000\000\000\000\000\000\022\000E\000\b\016\r!\192\001\144\000f\000@\132\016\011\000\162\128\004\012\006\144\224\000\200\0003\000 B\b\004\128\017@\002\004\001Hp\000D\000\025\128\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\012\000\b\128\0030\002\004 \128\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001Hp\000D\000\025\128\016 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\193\000R\028\000\017\000\006`\004\024A\000\144\002(\000@\128)\014\000\b\128\0030\002\004 \128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000R\028\000\017\000\007`\004\b\001\000\"\000\000@\000\001\000\001@\000\000\004\000@\000 \000\017\000\000\000\000\000\128\000\160\000\000\002\000 \000\016\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\128\000\000\000\b\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\0006\004\000\014\023\n\000\004\000 \002\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000\002\024\000\016\000\006`\004\b\001\023\183d@A\127\138\200\000&\014\003\167\028\022\005\006\134\127\t\022V)[\252\204\244\005\000\251\129@\007\142\000\024\000\000\137\130\004P\000\128\016\000\000\000\000\000\004\000\012\000\000D\129\002(\000@\b\000\000\000\000\000\002\000\006\000\000\"@\129\020\000\000\004\000\000\000\000\000\001\000\003\000\000\017 \000\138\000\000\002\000\000\000\000\000\000\128\000\128\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001 \004P \129\000R\024\000\017\000\007`\004\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\020\000 @\020\134\000\004@\001\152\001\002\000@\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\132\128\021@\002\006\001Hp\000D\000\029\128\018 \004\002@\b\160\001\002 \1640\0242\000\012\192\b\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\016\000\000@\000@\000\000\001\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\002\000\001\016\000\000\000\000\b\000\b\000\000\000 \000\000\000\000\002@\b\160\001\130\000\1648\000\"\000\014\192\0000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\192\001\016\000f\004\000\132\000\002\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\002(\000@\128)\014\000\b\128\0030\000\004 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\016\000fv\000\001\132\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\000\000\004\128\017@\002\004\001Hp\000D\000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000H\001\020\b @\020\134\000\004@\001\216\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\016\000f\000@\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\001\000\000\004\000\004\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000@\000\144\002(\000@\128)\012\000\b\128\0030\000\004 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003?\132\139\011\020\173\254fz\002\128}\204\160\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\128\016\b\000\004\002\b\000\000\b\000\000\000\000@\000\192@\b\004\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\130\000\000\002\000\000\000\000\000\0000\016\002\000\000\000\128@\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\159\194A\133\138V\2553}\001@>\226P\000\227\128\207\225 \194\197+\127\153\158\128\160\031q(\000q\192\004\000\000@\016\000H\bP0\000\000\000\128\016\000\000\002\000\000 \000\000$\004(\024\000\000\000@\b\000\000\001\000\000\016\000\000\018\002\016\012\000\000\000 \004\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\024\132?\000\177R\145i\241\136\021\129\0002Y`\000\000@\000\000\000\000\000\004\000\000\bb \000\000 \000\000\000\000\000\003\001\000 \000\000\b\004\000\000\000\016\000\000\000\000\000\003\128\128\016\000\000\004\002\000\000\000\b\000\000\000\000\000\024\220 \bX$o\241'\208\004\003\232\005\000\0068\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\141\194\000\133\194F\255\018}\000@>\128P\000c\128\198\225\000B\193#\127\137>\128 \031@(\0001\192cp\128!`\145\191\196\143@\016\015\160\020\000\024\2241\184@\016\184H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241'\208\004\003\232\005\000\0068\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\128\006!\004@`\001\028\t6\128\b\001@\000\000 \128\003\016\130  \000\142\004\155@\004\000\160\000\000\016@\001\136A\016\016\000G\002E\160\002\000P\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004\004\000\017\192\145h\000\128\020\000\000\002\b\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\024\164\001! \004P$V\000 \005 \000\018\130\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000 \000\000\192\000\rz\000\128}\000\160\000\199\000\012B\000\128\128\002(\018-\000\016\002\128\000\000A\000\006!\000@@\001\020\t\022\128\b\001P\000\000(\128\003\016\129  \000\138\004\139@\004\000\168\000\000\016@\000\128\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000 \000\002\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\017\000\000\000\000\000 \000\000\000\b\000\000\000\000\000\000\b\128\000\000\000\000\000\000\000\000\004\000\000\000\000\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\196 \b\012\000\"\129&\144\001\000(\000\000\004\016\000b\016\004\004\000\017@\147H\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\164\000@\n\000\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\bt5\128H\001J\004\r\170\160\000\000\128\000 \000\128\000\000@\000\000\128\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0011H\218B@(\160I\188\002@\n\208\016mU\000\b\000\000\000\000\000@\004P\000\000\000\000\000\000\000\000\012B\016\128\128\002(\018-\000\016\002\160\000\002A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\128 0\000\138\004\155@\004\000\168\000\000\016@\001\136@\016\016\000E\002M\160\002\000T\000\000\b \000\196 \b\b\000\"\129\"\208\001\000*\000\000\004\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000l\000\000\016\000\000\128\001\000\000(\000&(\128\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000 \000\027\000\000\004\000\000 \000@\000\n\000\t\138 \003\016\128  \000\138\004\139@\004\000\168\000\000\016@\b\000\006\192\000\001\000\000\b\000\016\000\002\128\002b\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002b\017\180\004\000Q@\147h\004\128\021\160\000\154\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000LB6\128\128\n(\018m\000\144\002\180\000\019U@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\b\000\000\000\000\000\002@\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\001\000\000\216\000\000 \000\001\000\002\000\000P\000LQ\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000@\0006\000\000\b\000\000@\000\128\000\020\000\019\020@\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\136@\144\016\000E\002E\160\002\000T\000\000\bbb\160I\172\000@\n@\000M\021\000\016\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\000@@\001\028\t\022\128\b\001P\000\000 \128\003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\002\000\000\000\000\000\b\000\000\000\002\000\002`\136\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\128\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\012B\031\128X\233H\180\248\196\n\192\128\025,\176\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138@\018\018\000E\002E`\002\000R\000\001( \000\196 \b\b\000\"\129\"\144\001\000(\000\000\004\016\000b\024\132?\000\177\210\145i\241\136\021\129\0002Y`\000\000@\000\000\000\000\000\004\000\000\b\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\016\000\000\000\000\000@\000\000\000\000\000\018\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\006!\004@d\t\028\t6\128\b\001P\000\000 \128\003\001\000 \016\000\b\004\016\000\000\016\000\000\000\000\128\001\128\128\016\b\000\004\002\b\000\000\b\000\000\000\000\000\000\192@\b\000\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\012\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\001\000\016\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\0000\000\001\018\000\b\160\000\000 \000\000\000\000\000\b\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\000\000\006\000\000l\b\000\028.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\005\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\bH\001T\000 `\020\135\000\004@\001\216\001\"\001D$\000\170\000\0160\nC\128\002 \000\236\000\145\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B@\n\160\001\003\004\1648\000\"\000\014\192\129\016\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\001T\000 `\148\135\000\004@\001\216\016\"\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\018\000U\000\b\024\005!\192\001\016\000v\000\b\128\016\001\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000! \005P\000\129\128R\028\000\017\000\007`\000\136\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\016\000\000\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\002\018\000U\000\b\024%!\192\001\016\000v\004\b\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\016\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\128\016\000\000\004\002\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\144\002\168\000@\193)\014\000\012\128\003\176\000L\000\128p\016B\000\000\000\128@\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000 \000@\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000  \000\004\n\004\000\000\000\016\000\000\000\000\000@\000\002\000\000\001\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\170\000\0160JC\128\003 \000\236\b\019\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000 \000@\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\2241\184@\016\176H\223\226G\160\b\007\208\n\000\014p\024\220 HX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000@\000\000\000 \000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\016\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\012B\000\132\000@(\0189\000\000\002\128P\000c\001\000\000\017\000\000\000\000\000\000\000\024\000\b\018\004\128\000\003\016\128!\000\016\n\004\142@\000\000\160\020\000\024\1921\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\196 \bD\004\002\129'\144\000\000(\005\000\0060\000b\016\004 \002\001@\147\200\000\000\020\002\128\003\024\0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\003\027\132\001\011\132\141\254$\250\000\128}\004\160\000\199\001\141\194\000\133\130F\255\018}\000@>\130P\000c\128\198\225\000B\193#\127\137\030\128 \031A(\0001\192cp\128!p\145\191\196\159@\016\015\160\020\000\024\2241\184@\016\176H\223\226O\160\b\007\208\n\000\012p\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000b\016\004\006\000\017@\147h\000\128\021\000\000\002(\0001\b\002\002\000\b\160I\180\000@\n\128\000\001\020\000\024\132\001\001\000\004P$Z\000 \005@\000\000\138\000\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000 \000\000\000\000\004\000\000 \000\000\000\000\000\t\002 cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\138@\018\026\000E\002M`\002\000P\000\000\b \000\197 \t\t\000\"\129&\176\001\000(\000\000\004\016\000b\144\004\132\128\017@\145X\000\128\020\000\000\002\b\0009\012B\031\128X\233H\180\248\196\n\192\128\025,\176\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006)\000HH\005\020\t\021\128\b\001@\000\000\160\128cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\136@\016\024\000E\002M\160\002\000T\000\000\b \000\196 \b\b\000\"\129&\208\001\000*\000\000\004\016\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\b\000\000\000\000\000\000\000\000\001\000\002\000\000@\000H\017\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\012B\000\128\192\002(\018m\000\016\002\160\000\000A\000\006!\000@@\001\020\t6\128\b\001P\000\000 \128\003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000b\016\004 \002\001@\145\200\000\000\020\002\128\003\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203\\\254\255\237\193\253\253\183\255\223\000\128\000\000\000\000\005\000G\000\000\000\000\000\000\000\000\024\2201\b~%o\245#\211\230\019\233\007\000f\186\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\bB\022\t\027\252H\244\001\000\250\001@\001\142\003\027\132!\011\004\141\254$z\000\128}\000\160\000\199\000\012\004\000\128@\000 \016@\000\000@\000\000\000\000\000\006\002\000@\000\000\016\b \000\000 \000\000\000\000\000\003\001\000 \000\000\b\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\004\000\b\000\000\000\000\000\000 \000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\000\000\128\000\000@\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132!\011\004\141\254$z\000\128}\000\160\000\199\001\141\194\016\133\130F\255\018=\000@>\128P\000c\128\006!\b@@\001\020\t\022\128\b\001@\000\000 \128\000\000\000\000\000\000\000\000\016\000\000\000\004\000\004\193\016\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0001\b\002\017\001\000\160I\228\000\000\n\001@\001\140\000\024\132\001\b\000\128P$\242\000\000\005\000\160\000\198\000\012B\000\132\000@(\0189\000\000\002\128P\000c\001)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\003\016\128!\000\016\n\004\142@\000\000\160\020\000\024\192K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\239\128\000\000\000\000\000\002\000\002\128\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\188\246\239/\240\190Z\231\247\255n\015\239\237\191\254x\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000\000\003 \000\000\000\000\004\000\000\000\001\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000\200\000\000\000\000\001\000\000\000\000@\000 \000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\0002\000\000\000\000\000@\000\000\000\016\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\004\188\246\239/\240\190Z\231\247\255n\015\239\237\191\254\248\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\n\000\n\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\243\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\002^{w\151\248_-s\251\255\183\007\247\246\223\255=)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000C\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\0041\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\231\165\"\151p>\129\240V\028\015\251pWzm\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\191\214\239\015\212\191\254\231\251\255\174\127\239\165\191\255z\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\128\196 \b\b\000#\129&\208\001\000(\000\000\004\016\000b\016\004\004\000\017\192\145h\000\128\020\000\000\002\b\0001H\002B@\b\160I\172\000@\n@\000m\021\000\028\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012R\000\144\144\002(\018+\000\016\002\144\000\tA\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000@\000L\017\000\024\000\001\160 \000p\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\000\000\128\000\000\000 \000$\b\128\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\t\002 \003\016\128  \000\138\004\139@\004\000\168\000\000\016@\000\000\000\000\000\000\000\000\b\000\000\000\002\000\002@\136\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\016\000\018\004@\006!\000@@\001\020\t\022\128\b\001P\000\000 \128\000\000\000\000\000\000\000\000\016\000\000\000\004\000\004\129\016\002@\b\160\001\002\000\1640\0002\000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918y\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\016 >\000`\004\004\003\224\016\001\000\001`\128\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\000\000@\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\192|\000\192\b\b\007\192 \002\000\002\195\001\152\220!hX$o\241#\208\004\003\232\005\000\0078\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004 \002\001@\145\200\000\000\020\002\128\003\024\ty\237\222_\225|\181\207\239\254\220\031\223\219\127\253\240\000\000\000\000\000\000@\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203|\254\255\237\193\253\253\183\255\2071\184@\016\176H\223\226G\160\b\007\208\n\000\012p%\"\151p>\129\240V\028\015\249pWx-\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000%\231\183y\127\133\242\223?\191\251p\127\127m\255\243\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\240\b\000\000\000\000\000P\000P\000\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\158\221\229\254\023\203|\254\255\237\193\253\253\183\255\2071\184@\016\176H\223\226G\160\b\007\208\n\000\012p%\"\151p>\129\240V\028\015\249pWx-\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\004\188\246\239/\240\190[\231\247\255n\015\239\237\191\254y\141\194\000\133\130F\255\018=\000@>\128P\000c\129)\020\187\129\244\015\130\176\224\127\203\130\187\193o\206\030cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000 @|\000\192\b\b\007\192 \002\000\002\193\001\165\231\183y\127\133\242\223?\191\251p\127\127m\255\243\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\tH\165\220\015\160|\021\135\003\254\\\021\222\011~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000 \000(\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000K\207n\242\255\011\229\190\127\127\246\224\254\254\219\255\231\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\002^{w\151\248_-\243\251\255\183\007\247\246\223\255<\198\225\000B\193#\127\137\030\128 \031@(\0001\192\148\138]\192\250\007\193Xp?\229\193]\224\183\231\0151\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\018\243\219\188\191\194\249o\159\223\253\184?\191\182\255\249\2307\b\002\022\t\027\252H\244\001\000\250\001@\001\142\004\164R\238\007\208>\n\195\129\255.\n\239\005\1918z^{w\151\248_-\243\251\255\183\007\247\246\223\255<\198\225\000B\193#\127\137\030\128 \031@(\0001\192\148\138]\192\250\007\193Xp?\229\193]\224\183\231\015K\207n\242\255\011\229\174\127\127\246\224\254\254\219\255\239\165\231\183y\127\133\242\215?\191\249p\127}-\255\243\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\t\002 cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004p$Z\000 \005\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\132!\000\016\n\004\142@\000\000\160\020\000\024\192\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\001\240\003\000  \031\000\130\b\000\011\012\006\003\016\128 0\000\138\004\155@\004\000\168\000\000\016@\b\000\000\000\000\000\000\000\000\000\000\000\128\000\000\002\002\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\b\000\031\0000\002\002\001\240\b \128\000\176\192`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\000@`\001\020\t6\128\b\001P\000\000 \128\003\016\128  \000\138\004\155@\004\000\168\000\000\016@\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\000\000\000\000\000\000\000\004\000\b\000\001\000\001 D\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\001\000\004\016\015\128\024\001\001\000\248\004\016@\000X`s\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000!\000\003\224\006\000@@>\001\000\016\128\022\b\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\004\000\016@>\000`\004\004\003\224\016A\000\001at \031\0000\002\002\001\240\b \128\000\176@`1\b\002\003\000\b\160I\180\000@\n\128\000\001\004\000\128\000\b\000\000\000\000\000\000\000\000\b\000\000\000\000!\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\130\001\240\003\000  \031\000\130\bn\004\142@\000\000\160\020\000\024\192@\000\000\000\000\000\000\000\000\000\006\000\000\004\128\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\000\000@\000$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000`\000\000H\000\000\000\004\000\000\000\000\000(\0028\000\000\000\000\000\000\000\001\000\000\017\000\000\000\000\000\000\000\024\000\b\018\004\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\024\132?\000\177\210\145i\241\136\021\129\0002Y`\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012R\000\144\144\n(\018+\000\016\002\128\000\001A\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\001\000\000\000\000\002\002\000\000\000\004\000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\144\004\132\128Q@\145X\000\128\020\000\000\n\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012B\000\128\128\002(\018-\000\016\002\160\000\000A\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197 \t\t\000\162\129\"\176\001\000(\000\000\020\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@*\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\2241\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224JE.\224}\003\224\1728\031\242\224\174\240[\243\135\152\220 \bX$o\241#\208\004\003\232\005\000\0068\018\145K\184\031@\248+\014\007\252\184+\188\022\252\225\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001)\020\187\129\244\015\130\176\224\127\219\130\187\211o\206\030\000\000@\000\248\001\128\016\016\015\128\192\004\000\005\130\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000%\231\183y\127\133\242\215?\191\251p\127\127m\255\247\192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002D\007\192\012\000\128\128|\nb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\031\0000\002\002\001\240\b \128\000\176\192`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\004\000\128\000\000 \016@\000\000@\000\000\000\000\000\006\002\000@\000\000\016\b\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\016\000 \000\000\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\002\000\000\000\002\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\000\001\000\000\006\002\000@\000\000\016\b\000\000\000 \000\000\000\000\000\004\128\017@\002\004\tHp\000d\000\025\128\000 \004\000\128\016\016\000\002\005\002\000\000\000\b\000\000\000\000\000 \000\000\000\000\000\128\000\004\000\000\000\001\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000H\001\020\000 @\148\135\000\006@\001\152\000\002\000@\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\004\000\002\000\006\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001\000\003\000\000\000\004\000\000\000\000\000\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000\000\000\000\000\b\000\000\000\128\001\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000@\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196 \136\b\000#\129&\208\001\000(\000\000\004\016\000b\016D\004\000\017\192\145h\000\128\020\000\000\002\b\0001\b\002\002\000\b\224H\180\000@\n\000\000\001\004\000$\000\138\000\016 \nb\016\252\002\199JE\167\198 V\004\000\201e\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\0001H\002B@\b\160H\172\000@\n@\000%\004\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001H\002B@\b\160H\172\000@\n@\000%\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001H`\000d\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000%\"\151p>\129\240V\028\015\249pWx-\249\195\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\138\002R)w\003\232\031\005a\192\255\151\005w\130\223\156=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\128  \000\138\004\139@\004\000\168\000\000\017@JE.\224}\003\224\1728\031\242\224\174\240[\243\135\128\000\017\000>\000`\004\004\003\224\016\001\000\001\240\128\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\002\002\000\000@\160@\000\000\001\000\000\000\000\000\004\000\000 \000\000\016\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\128\000\004\000\000\002\000\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\000\000\128\000\000@\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004$\000\170\000\0160JC\128\002 \000\236\000\017\000\"\000\000\016\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\016\000\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\002\000\000\002\000B\001\128\000\000\004\000\128\000\000 \000\000\000\000 \b\000@\000\000\000\000\000\000\002\000\000\000\000\000\000\016\004\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000H\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \000\000 \0040\024\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\128\000\b\000\000\b\001\014\006\000\000\000\016\002\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\018\000\001\141\194\000\133\130F\255\018=\000@>\128P\000c\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000@\002\000\000\000\000\000\000\000\016\000\000\000\000 \000\000 \001\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\006)\000HH\001\020\t\021\128\b\001H\000\000\160\128\003\128\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000@\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\002\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\002\000\000 \000\000 \0048\024\000\000\002@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\002\000\000\002\000C\129\128\000\000$\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\192`\000\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\0008\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\004\000\000\000\0001\184@\016\176H\223\226G\160\b\007\208\n\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001{vD\004\023\248\172\128\002`\224:q\193`Phg\240\145eb\149\191\204\207@P\015\184\020\000x\224\001\136@\016\016\000E\002E\160\002\000T\000\000\b \004\000\000@\000\000\000\000\004\000\000\000\000\000\001 D\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\016\000\128\000\000\000\128\000\000\000\000\000\000\000\000\004\000\000\000@\000\b\000@\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000 \000\000\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\1640\000\"\000\014\192\000\016\000\000@\b\b\000\001\002\129\000\000\000\004\000\000\000\000\000\016\144\002(\000@\192)\014\000\b\128\0030\000\004\000\000H\001\020\000 @\020\134\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\006\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\002\000\000 \000\001 \004P\000\129\000R\024\000\017\000\006`\000\b\001\000\144\002(\000@\128)\b\000\b\128\0030\000\004\000\1280\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\000\001\000\000\t\000\"\128\004\b\002\144\192\000\136\0003\000\000@\b\004\128\017@\002\004\001H@\000D\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\000\b\000\000H\001\020\000 @\020\134\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\246\236\136\b/\241Y\000\004\193\192t\227\130\192\160\208\207\225\"\202\197+\127\153\158\128\160\031p(\000\241\192\003\001\000 \016\000\b\004\016\000\000\016\000\000\000\000\000\001\128\128\016\000\000\004\002\b\000\000\b\000\000\000\000\000\000\192@\b\000\000\002\001\000\000\000\004\000\000\000\000\000\000\144\002(\000@\129)\014\000\bt\020\000 @\020\134\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\016\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\000\000\016\000\b\000\024\000\000\000 \000\000\000\000\000\136\000\000\000\000\004\000\012\000\000\000\016\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\144\002(\000`\128)\014\000\b\128\003\176\000\012\000\000\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000\000\018\000E\000\b\016\005!\128\001\016\000f\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\001Hp\000D\000\025\128\000 \000\002@\b\160\001\002\000\1640\000\"\000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240\002.\128\192\129\195\233\000\b\128\003\000\000\004\000\000H\001\020\000 @\000\132\000\004\000\001\152\000\002\000\000\b\000\000\000\128\000\000\000\128\000\000\000\000\000\000\004\000\004\000\000\000@\000\000\000@\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\004\0040\000 \000\012\192\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 @C\000\002\000\000\204\bn\004\000\000\000\016\000\000\000\000\000B@\b\160\001\003\000\0048\000 \000\012\192\000\016\002\001 \004P\000\129\000\002\016\000\016\000\006`\000\b\001\000`\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\128\128\000\016(\016\000\000\000@\000\000\000\000\001\t\000\"\128\004\012\000\016\224\000\128\0003\000\000@\b\004\128\017@\002\004\000\b@\000@\000\025\128\000 \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\128\000\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \000C\000\002\000\000\204\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\132\128\017@\002\006\000\bp\000@\000\025\128\000 \000\002@\b\160\001\002\000\0040\000 \000\012\192\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\001\001\000\128 P \128\000\000\128\000\000\000\000\000\004\000\128\128\000\016(\016@\000\000@\000\000\000\000\000\002\000@@\000\b\020\b\000\000\000 \000\000\000\000\000\132\128\017@\002\006\000\bp\000@\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\004\000\002\000\006\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001\000\003\000\000\000\004\000\000\000\000\000\017\000\000\000\000\000\128\000\128\000\000\002\000\000\000\000\000$\000\138\000\024 \000C\128\002\000\000\204\000\003\000\000\"\000\000\000@\000\b\000`\000\000\000\000\000\000\000\000\016\000\000\000 \000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\024\000\000\000\000\000\000\000\000\004\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\016\000@\001\"\004\000\000\000\000\000\000\000\000\001\000\000\016\000\000\018\002\020\004\000\000\000 \004\000\000\000\128\000\b\000\000\t\001\b\002\000\000\000\016\002\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\128\016\128 \000\000\001\000 \000\000\b\000\000\000\000\b\002\000\016\000\000\000\000\000\000\000\000\004\000\000\000\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\002\000\000 \000\000 \0048\b\000\000\000@\b`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000@\000\004\000\000\004\000\134\001\000\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\128\002\000\t\016`\000\000\000\000\000\000\000\000\002\000\000@\001\000\004\136\016\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\b\000\000\000\000\000\000\000@\000@\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\016\000\000\000\b\000\001\000\004\000\018 @\000\000\000\000\000\000\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\128\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000*\128\004\b\130\144\224 \136\000;\000 @\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000@\000\000\000 \000\004\000\016\000H\129\000\000\000\000\000\000\000\000\000H\001T\000 D\020\135\001\004@\001\216\001\002\000@ \000\002\000\000\002\000C\128\128\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.0\000\b\000\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000\128\000\b\000\000\b\001\014\006\000\000\000\016\002\000\000\000@\000\004\000\000\004\000\134\001\000\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000@\000\000@\b`\016\000\000\000\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\b\001\b\002\000\000\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000 \018\000E\000\b\016\005!\000\001\016\000f\000\000\128\016\016\000\000\000\000\000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\002\000\b\000$@\128\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\128\002 \000\204\000\001\000 \018\000E\000\b\016\005!\000\001\016\000fb\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\192\000\r\001 \002\149\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000(\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000@\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\012\000\000\208\018\000)\\ \000\016\000\000\000\000\000\000\006\000\000`\000\000\020.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\128\000\026\002@\005+\132\000\002\000\000\000\000\000\000\001`\021P\000\129\128\130\028\000\017\000\007`\000\b\001\000\176\n\168\000@\192A\014\000\b\128\003\176\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\170\000\016 \000C\128\002\000\000\236\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\000\b`\000@\000\025\128\000 \004\002@\b\160\001\002\000\004 \000 \000\012\192\000\016\002\002\000\000\000\000\000\000\128\006\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\006\000\000h\t\000\020\174\016\000\b\000\000\000\000\000\000\004\128\017@\002\004\000\b`\000@\000\025\128\000 \004\002@\b\160\001\002\000\004 \000 \000\012\192\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \000B\000\002\000\000\204\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\020\000 @\000\134\000\004\000\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\000!\000\001\000\000f\000\000\128\016\004\000\000\"@\001\020\000 \004\000\000\000\000\000\001\000\002\000\000\017 \000\138\000\000\002\000\000\000\000\000\000\128\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000R\024\000\017\000\007`\004\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\020\000 @\020\134\000\004@\001\152\001\002\000@$\000\138\000\016 \nB\000\002 \000\204\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\000\b@\000@\000\025\128\000 \004\001\000\000\b\144\000E\000\b\001\000\000\000\000\000\000@\000\128\000\004H\000\"\128\000\000\128\000\000\000\000\000 \000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\024\128\001\176 \000p\184P\000 \001\000\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\"\128\004\b\000\016\192\000\128\0003\000 @\b\004\128\017@\002\004\000\bb\000\001\000\012\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\128\006\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000@\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\012R\000\144\144\002(\018+\000\016\002\144\000\001A\000\006!\136C\240\011\029)\022\159\024\129X\016\003%\150\001\000\000 \000\128\nD\b\000\000\004\000\000\000\000\000\002\000\000 \000\000$\004(\024\000\000\000@\b\000\000\001\000\000\016\000\000\018\002\016\012\000\000\000 \004\000\000\000\128\000\b\000\000\b\001\b\006\000\000\000\016\002\000\000\0067\b\002\022\t\027\252I\244\001\000\250\001@\001\142\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\016\000\001\000\000\001\000!\128\192\000\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000 \000\128\nD\024\000\000\004\000\000\000\000\128\000\128\000\016\000@\005\"\012\000\000\002\000\000\000\000\000\000@\000\b\000 \002\145\002\000\000\001\000\000\000\000\000\000 \000\004\000\016\001H\129\000\000\000\128\000\000\000\000\0001\b\"\003 \b\224I\180\000@\n\000\000\001\004\005\237\217\016\016_\226\178\000\t\131\128\233\199\005\129A\160\012B\b\128\128\0028\018m\000\016\002\128\000\000A\000\006!\004@@\001\028\t\022\128\b\001@\000\000 \128\003\016\128  \000\142\004\139@\004\000\160\000\000\016@\000\000\000\000\000\000\000\000\016\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\016\000\016\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\004\000\000\000\002\000\000@\001\000\020\136\016\000\000\b\000\000\000\000\000\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001H\002B@\b\160I\172\000@\n\000\000\001\004\000\024\164\001! \004P$V\000 \005\000\000\000\130\000\012R\000\144\144\n(\018+\000\016\002\128\000\000A\000\002\000\000@\001\000\020\136\016\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\004\000\128\000\016\000@\005\"\004\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\146\172\160\194\137i\159\222\b\128\0232\130\015\026\128yIVPaD\180\207\239\004@\011\153A\007\141@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000U\000\b\017\005!\192\193\016\000f\000A\128P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\n\160\001\002 \1648\024\"\000\012\192\b0\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001T\000 D\020\135\003\004@\001\152\001\006\001@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\004\000\000\000\002\000\000@\001\000\020\136\016\000\000\b\000\000\000\000\000\004\128\021@\002\004AHp0D\000\025\128\016`\020\001\136A\016\016\000G\002E\160\002\000P\000\000\b \000\196 \b\b\000#\129\"\208\001\000(\000\000\004\016\000\000\000\000\000\000\000\000\004\000\004\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\t\000\020\174\016\000\bb\000\000\000\000\000\004\000\000@\000\000@\bp0\000\000\000\128\016\000\016\002\000\000 \000\000 \0040\024\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\227\000\000\128\000\000\000\000\000\0000\000\003@@\000\225p\128\000@\000\000\000\000\000\000 \000\002\000\000\002\000C\001\128\000\000\004\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \000\000 \0040\024\000\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\000\000\004\000\132\003\000\000\000\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\192\001\016\000f\000\000\128\016\006\000\000h\t\000\020\174\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\016\000@\005\"\004\000\000\002\000\000\000\000\000\001 \004P\000\129\000R\028\000\017\000\006`\000\b\001\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nC\000\002 \000\204\000\001\000 \018\000E\000\b\016\005!\000\001\016\000f\000\000\128\016\016\000\000\000\000\000\004\0000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\000H\001\020\000 @\020\134\000\004@\001\152\000\002\000@$\000\138\000\016 \nB\000\002 \000\204\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b`\000\b\001\000\144\002(\000@\128)\012\000\b\128\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\138\000\016 \nB\000\002 \000\204\000\001\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004P\000\129\000R\024\000\016\000\006`\000\b\000\000\144\002(\000@\128)\b\000\b\000\0030\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\"\128\004\b\002\144\128\000\200\0003\000\000@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\164 \0002\000\012\192\000\016\002\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\017@\002\004\tHp\000D\000\025\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192@\b\000\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000H\001\020\000 @\148\135\000\004@\001\152\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000E\000\b\016\005!\128\001\000\000f\000\000\128\000\t\000\"\128\004\b\002\144\128\000\128\0003\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\b\000\000 \000 \000\000\000\128\000\000\004\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\002\000\004\128\017@\002\004\000\b`\000@\000\025\128\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\018\000E\002\b\016\000!\128\001\000\000v\000D\128\016\006 \000l\b\000\028.\020\000\b\000@\004\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\b\160\001\002\000\0040\000 \000\012\192\b\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000 \000\000\128\000\128\000\000\002\000\000\000\016\000\b\128\000\000\000\000@\000@\000\000\001\000\000\000\b\000\018\000E\000\b\016\000!\128\001\000\000fb\000\004\002\b\000\000\b\000\000\000\000\000\000\192@\b\000\000\002\001\004\000\000\004\000\000\000\000\000\000` \004\000\000\001\000\128\000\000\002\000\000\000\000\000\000\000\000@\000\000\000\128\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\128\128\000\016(\016\000\000\000@\000\000\000\000\001\000\000\bo\206\030\148\138]\192\250\007\193Xp?\229\193]\224\183\231\015\001\136@\016\016\000E\002E\160\002\000T\000\000\b\160%\"\151p>\129\240V\028\015\249pWx-\249\195\204n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$z\000\128}\000\160\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\027\132\001\011\004\141\254$z\000\128}~\000`$\000\003\226\016\001\002\000`\162\192\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\001\000\000\000\000\000\nb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012nb\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002\bfz\002\160}\200\160\001\199\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\011! \128\004\b\022\144\128\128\136\000r\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\130\000\016 \nB\000\002 \000\200\b\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \004\016\000\129\000R\016\000\016\000\006\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\248H0\177J\223\230g\160*\007\220\138\000\028p\025\252$\024X\165o\2433\208\021\003\238E\000\0148\000\144\002\b\000@\128)\b\000\b\128\003 \000\004\000\000H\001\004\000 @\020\132\000\004@\001\144\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000 \128\004\b\002\144\192\000\136\0002\000\000@\000\004\128\016@\002\004\001H@\000D\000\025\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\001\004\000 @\020\134\000\004@\001\144\000\002\000\000$\000\130\000\016 \nB\000\002 \000\200\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    13
  
  and action =
    ((16, "N\128YbS\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024`S\142\000\000\000\000\023\\S\142N\128Yb\023\\\000\003\000\000\000\000Yb\023\\\000\003Yb\023\\\000\003\000\000\000\000\000\000\019\030\024\198\005\024\000:\000\000\000B\000n\000\000\000\000\000\000\000\000\000\000\023\\\000\000Ld\000\000\000\000\140\130\000\000S\142N\128\0036\000Q\000\222{\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\246\002\174\000\174\000\000\002\006\0068\000\000\0014\003\030\bX\000\000\003*\003\186\b\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004~\000\000\004`n \000\000\000\000\003\158\000\000\000\000\000\000\006\030\005\188\000\000\000\000n W\180\023\\U\172s\174\023\\V\236Yn\023\\n\160\000\000\000\022\000\000N\016\000D\000\000\026l\000\000\026|\000\000\000\000\005\190\000\000\003\158\000\000\000\000\000\000\004\202\000\000\026l\000\000\006n\148~\149$|\166\151,\156\002k\138\000\000`\130\027P\157l\003\158\141\b^nk\138k\138T2\000\000n ~\244\000\000n y,\004N\005\146\004N\007\148\000\000\006\206\000\000\000\000\006\206\000\000\000\000\000\000n \003\158\000\000\000\000d\022\159\172k\138d\232\159\208k\138e\186cDk\138\000\000\000\000`p\004N\000\000\000\000abk\138bTf\140\000\000l\\k\138\0070\1602k\138g^h0\000\000\0076\160Vk\138i\002i\212\000\000j\166\000\000\000\000\000\000\000\000\000\006\000\000n \000\000\000$p\182\000\000n \006fn \000\000\028\024\007\162\003\158\000\000\000\000\0314\000\000\000`\000\000p\132\002D\000\000\007Ln \003\018\000\000\004t\000\000\001D\000\000\000\003\004\182\000\000\000\000\000\000\b4\160\184k\138kxlJ\000\000\b\200\160\220k\138m\028m\238\000\000\004,\003\158\000\000n \025\026\001>\000.\023\030at\000\000\000\000\028`bf\000\000\027\018\000\000\b\130\000\000\tP\t\242\000\000\007\192\004N\004N\000\000\000\000n \001\234\002L\000\000n \003\186\156\002\000\000\003\142\000\000\000\000\000\000\t\200\tx\157l\001\154\003V\023$\000\000\n\140\000\000\023\220\000\000\000\000\000\000\000\000\128x\000\000\n\024\n\212\133\228k\138\003\142\011\020\000\000\011\158k\138t8\000\000}$k\138\011fk\138\128\248t\198\023\\\000\000\000\000\146\186\024\242\000\000\000\000\000\000\146\248\000\000\133\228\023\\\000\000\003\142\011\186\000\000\000\000\000\000\1430\027\020\026\004\003\142\011\250\000\000\000\000\000\000\003\142\012\012\000\000\000\000\000\000\000\000\149$\000\000qLS\142N\128Yn\023\\o6N\016\006\246\143n\000\000\149Xn \b0n }\178\134b\000\000\000\000\012\"\028$\000\000!t\024\242\141\"-$\011(\012@\000\000\002\"\004\232\011\160\012\138\000\000\023\\\000\000\000\000\134b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\174-$\023\\\000\000\000\000\007\174\143n\000\000\149X\000\000\012\130\028$!t\134b\000\000N\128\000\000\000\000\000\000R\188Q\186\023\\\027\134\000\000\023\\N\128YB\023\\Q\002n\240\000\000\000\160\000\000\000\000\003V\000\000\000\000T\128\000\160\003$\000,\003X\000\000\000\000\001\232\000\000U\172\012\210\012\166\023\\\027\134\028\242\023\\\000\003\000\000\000\000Yb\023\\\000\003Yb\023\\\000\003\000\003\001\014\000\003Yb\023\\\147x\000\000o\160\000\222\129x\003,\004\n\004\n\001\144n \006H\012\226\000\000\012\228\000\000\000\000\007>\007\186\004\n\007p\000\003n\240\147\218\138\152\000:\000\000\012\224\000\000\028\"n \025\012\027\006n\240Yb\023\\n\240\000\000\004N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_p \012\000\000\000\000\000\000\002\028\031\198\138\152\000\000Yn\023\\n\240\000\000\000\000c\180n\240eXn\240f\252\000\000n\240\000\000\000\000o\160\000\000\000\000O4\000\000n\240h\160n\240jD\000\222\000\000\147\218\000\000\012\244\000\000S0\143\252\000\000\000\000\000\000O4\t\138\001\186\t\182\000\000\000\000\000\000\000\000\012.\000\000q\228\005\154\000\000n\240n\240P2n \007X\007p\r\018\000\000\007p\r:\000\000\000\000\000\000T\128\003h\003h\000\000\r@\130\016\153\160X\144\003Vn\240R6\000\000PL\000\000n \005\218\000\000\000\000\000\003YbY\152Q\186\023\\\027\134\000Q\006\174\003X\000\000\012\128U\172U\172\000Q\006\174\006\174\000\000\r\024U\172\000\000\130\178\t\130N\016\000:\000\197\157\022\000\000n ~@n uT~\202\000\003\000\174\004Nv\006\000n\004Nv\144\000\000\130\240\t\130\000\000U\172\131~\000\000\007\014\b\238w\026\000\000\000\000\000\000\000\000\000\000\026j\000\000\029\154\000\000\r\026\027\134\000\000s U0\000\000\004(\000\000U\172\030\"\000\000\000\000\000\000r\146\000\000\007\238\000\003N\128P\136\007\020\018\200\000\003\025fN\244\019\030\000\003Yb\023\\\019\030Yb\023\\O\132Yb\023\\\000\003Yn\023\\\138\152n\240\024\178\000\003\135\006\023\\\144\148U\132\003h\rN\135h\000\003Yn\023\\n\240\028\242\000\003Yn\023\\n\240\"B\000\003\019\030\000\000\000\000\000\000\000\000\002\030\029\166Mr\000\000Z>[\026Q\186\023\\\027\134\003\202U\172\030$\000\000[\246\\\210\143\252\030\002n \nD\000\003Yb\023\\\019\030\025f\019\030\003.\021&\000\003\000\003\019\030\bf\r\014\003\160n \028\128n \024~n \029\144\r`\000\000\000\000\r.\000\000\019\030\004>\r4\000\000\016\230\000\003\r|\000\000\029\166\000\003\020.\026v\000\000\000\000\000\000\000\000\000\208\000\003\000\000\000\000\004V\000\003\000\000\030\182\000\003\031\198\000\003 \214\000\000\021>\027\134\000\003\000\000\000\003S\142\000\003\000\000\000\000\000\003!\230\000\003\"\246\000\003$\006\000\003%\022\000\003&&\000\003'6\000\003(F\000\003)V\000\003*f\000\003+v\000\003,\134\000\003-\150\000\003.\166\000\003/\182\000\0030\198\000\0031\214\000\0032\230\000\0033\246\000\0035\006\000\0036\022\023\\o\160qL\157l\003h\012\230n \nP\000\003\000\000\bln \011\028\000\003\000\000\r\006\000\003\000\000\000\000\000\000\130\016\r\b\000\003\000\000\000\000\000\000\031\018n \011T\000\003\000\000#R\000\003\000\000n\240$bn\240%rn\240&\130\000\222\000\000\000\000\000\000'\146n\240(\162\134b\000\000\000\000\000\0007&\000\003\r\168\000\000\000\003\131\246\000\000\005\234\0226\000\003\r\182\000\000w\172O\132\000\000\000\003\r\190\000\000\000\003\r\194\000\000\000\000\019\030\005N\023\190\000\003\r\208\006^\000\00386\000\003\r\214\007n\000\0039F\000\003\r\218\b~\000\003:V\020\022\000\003\r\242\t\142\000\003;f\000\003\r\240\n\158\000\003<v\000\003\135\220\011\174\000\003=\134\006h\024\020\000\003\r\246\012\190\000\003>\150\000\003\r\244\r\206\000\003?\166\000\003\014\002\014\222\000\003@\182\015\238\000\003A\198\016\254\022N\000\000\000\000\000\000\014\n\000\000\000\003\014\n\000\000\000\003\014\014\000\000\000\000)\178\000\003\000\000\005(\000\003\000\000o\160\000\000\000\000\142*\014 \000\000P\136\000\000\rR\000\000w\172Yn\028\132\000\003\135\220\000\000\000\000\000\000Yn\023\\n\240 \"\000\003x\018\000\003x\018\000\000\000\000\000\003x\208\000\000\000\000\000\000\000\000]\172\000\000\014.\000\000\131\246Yn\005\\\000\003\136B\000\000\000\000\000\000\000\000\000\000\007\020\r\198\000\000\025fK\164\000:\000\000\030\160\000\000\028V\n\198\002^\000\000\000\000\014J\000\000\001\180\030\182O\248\000\000\003\194\000\003\r\158\000\003\r\164\000\000\r\162\000\003\r\168\000\000\000\003\003\194\000\003\r\166\000\003\r\186\000\000\000\000V\136\003h\014\128\135hk\138\024,\000\003\000\000\135h\000\000\000\000n\240\014\134\000\000\000\000\135h\000\000\014Z\000\003\000\000\000\003\000\000\000\000\000\000B\214n\240\000\000\000\000\014\182\000\003C\230\000\003D\246\000\000\014\004\000\000\028\150w\172\000\000\018\014\014\176\000\000x\018\n\172\007f\000\000\000\000\0144\000\000\014\184\000\000\131\246\000\000\000\000\r\246\000\000w\172\000\000\000\000\023\\\027\134\bh\000\003\000\000\003$\000,\003X\007^\027\134\144\222U\172\000\180\027\134\145^\014N\000\003\000\000\007^\000\000\024\198\023\\\024\242\0058\b\022\014X\000\003\000\000\023\\\147xo\160\134b\000\000\000\000\000\000\000\000\000\000\014\216\000\000\007p\014\224\000\000\000\000W\140\003h\014\234\132\144\000\003\000\000\014L\000\003\000\000\000\000\000\000\132\144\000\000\157l\t\004n \012,\000\003\000\000\014P\000\003\000\000\000\000\134b\000\000F\006\000\000\015,\138\152G\022\015.\138\152H&x\208\000\000U\172\0312\000\000U\172\024X\000\000U\172 D\000\000\127X!R\000\000Q\184\000\000n \b\000\000\000`2!\154\006*\t\160\000\000\014\196\003\160\000\003\000\000\014h\000\003\000\000^\236\000\000\007h\t\238\000\000\t^\000\000\014\202\014Pn Mr\014\216\004\176\000\003\000\000\014~\000\003\000\000!\196\tZ\t\206\014\226\137\002\157\184\003h\014|n \012L\000\003\000\000\n\014n [\026\014\146\000\003\000\000c\002\000\000^\236\000\000\bx\n\134\000\000\nn\000\000\015\000\014\146\157l\000\000\015\030\137\154\157\208\003h\014\180n \012d\000\003\000\000\014\202\000\003\000\000\000\000S\142N\128n\240P2\000\003\000\000\"\220\024\198\005\024\003\158\151\148U\172\148$\134b\000\000\023\\\tv\003X\007^\134b\154\018\000,\003X\007^\134b\154\018\000\000\000\000\007^\134b\000\000S\142N\128Q\186\023\\\027\134\149X\000\000\0036\000Q\000\222\014\164n \r<\015x\151\210\000\000\134b\000\000\024\198\023\\\024\242\145\196-$\023\\\134b\000\000\023\\\134b\000\000y,\161.\004l\003$\000,\004N\156f\000\000\000,\004N\156f\000\000\"\220\023\\\n\134\027\"\004N\156f\000\000\003X\014\168U\172\134b\1588\000,\003X\014\184U\172\134b\1588\000\000\000\000\bn\000\003qL\000\000U\172\154BqL\000\000\bn\000\000W\180\023\\U\172\134b\000\000\024\198\023\\\024\242}4+z+z\005\024\006.\000\000\n\254\026l\t\b\000\000\015N\014\246Q\234\023\\dTn \011*\000\000a\194\023\030\n\152\011\252\000\000\011\020\000\000\015Z\014\240n ^\236\000\000\023$\t\136\011\144\000\000\011\248\000\000\015x\014\254\157l^\236\000\000\023\030Q\234\015\166\000,\000,\000\003\011\136Q\234n \nB\004N\000\000n \005\218\011\028\000\000\000\000\133\028\000\000\000\003\011\242Q\234\133Z^\236\000\000\023\\n \r\\n T\128^\236\000\000\015&\000\000^\236\000\000\000\000a\194\000\000\134b\154\192\005\024\006.\n\254\015\148\0158Q\234\134b\154\192\000\000\000\000\005\024\006.\n\254\015\160\015 _\170^jk\138\015\190_\170y,\025\244\015\200_\170k\138\015\202_\170\138&\138\176\000\000\152\\\000\000\000\000qL\158J\005\024\006.\n\254\015\190\015J_\170qL\158J\000\000\000\000\000\000\161.\000\000\000\000\000\000\000\000\000\000\000\000qL\000\000\155*\023\\N\016\015\210\143n\000\000\149X\155*\000\000\000\000\158\200\023\\N\016\015\212\015T\149$\000\000qL\158\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011L+z\005\024\006.\n\254\015\218\139HT\128N\174\023\\Q\002`2\023\\\000\003^\236\000\000\023\030\023\030N\174N\174\139\240S\142\023\\\147xo\160\026\168\000\000\006\164\000,\000\003\012\028N\174n \011(\000:\000\000\023\\\139H\142\200N\174\t\166N\174\000\000Q\132R\134\000\000y\214\000\000\000\000zT\000\000\000\000{\002\000\003\012nN\174{\128\147xo\160\026\168\000\000\005\024\000\000_\170\016(\000\000Ld\015\232\000\000^\236\000\000N\174Ld^\236\000\000\023\\n ^\236\000\000\015\136\000\000^\236\000\000\000\000`2\000\000\149\226_\170\015\148N\174\150 \139H\000\000\134b\155\144\005\024\006.\n\254\015\254\139H\134b\155\144\000\000\000\000\000\000\156\164Yb\000\000\000\000\000\000\000\000\000\000\152\154\000\000\153$\134b\000\000\155*\000\000\000\000\000\000\000\000qL\156\164\000\000\016>\000\000\152\154\000\000\153$\016N\000\000\015\196\000\000\015\202\000\000\149X\000\000\023\\\027\134\149X\000\000qL\156\164\000\000\000\000\016t\000\000\000\000\016d\028$,\020\149X\000\000\000\000\000\000\000\000\t\146\150\134\149$\000\000qL\000\000\016f\028$,\020\149X\000\000\015\216\000\000!T\000\000\134b\000\000\016|\000\000\000\000Q\186\023\\\027\134\004d\000\000U\172!b\000\000\006(\000\000\016\144\000\000\016\202\138\152I6JF\138\152KV\000\003\000\000\000\003\000\000\015\236\000\003\015\246\000\000\016\196\000\000\000\003\016\028\000\003\016\"\000\000\0168\000\000\000\000V\236\016B\000\000\000\000+v{\250\016\232\000\000\000\000\000\000\011|\n:\127\204\016\242\000\000\000\000\000\000\000\000\000\000\000\000\016T\000\000-$\000\000\016\\\000\000n \000\000\b\\\000\000\000\003\016f\000\000\000\000\004N\000\000\011\172\000\000\000\003\000\000\004\228\000\000\012\184\000\000\016h\000\000n\240\024\178\000\000\000\000\011J\016l\000\000\000\000\016n\011\150O\132\003\158\146T\000\000\000\000\000\000\000\000\000\000\156j\000\000\000\000\017*\000\000U\232\000\000\012\182\0170\000\000\017<\000\000P\136P\136\159,\159,\000\000\000\000\134b\159,\000\000\000\000\000\000\134b\159,\016\150\000\000\016\154\000\000"), (16, "\tq\000\006\000\254\tq\n\186\tq\001\n\001\014\tq\001\018\001\030\001*\tq\004\149\tq\004\149\001.\tq\012\237\tq\tq\tq\n\194\tq\tq\tq\0012\004&\000\246\004\149\004\149\0016\tq\007z\007~\rv\tq\001\014\tq\012\237\007\158\012\241\004\149\001:\004\254\tq\tq\b\014\b\018\tq\b\022\b\"\001n\b.\b2\b:\b\150\nZ\0046\tq\tq\001\130\012\241\001R\011\130\tq\tq\tq\011\134\011\138\011\150\011\166\t9\b\210\tq\tq\tq\tq\tq\tq\tq\tq\tq\011\190\001F\tq\000\246\tq\tq\tq\000\246\n\170\011\202\011\226\012\002\012\022\b\222\tq\005\170\tq\tq\tq\006\253\tq\tq\tq\tq\011\158\004\149\011\162\001V\018\030\tq\005I\tq\tq\000\246\tq\tq\tq\tq\tq\tq\b\226\011\178\tq\tq\tq\012*\003z\012\142\004*\tq\tq\tq\tq\r\029\011\002\t9\r\029\002\158\r\029\r\029\r\029\r\029\001N\004\149\r\029\r\029\r\029\r\029\023\198\r\029\r\029\007\182\r\029\r\029\r\029\000\246\r\029\r\029\r\029\r\029\002\170\001\150\r\029\001~\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\001\234\t9\007\186\003\153\r\029\004\149\r\029\r\029\r\029\r\029\r\029\004\154\r2\r\029\n\222\r\029\r\029\018\234\r\029\b6\r\029\r\029\r\029\001\238\n\230\r\029\r\029\r\029\r\029\r\029\r\029\r\029\n\234\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\001\205\r\029\r\029\003\193\r\029\r\029\r\029\004\149\000\246\t\178\001\014\004\149\r\029\r\029\r\029\r\029\r\029\r\029\r\029\014&\r\029\r\029\r\029\r\029\r\029\r\029\r\029\005\001\r\029\r\029\004\149\r\029\r\029\004\158\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\r\029\007\234\t\029\r\029\r\029\r\029\r\029\001\205\000\246\001\205\001\205\001F\001\205\001\205\001\205\001\205\001\246\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\004*\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\003\193\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\014\001\205\000\246\004z\001\205\005V\001\205\001\205\001\205\001\205\001\205\bf\001\205\001\205\001\205\001\205\001\205\te\001\205\017v\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001F\001\205\001\205\001\205\000\246\t\029\001\234\003\153\007\238\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\t\018\012B\001\205\006\250\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\001\205\ni\003\021\003\021\ni\005Z\ni\ni\ni\ni\004\138\t5\ni\ni\ni\ni\002\006\ni\ni\001\234\ni\ni\ni\003\153\ni\ni\ni\ni\007\222\007\226\ni\000\n\ni\ni\ni\ni\ni\ni\ni\ni\000\n\005\142\007\t\nz\ni\003\173\ni\ni\ni\ni\ni\006e\bZ\ni\b~\ni\ni\003\021\ni\003\021\ni\ni\ni\003\021\002R\ni\ni\ni\ni\ni\ni\ni\003\021\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\n\022\ni\ni\016\218\ni\ni\ni\005n\t!\005r\007\194\002\022\ni\ni\ni\ni\ni\ni\ni\006=\ni\ni\ni\ni\ni\012\166\ni\002V\012\254\ni\004*\ni\ni\007\198\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\ni\011N\ni\ni\ni\ni\ni\003\225\000\246\005v\003\225\006e\003\225\003\225\003\225\003\225\000\246\011Z\003\225\003\225\003\225\003\225\002J\003\225\003\225\004\230\003\225\003\225\003\225\020N\003\225\003\225\003\225\003\225\b^\bb\003\225\003\021\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\012\194\028r\011N\012\202\003\225\016\222\003\225\003\225\003\225\003\225\003\225\004\146\t!\003\225\002:\003\225\003\225\000\246\003\225\000\n\003\225\003\225\003\225\003\006\012f\003\225\003\225\003\225\003\225\003\225\003\225\003\225\011N\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\004\166\012\158\012\246\000\246\003\225\003\225\003\225\003\021\002\222\001R\005>\rB\003\225\003\225\003\225\003\225\003\225\003\225\003\225\004\238\003\225\003\225\003\225\003\225\003\225\012\166\003\225\011^\012\254\003\225\004\149\003\225\003\225\004\149\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\003\225\026\150\003\225\003\225\003\225\003\225\003\225\003\209\006\254\002B\003\209\028v\003\209\003\209\003\209\003\209\014&\017\022\003\209\003\209\003\209\003\209\022V\003\209\003\209\004*\003\209\003\209\003\209\020\150\003\209\003\209\003\209\003\209\004\149\005\198\003\209\017&\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\012\194\000\246\004\149\012\202\003\209\t\214\003\209\003\209\003\209\003\209\003\209\029\151\002\226\003\209\003z\003\209\003\209\003e\003\209\n\230\003\209\003\209\003\209\002\198\016j\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003e\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\002\202\012\158\012\246\003N\003\209\003\209\003\209\t\218\nN\n\006\t\t\026\154\003\209\003\209\003\209\003\209\003\209\003\209\003\209\017\014\003\209\003\209\003\209\003\209\003\209\012\166\003\209\005\234\012\254\003\209\016r\003\209\003\209\023&\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\028\134\003\209\003\209\003\209\003\209\003\209\n\r\000\246\006\201\n\r\016\186\n\r\n\r\n\r\n\r\003f\003\197\n\r\n\r\n\r\n\r\002J\n\r\n\r\004\149\n\r\n\r\n\r\002b\n\r\n\r\n\r\n\r\004\149\004\149\n\r\rA\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\001\250\002f\000\246\004\149\n\r\rA\n\r\n\r\n\r\n\r\n\r\015\018\t\t\n\r\001N\n\r\n\r\000\246\n\r\015b\n\r\n\r\n\r\002\238\003^\n\r\n\r\n\r\n\r\n\r\n\r\n\r\000\246\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\002J\n\r\n\r\003a\n\r\n\r\n\r\003\197\012\194\nv\004\149\012\202\n\r\n\r\n\r\n\r\n\r\n\r\n\r\000\246\n\r\n\r\n\r\n\r\n\r\n\r\n\r\003j\n\r\n\r\015\214\n\r\n\r\001N\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\006\166\004\149\n\r\n\r\n\r\n\r\n\t\020n\004F\n\t\003N\n\t\n\t\n\t\n\t\011\142\004U\n\t\n\t\n\t\n\t\003\226\n\t\n\t\003\250\n\t\n\t\n\t\007y\n\t\n\t\n\t\n\t\026\014\b\134\n\t\019^\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\002J\003V\020v\018\130\n\t\nv\n\t\n\t\n\t\n\t\n\t\011\142\0065\n\t\004V\n\t\n\t\000\246\n\t\015v\n\t\n\t\n\t\005:\011\018\n\t\n\t\n\t\n\t\n\t\n\t\n\t\003N\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\tM\n\t\n\t\007N\n\t\n\t\n\t\004U\b\138\bb\018\218\020.\n\t\n\t\n\t\n\t\n\t\n\t\n\t\b\146\n\t\n\t\n\t\n\t\n\t\n\t\n\t\004\130\n\t\n\t\018\226\n\t\n\t\011N\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\003Z\000\246\n\t\n\t\n\t\n\t\n\017\021\006\006\209\n\017\000\246\n\017\n\017\n\017\n\017\004\182\011~\n\017\n\017\n\017\n\017\000\246\n\017\n\017\004\230\n\017\n\017\n\017\005J\n\017\n\017\n\017\n\017\021\014\000\246\n\017\004\149\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\002\n\012\186\011N\012\226\n\017\nv\n\017\n\017\n\017\n\017\n\017\000\246\bU\n\017\006\217\n\017\n\017\000\246\n\017\015\138\n\017\n\017\n\017\006\186\011\022\n\017\n\017\n\017\n\017\n\017\n\017\n\017\018\194\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\004\206\n\017\n\017\029g\n\017\n\017\n\017\002\026\005&\0236\022\206\004\230\n\017\n\017\n\017\n\017\n\017\n\017\n\017\014R\n\017\n\017\n\017\n\017\n\017\n\017\n\017\002V\n\017\n\017\022\218\n\017\n\017\020z\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\n\017\007\222\007\226\n\017\n\017\n\017\n\017\n\001\023\146\n\174\n\001\004\149\n\001\n\001\n\001\n\001\002J\021\158\n\001\n\001\n\001\n\001\003\150\n\001\n\001\t\174\n\001\n\001\n\001\004\253\n\001\n\001\n\001\n\001\023\154\004\149\n\001\0069\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\214\t\182\000\246\019\158\n\001\007I\n\001\n\001\n\001\n\001\n\001\002\226\b]\n\001\020B\n\001\n\001\028\022\n\001\015\162\n\001\n\001\n\001\006\214\0065\n\001\n\001\n\001\n\001\n\001\n\001\n\001\0052\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\005~\n\001\n\001\bU\n\001\n\001\n\001\001v\004\230\020r\011\022\026B\n\001\n\001\n\001\n\001\n\001\n\001\n\001\rI\n\001\n\001\n\001\n\001\n\001\n\001\n\001\005\130\n\001\n\001\023\222\n\001\n\001\021\018\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\007\222\022\134\n\001\n\001\n\001\n\001\n\005\023f\029\"\n\005\002V\n\005\n\005\n\005\n\005\014&\022\150\n\005\n\005\n\005\n\005\005\154\n\005\n\005\021\n\n\005\n\005\n\005\000\246\n\005\n\005\n\005\n\005\018z\000\246\n\005\bY\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\020\222\017^\023n\rU\n\005\ta\n\005\n\005\n\005\n\005\n\005\005f\006M\n\005\005.\n\005\n\005\012\138\n\005\015\182\n\005\n\005\n\005\014F\023r\n\005\n\005\n\005\n\005\n\005\n\005\n\005\023\230\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\005\210\n\005\n\005\t\005\n\005\n\005\n\005\001v\023V\026&\001\014\tI\n\005\n\005\n\005\n\005\n\005\n\005\n\005\0031\n\005\n\005\n\005\n\005\n\005\n\005\n\005\b1\n\005\n\005\006Q\n\005\n\005\023.\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\n\005\000\246\001R\n\005\n\005\n\005\n\005\n!\000\246\001\150\n!\001~\n!\n!\n!\n!\005\218\005\242\n!\n!\n!\n!\023\150\n!\n!\000\246\n!\n!\n!\000\246\n!\n!\n!\n!\003N\014Z\n!\006:\n!\n!\n!\n!\n!\n!\n!\n!\be\001\150\023\158\001~\n!\t\005\n!\n!\n!\n!\n!\023\230\003N\n!\006\238\n!\n!\014\154\n!\015\202\n!\n!\n!\006Z\023\210\n!\n!\n!\n!\n!\n!\n!\006n\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\023j\n!\n!\029\030\n!\n!\n!\006\210\ba\n\230\006U\006\242\n!\n!\n!\n!\n!\n!\n!\029\135\n!\n!\n!\n!\n!\n!\n!\003Z\n!\n!\007\002\n!\n!\024\n\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\000\246\007\006\n!\n!\n!\n!\n\025\026\026\007b\n\025\002~\n\025\n\025\n\025\n\025\n\230\000\246\n\025\n\025\n\025\n\025\004\173\n\025\n\025\007\246\n\025\n\025\n\025\000\246\n\025\n\025\n\025\n\025\007\250\019\166\n\025\n\230\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\br\bz\b\174\026z\n\025\020\210\n\025\n\025\n\025\n\025\n\025\t\142\002V\n\025\t\202\n\025\n\025\021B\n\025\015\230\n\025\n\025\n\025\006\138\t\246\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\230\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\002\n\025\n\025\n\"\n\025\n\025\n\025\n\130\n\158\011B\011\250\012\190\n\025\n\025\n\025\n\025\n\025\n\025\n\025\012\222\n\025\n\025\n\025\n\025\n\025\n\025\n\025\012\234\n\025\n\025\012\250\n\025\n\025\r\n\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\000\246\014>\n\025\n\025\n\025\n\025\n\021\014f\014~\n\021\014\254\n\021\n\021\n\021\n\021\015\030\000\246\n\021\n\021\n\021\n\021\0156\n\021\n\021\015B\n\021\n\021\n\021\015^\n\021\n\021\n\021\n\021\015r\022\n\n\021\015\134\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\015\158\015\178\015\226\015\246\n\021\024&\n\021\n\021\n\021\n\021\n\021\016\n\016:\n\021\016F\n\021\n\021\016R\n\021\015\250\n\021\n\021\n\021\016\134\016\150\n\021\n\021\n\021\n\021\n\021\n\021\n\021\017\006\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\017:\n\021\n\021\017n\n\021\n\021\n\021\017\142\017\150\017\158\017\166\017\186\n\021\n\021\n\021\n\021\n\021\n\021\n\021\017\194\n\021\n\021\n\021\n\021\n\021\n\021\n\021\017\214\n\021\n\021\017\254\n\021\n\021\018\018\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\n\021\018>\018V\n\021\n\021\n\021\n\021\n\029\018n\018\138\n\029\018\146\n\029\n\029\n\029\n\029\018\166\018\246\n\029\n\029\n\029\n\029\019\030\n\029\n\029\019N\n\029\n\029\n\029\019Z\n\029\n\029\n\029\n\029\019n\019~\n\029\019\178\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\019\210\019\222\020J\020Z\n\029\020\130\n\029\n\029\n\029\n\029\n\029\020\134\020\146\n\029\020\162\n\029\n\029\020\186\n\029\016\014\n\029\n\029\n\029\020\202\020\234\n\029\n\029\n\029\n\029\n\029\n\029\n\029\021\026\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\021\030\n\029\n\029\021*\n\029\n\029\n\029\021:\021N\022\002\022\014\022\158\n\029\n\029\n\029\n\029\n\029\n\029\n\029\022\182\n\029\n\029\n\029\n\029\n\029\n\029\n\029\023>\n\029\n\029\023B\n\029\n\029\023z\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\n\029\023~\023\166\n\029\n\029\n\029\n\029\nY\023\170\023\194\nY\024:\nY\nY\nY\nY\024j\024n\nY\nY\nY\nY\024\146\nY\nY\024\150\nY\nY\nY\024\166\nY\nY\nY\nY\024\182\024\194\nY\024\246\nY\nY\nY\nY\nY\nY\nY\nY\024\250\025F\025n\025r\nY\025\182\nY\nY\nY\nY\nY\026\162\026\174\nY\026\222\nY\nY\027\002\nY\016\026\nY\nY\nY\027*\027\150\nY\nY\nY\nY\nY\nY\nY\027\170\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\027\178\nY\nY\027\186\nY\nY\nY\027\234\027\246\028.\028B\028Z\nY\nY\nY\nY\nY\nY\nY\028\142\nY\nY\nY\nY\nY\nY\nY\028\150\nY\nY\028\190\nY\nY\028\198\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\nY\028\206\001\014\nY\nY\nY\nY\003\205\028\218\028\226\003\205\028\235\003\205\003\205\003\205\003\205\028\251\029\014\003\205\003\205\003\205\003\205\029*\003\205\003\205\029G\003\205\003\205\003\205\029W\003\205\003\205\003\205\003\205\029s\029\167\003\205\029\195\003\205\003\205\003\205\003\205\003\205\003\205\003\205\003\205\029\206\r\002\030\003\001F\003\205\030\023\003\205\003\205\003\205\003\205\003\205\030\031\030[\003\205\030ct\245\000\000\000\000\t\245\000\000\t\245\t\245\t\245\t\245\000\000\000\000\t\245\t\245\t\245\t\245\000\000\t\245\t\245\000\000\t\245\t\245\t\245\000\000\t\245\t\245\t\245\t\245\000\000\000\000\t\245\000\000\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\000\000\001\230\000\000\000\000\t\245\000\000\t\245\t\245\t\245\t\245\t\245\000\000\000\000\t\245\000\000\t\245\t\245\001\254\t\245\002\014\t\245\t\245\t\245\000\000\000\000\t\245\t\245\t\245\t\245\t\245\t\245\t\245\000\000\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\000\000\012\158\012\246\000\000\t\245\t\245\t\245\000\000\000\000\000\000\000\000\000\000\t\245\t\245\t\245\t\245\t\245\t\245\t\245\000\000\t\245\t\245\t\245\t\245\t\245\012\166\t\245\000\000\012\254\t\245\007a\t\245\t\245\000\000\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\000\000\t\245\t\245\t\245\t\245\t\245\002)\000\000\000\000\002)\000\000\002)\001\n\001\014\002)\000\000\000\000\001*\002)\012\182\002)\000\000\001.\002)\000\000\002)\002)\002)\000\000\002)\002)\002)\0012\000\000\000\000\012\230\000\000\0016\002)\002)\002)\002)\002)\012\238\002)\000\000\000\000\000\000\000\000\001:\007a\002)\002)\002)\002)\002)\000\000\000\000\001n\000\000\001~\002)\000\000\002)\011\146\002)\002)\001\130\000\000\000\000\011\130\002)\002)\002)\011\134\011\138\011\150\000\000\015J\b\210\002)\002)\002)\002)\002)\002)\002)\002)\002)\000\000\012\158\012\246\000\000\002)\002)\002)\000\000\000\000\000\000\000\000\000\000\002)\b\222\002)\005\170\002)\002)\002)\000\000\002)\002)\002)\002)\011\158\015R\011\162\000\000\015\146\002)\000\000\002)\002)\000\000\002)\002)\002)\002)\002)\002)\b\226\011\178\002)\002)\002)\012*\003z\000\000\001\014\002)\002)\002)\002)\nE\000\000\000\000\nE\000\000\nE\001\n\001\014\nE\000\000\000\000\001*\nE\nE\nE\000\000\001.\nE\000\000\nE\nE\nE\000\000\nE\nE\nE\0012\000\000\000\000\nE\000\000\0016\nE\nE\nE\nE\nE\nE\nE\000\000\015\150\000\000\001F\001:\000\000\nE\nE\nE\nE\nE\000\000\000\000\001n\000\000\001~\nE\015\170\nE\015\190\nE\nE\001\130\000\000\000\000\011\130\nE\nE\nE\011\134\011\138\011\150\000\000\nE\b\210\nE\nE\nE\nE\nE\nE\nE\nE\nE\000\000\nE\nE\000\000\nE\nE\nE\000\000\000\000\000\000\000\000\000\000\nE\b\222\nE\005\170\nE\nE\nE\000\000\nE\nE\nE\nE\011\158\nE\011\162\000\000\nE\nE\000\000\nE\nE\000\000\nE\nE\nE\nE\nE\nE\b\226\011\178\nE\nE\nE\012*\003z\000\000\000\000\nE\nE\nE\nE\nA\000\000\000\000\nA\000\000\nA\001\n\001\014\nA\000\000\000\000\001*\nA\nA\nA\000\000\001.\nA\000\000\nA\nA\nA\000\000\nA\nA\nA\0012\000\000\000\000\nA\000\000\0016\nA\nA\nA\nA\nA\nA\nA\000\000\012\170\000\000\000\000\001:\000\000\nA\nA\nA\nA\nA\000\000\000\000\001n\000\000\001~\nA\016>\nA\016J\nA\nA\001\130\000\000\000\000\011\130\nA\nA\nA\011\134\011\138\011\150\000\000\nA\b\210\nA\nA\nA\nA\nA\nA\nA\nA\nA\000\000\nA\nA\000\000\nA\nA\nA\000\000\000\000\000\000\000\000\000\000\nA\b\222\nA\005\170\nA\nA\nA\000\000\nA\nA\nA\nA\011\158\nA\011\162\000\000\nA\nA\000\000\nA\nA\000\000\nA\nA\nA\nA\nA\nA\b\226\011\178\nA\nA\nA\012*\003z\000\000\000\000\nA\nA\nA\nA\002m\000\000\000\000\002m\000\000\002m\001\n\001\014\002m\000\000\000\000\001*\002m\012\182\002m\000\000\001.\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\0012\000\000\000\000\012\230\000\000\0016\002m\002m\002m\002m\002m\012\238\002m\000\000\015\022\000\000\000\000\001:\000\000\002m\002m\002m\002m\002m\000\000\000\000\001n\000\000\001~\002m\015.\002m\015:\002m\002m\001\130\000\000\000\000\011\130\002m\002m\002m\011\134\011\138\011\150\000\000\015J\b\210\002m\002m\002m\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\000\000\002m\002m\002m\000\000\000\000\000\000\000\000\000\000\002m\b\222\002m\005\170\002m\002m\002m\000\000\002m\002m\002m\002m\011\158\004\149\011\162\004\149\004\149\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\b\226\011\178\002m\002m\002m\012*\003z\004\149\004\149\002m\002m\002m\002mn\004\149\005r\004\149\004\149\002J\000\000\000\000\000\000\004\149\000\000\015j\006=\015~\000\000\000\000\004\149\004\149\004\149\000\000\n\170\004\149\004\149\004\149\004\149\000\161\000\161\004\149\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\015\218\000\161\000\161\020\002\000\161\000\161\017\226\000\000\000\161\000\161\005v\000\161\000\161\000\161\003\006\000\161\015\238\000\161\016\002\000\161\000\161\012\185\012\185\000\161\000\161\012\185\000\161\000\161\011\002\000\161\011\222\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\003\021\003\182\000\161\000\161\003\021\000\246\000\161\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\000\000\161\000\000\005\182\000\161\000\246\000\161\001*\000\161\000\n\018\026\000\000\000\000\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\000\161\000\161\000\000\000\000\003\021\000\161\003\021\007]\000\161\000\246\000\161\007]\000\230\000\000\bI\020\006\000\161\012\185\bI\003\021\003\021\000\000\000\161\000\161\000\161\000\161\005\186\000\000\000\161\000\161\000\161\000\161\002a\000\000\012\210\002a\000\000\002a\001\n\001\014\002a\000\000\005\190\001*\002a\029\179\002a\000\000\001.\002a\003\021\002a\002a\002a\000\246\002a\002a\002a\0012\tj\000\000\bI\t>\0016\002a\002a\002a\002a\002a\tr\002a\000\000\005\170\tz\000\000\001:\000\000\002a\002a\002a\002a\002a\000\000\bI\001n\000\000\011\154\002a\007]\002a\000\000\002a\002a\001\130\000\000\000\000\011\130\002a\002a\002a\011\134\011\138\011\150\000\000\000\000\b\210\002a\002a\002a\002a\002a\002a\002a\002a\002a\000\000\012\158\012\246\005\182\002a\002a\002a\001*\000\000\000\000\004R\t\005\002a\b\222\002a\005\170\002a\002a\002a\000\000\002a\002a\002a\002a\011\158\012\166\011\162\000\000\012\254\002a\000\000\002a\002a\000\000\002a\002a\002a\002a\002a\002a\b\226\011\178\002a\002a\002a\012*\003z\n\170\005\186\002a\002a\002a\002a\002y\012\233\000\246\002y\000\000\002y\000\000\000\000\002y\012\245\000\000\005\190\002y\006R\002y\0112\000\000\002y\000\000\002y\002y\002y\012\233\002y\002y\002y\002\150\000\000\000\000\002\154\012\245\000\000\002y\002y\002y\002y\002y\002\186\002y\000\000\011\002\005\170\000\000\002\166\000\000\002y\002y\002y\002y\002y\000\000\002\190\t\005\006^\000\000\002y\000\000\002y\000\000\002y\002y\000\246\t9\000\000\000\000\002y\002y\002y\000\000\000\000\005\178\000\000\000\000\002\178\002y\002y\002y\002y\002y\002y\002y\002y\002y\000\000\012\158\012\246\005\182\002y\002y\002y\001*\006\138\007q\000\000\000\000\002y\007q\002y\bE\002y\002y\002y\bE\002y\002y\002y\002y\004\173\012\166\006N\000\000\012\254\002y\000\000\002y\002y\005q\002y\002y\002y\002y\002y\002y\002\182\000\000\002y\002y\002y\000\000\005q\000\000\005\186\002y\002y\002y\002y\002u\000\000\005\253\002u\000\000\002u\007\146\001\014\002u\bE\000\000\005\190\002u\006f\002u\007\150\000\000\002u\000\000\002u\002u\002u\004\173\002u\002u\002u\0012\005q\000\000\000\000\000\000\bE\002u\002u\002u\002u\002u\b\194\002u\000\000\000\000\005\170\000\000\000\000\000\000\002u\002u\002u\002u\002u\000\000\005\253\b\002\006r\000\000\002u\000\000\002u\005q\002u\002u\001\130\005q\000\000\000\000\002u\002u\002u\000\000\022\138\005\178\005\253\000\000\004R\002u\002u\002u\002u\002u\002u\002u\002u\002u\000\000\012\158\012\246\bU\002u\002u\002u\bU\nn\000\000\000\000\003\018\002u\b\233\002u\007Y\002u\002u\002u\007Y\002u\002u\002u\002u\000\000\012\166\006\214\000\000\012\254\002u\000\000\002u\002u\002J\002u\002u\002u\002u\002u\002u\000\000\007a\002u\002u\002u\007a\005\018\016\166\bU\002u\002u\002u\002u\002e\000\000\000\000\002e\b\233\002e\000\000\000\000\002e\012\193\012\193\bU\002e\012\193\002e\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\b\233\003\006\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\002e\000\000\000\000\bU\000\000\007Y\000\000\002e\002e\002e\002e\002e\000\000\b\006\007\146\001\014\000\000\002e\000\246\002e\003\182\002e\002e\007\150\005M\b\182\b\233\002e\002e\002e\004R\011\146\bU\b\233\0012\000\000\002e\002e\002e\002e\002e\002e\002e\002e\002e\000\000\012\158\012\246\016\158\002e\002e\002e\012\193\000\000\000\000\000\000\000\000\002e\000\000\002e\b\002\002e\002e\002e\000\000\002e\002e\002e\002e\001\130\012\166\000\000\000\000\012\254\002e\000\246\002e\002e\016\182\002e\002e\002e\002e\002e\002e\000\000\016\186\002e\002e\002e\012\018\000\000\n\170\000\000\002e\002e\002e\002e\002q\nn\000\000\002q\000\000\002q\000\000\001R\002q\012\189\012\189\017\170\002q\012\189\002q\011:\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\000\000\tj\000\000\000\000\t>\000\000\002q\002q\002q\002q\002q\tr\002q\000\000\011\002\tz\000\000\000\000\000\000\002q\002q\002q\002q\002q\000\000\000\000\012F\000\000\001~\002q\000\246\002q\000\000\002q\002q\000\246\n\170\n\170\016\138\002q\002q\002q\016\250\0172\017>\000\000\000\000\000\000\002q\002q\002q\002q\002q\002q\002q\002q\002q\011f\012n\002q\000\000\002q\002q\002q\012\189\000\000\000\000\000\000\000\000\002q\000\000\002q\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\000\011\002\011\002\000\000\000\000\002q\007\249\002q\002q\000\000\r\018\002q\002q\002q\002q\002q\000\000\000\000\002q\002q\002q\000\000\000\246\000\246\000\000\002q\002q\002q\002q\tm\000\000\000\000\tm\000\000\tm\000\000\001R\tm\007\129\000\000\007\249\tm\007\129\tm\000\000\000\000\rN\000\000\tm\rr\tm\000\000\tm\tm\tm\000\000\007\249\000\000\000\000\007\249\012\130\r\134\r\158\r\166\r\142\r\174\007\249\tm\000\000\000\000\007\249\000\000\000\000\000\000\tm\tm\r\182\r\190\tm\000\000\000\000\012F\000\000\017z\tm\000\000\tm\000\000\r\198\tm\000\000\n\170\000\000\016\138\tm\tm\000\246\016\250\0172\017>\000\000\000\000\000\000\tm\tm\rV\r\150\r\206\r\214\r\230\tm\tm\019\246\000\000\tm\b\229\tm\tm\r\238\007\129\000\000\000\000\000\000\000\000\tm\000\000\tm\000\000\tm\tm\r\246\000\000\tm\tm\tm\tm\012\194\011\002\000\000\012\202\000\000\tm\n\181\tm\tm\000\000\014\022\tm\014\030\r\222\tm\tm\000\000\000\000\tm\r\254\tm\000\000\000\246\b\229\000\000\tm\tm\014\006\014\014\002\165\000\000\000\000\002\165\000\000\002\165\000\000\001R\002\165\000\000\000\000\n\181\002\165\000\000\002\165\000\000\b\229\002\165\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\000\000\n\181\000\000\000\000\n\181\014\146\002\165\002\165\002\165\002\165\002\165\n\181\002\165\000\000\000\000\n\181\000\000\000\000\000\000\002\165\002\165\002\165\002\165\002\165\000\000\001.\t\022\000\000\b\229\002\165\000\000\002\165\004R\002\165\002\165\b\229\000\000\n\170\b\154\002\165\002\165\002\165\t\130\007\178\b\162\000\000\000\000\000\000\002\165\002\165\rV\002\165\002\165\002\165\002\165\002\165\002\165\007\190\020\014\002\165\000\000\002\165\002\165\002\165\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\002\165\000\000\b\210\011\002\000\000\000\000\002\165\000\246\002\165\002\165\000\000\002\165\002\165\002\165\002\165\002\165\002\165\000\000\000\000\002\165\002\165\002\165\016\202\000\000\000\246\b\222\002\165\002\165\002\165\002\165\002\141\000\000\000\000\002\141\000\000\002\141\000\000\000\000\002\141\000\000\000\000\016\210\002\141\000\000\002\141\000\000\000\000\002\141\000\000\002\141\002\141\002\141\b\226\002\141\002\141\002\141\000\000\tj\000\000\000\000\t>\000\000\002\141\002\141\002\141\002\141\002\141\tr\002\141\000\000\000\000\tz\000\000\000\000\000\000\002\141\002\141\002\141\002\141\002\141\000\000\000\000\000\000\000\000\000\000\002\141\000\000\002\141\000\000\002\141\002\141\000\000\n\170\n\170\000\000\002\141\002\141\002\141\000\000\000\000\n\170\000\000\000\000\000\000\002\141\002\141\rV\002\141\002\141\002\141\002\141\002\141\002\141\020\026\028J\002\141\005\182\002\141\002\141\002\141\001*\028~\000\000\000\000\000\000\002\141\000\000\002\141\000\000\002\141\002\141\002\141\004\149\002\141\002\141\002\141\002\141\000\000\011\002\011\002\000\000\000\000\002\141\000\000\002\141\002\141\011\002\002\141\002\141\002\141\002\141\002\141\002\141\004\149\000\000\002\141\002\141\002\141\000\000\000\246\000\246\005\186\002\141\002\141\002\141\002\141\002\153\000\246\000\000\002\153\000\000\002\153\004\149\000\000\002\153\000\000\000\000\005\190\002\153\004\149\002\153\000\000\004\149\rN\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\000\000\000\000\000\000\000\246\000\000\000\000\002\153\002\153\002\153\r\142\002\153\004\149\002\153\000\000\000\000\005\170\000\000\000\000\000\000\002\153\002\153\002\153\002\153\002\153\000\246\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\002\153\002\153\002\153\000\000\000\000\006\222\000\000\000\000\000\000\002\153\002\153\rV\r\150\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\000\000\002\153\002\153\002\153\020:\000\000\000\000\000\000\000\000\002\153\000\000\002\153\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\002\153\000\000\000\000\000\000\000\000\020\174\002\153\000\246\002\153\002\153\000\000\002\153\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\002\153\002\153\000\000\003\021\003\021\021v\002\153\002\153\002\153\002\153\002\169\000\000\000\000\002\169\000\000\002\169\000\000\000\000\002\169\003\021\000\000\012&\002\169\000\000\002\169\000\000\000\000\002\169\000\000\002\169\002\169\002\169\000\n\002\169\002\169\002\169\000\000\tj\000\000\000\000\t>\000\000\002\169\002\169\002\169\002\169\002\169\tr\002\169\000\000\000\000\tz\000\000\000\000\000\000\002\169\002\169\002\169\002\169\002\169\000\000\000\000\000\000\000\000\003\021\002\169\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\002\169\002\169\002\169\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\rrrN\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\000\000\007\245\000\000\000\000\t>\000\000\002\149\002\149\002\149\r\142\002\149\007\245\002\149\000\000\000\000\007\245\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\rV\r\150\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\002\149\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\b\t\002\149\002\149\000\000\002\149\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\145\000\000\000\000\002\145\000\000\002\145\000\000\000\000\002\145\000\000\000\000\b\t\002\145\000\000\002\145\000\000\000\000\rN\000\000\002\145\002\145\002\145\000\000\002\145\002\145\002\145\000\000\b\t\000\000\000\000\t>\000\000\002\145\002\145\002\145\r\142\002\145\b\t\002\145\000\000\000\000\b\t\000\000\000\000\000\000\002\145\002\145\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\rV\rb\029\002\185\000\000\002\185\000\000\000\000\rN\000\000\002\185\002\185\002\185\000\000\002\185\002\185\002\185\000\000\tj\000\000\000\000\t>\000\000\r\134\r\158\r\166\r\142\r\174\b\029\002\185\000\000\000\000\b\029\000\000\000\000\000\000\002\185\002\185\r\182\r\190\002\185\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\r\198\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\rV\r\150\r\206\r\214\r\230\002\185\002\185\000\000\000\000\002\185\000\000\002\185\002\185\r\238\000\000\000\000\000\000\000\000\000\000\002\185\000\000\002\185\000\000\002\185\002\185\r\246\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\000\000\000\000\002\185\b\025\002\185\002\185\000\000\002\185\002\185\002\185\r\222\002\185\002\185\000\000\000\000\002\185\r\254\002\185\000\000\000\000\000\000\000\000\002\185\002\185\014\006\014\014\002\161\000\000\000\000\002\161\000\000\002\161\000\000\000\000\002\161\000\000\000\000\b\025\002\161\000\000\002\161\000\000\000\000\rN\000\000\002\161\002\161\002\161\000\000\002\161\002\161\002\161\000\000\014\218\000\000\000\000\b\025\000\000\002\161\002\161\002\161\r\142\002\161\b\025\002\161\000\000\000\000\b\025\000\000\000\000\000\000\002\161\002\161\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\rV\rrN\000\000\002\157\002\157\002\157\000\000\002\157\002\157\002\157\000\000\007\241\000\000\000\000\t>\000\000\002\157\002\157\002\157\r\142\002\157\007\241\002\157\000\000\000\000\007\241\000\000\000\000\000\000\002\157\002\157\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\rV\rrN\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\000\000\014\174\000\000\000\000\014\182\000\000\r\134\r\158\r\166\r\142\002\177\014\190\002\177\000\000\000\000\014\198\000\000\000\000\000\000\002\177\002\177\r\182\r\190\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\002\177\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\rV\r\150\r\206\r\214\002\177\002\177\002\177\000\000\000\000\002\177\000\000\002\177\002\177\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\002\177\002\177\000\000\002\177\002\177\002\177\r\222\002\177\002\177\000\000\000\000\002\177\002\177\002\177\000\000\000\000\000\000\000\000\002\177\002\177\002\177\002\177\002\133\000\000\000\000\002\133\000\000\002\133\003\021\002~\002\133\000\000\023\026\001*\002\133\000\000\002\133\000\000\000\000\rN\000\000\002\133\002\133\002\133\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\r\142\002\133\000\n\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\000\000\029\006\000\000\002V\002\133\003\021\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\002\133\005\190\003\021\003\021\000\000\000\000\000\000\002\133\002\133\rV\rrN\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\129\000\000\002\129\000\000\000\000\005\170\000\000\000\000\000\000\002\129\002\129\r\182\r\190\002\129\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\002\129\000\246\000\000\000\000\006\014\000\000\000\000\000\000\002\129\002\129\rV\r\150\r\206\r\214\002\129\002\129\002\129\000\000\000\000\002\129\001\014\002\129\002\129\002\129\001*\000\000\000\000\000\000\000\000\002\129\000\000\002\129\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\r\222\002\129\002\129\000\000\000\000\002\129\002\129\002\129\000\000\000\000\000\000\006\234\002\129\002\129\002\129\002\129\002\221\000\000\000\000\002\221\000\000\002\221\000\000\000\000\002\221\000\000\000\000\005\190\002\221\000\000\002\221\000\000\000\000\rN\000\000\002\221\002\221\002\221\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\221\000\000\002\221\000\000\000\000\005\170\000\000\000\000\000\000\002\221\002\221\r\182\r\190\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\002\221\002\221\000\000\000\000\000\000\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\rV\r\150\r\206\002\221\002\221\002\221\002\221\000\000\000\000\002\221\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\000\000\002\221\002\221\002\221\000\000\002\221\002\221\002\221\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\002\221\002\221\000\000\002\221\002\221\002\221\r\222\002\221\002\221\000\000\000\000\002\221\002\221\002\221\000\000\000\000\000\000\000\000\002\221\002\221\002\221\002\221\002}\000\000\000\000\002}\000\000\002}\000\000\000\000\002}\000\000\000\000\000\000\002}\000\000\002}\000\000\000\000\rN\000\000\002}\002}\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\r\182\r\190\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\rV\r\150\r\206\r\214\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\r\222\002}\002}\000\000\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002\181\000\000\000\000\002\181\000\000\002\181\000\000\000\000\002\181\000\000\000\000\000\000\002\181\000\000\002\181\000\000\000\000\rN\000\000\002\181\002\181\002\181\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\181\000\000\002\181\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\r\182\r\190\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\002\181\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\rV\r\150\r\206\r\214\002\181\002\181\002\181\000\000\000\000\002\181\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\000\000\002\181\002\181\002\181\000\000\002\181\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\002\181\002\181\000\000\002\181\002\181\002\181\r\222\002\181\002\181\000\000\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\002\181\002\181\002\181\002\181\002\173\000\000\000\000\002\173\000\000\002\173\000\000\000\000\002\173\000\000\000\000\000\000\002\173\000\000\002\173\000\000\000\000\rN\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\173\000\000\002\173\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\r\182\r\190\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\002\173\002\173\000\000\000\000\000\000\000\000\002\173\002\173\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\rV\r\150\r\206\r\214\002\173\002\173\002\173\000\000\000\000\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\002\173\002\173\002\173\r\222\002\173\002\173\000\000\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\002\173\002\173\002\173\002\173\002\189\000\000\000\000\002\189\000\000\002\189\000\000\000\000\002\189\000\000\000\000\000\000\002\189\000\000\002\189\000\000\000\000\rN\000\000\002\189\002\189\002\189\000\000\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\189\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\r\182\r\190\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\r\198\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\rV\r\150\r\206\r\214\r\230\002\189\002\189\000\000\000\000\002\189\000\000\002\189\002\189\r\238\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\000\000\002\189\002\189\r\246\000\000\002\189\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\002\189\002\189\000\000\002\189\002\189\002\189\r\222\002\189\002\189\000\000\000\000\002\189\r\254\002\189\000\000\000\000\000\000\000\000\002\189\002\189\014\006\014\014\002\193\000\000\000\000\002\193\000\000\002\193\000\000\000\000\002\193\000\000\000\000\000\000\002\193\000\000\002\193\000\000\000\000\rN\000\000\002\193\002\193\002\193\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\193\000\000\002\193\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\r\182\r\190\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\r\198\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\rV\r\150\r\206\r\214\r\230\002\193\002\193\000\000\000\000\002\193\000\000\002\193\002\193\r\238\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\000\000\002\193\002\193\r\246\000\000\002\193\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\002\193\000\000\002\193\002\193\000\000\002\193\002\193\002\193\r\222\002\193\002\193\000\000\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\002\193\002\193\014\006\014\014\002\197\000\000\000\000\002\197\000\000\002\197\000\000\000\000\002\197\000\000\000\000\000\000\002\197\000\000\002\197\000\000\000\000\rN\000\000\002\197\002\197\002\197\000\000\002\197\002\197\002\197\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\002\197\000\000\002\197\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\r\182\r\190\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\r\198\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\rV\r\150\r\206\r\214\r\230\002\197\002\197\000\000\000\000\002\197\000\000\002\197\002\197\r\238\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\000\000\002\197\002\197\r\246\000\000\002\197\002\197\002\197\002\197\000\000\000\000\000\000\000\000\000\000\002\197\000\000\002\197\002\197\000\000\002\197\002\197\002\197\r\222\002\197\002\197\000\000\000\000\002\197\002\197\002\197\000\000\000\000\000\000\000\000\002\197\002\197\014\006\014\014\t)\000\000\000\000\t)\000\000\t)\000\000\000\000\t)\000\000\000\000\000\000\t)\000\000\t)\000\000\000\000\rN\000\000\t)\t)\t)\000\000\t)\t)\t)\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\t)\000\000\000\000\000\000\000\000\000\000\000\000\t)\t)\r\182\r\190\t)\000\000\000\000\000\000\000\000\000\000\t)\000\000\t)\000\000\r\198\t)\000\000\000\000\000\000\000\000\t)\t)\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t)\t)\rV\r\150\r\206\r\214\r\230\t)\t)\000\000\000\000\t)\000\000\t)\t)\r\238\000\000\000\000\000\000\000\000\000\000\t)\000\000\t)\000\000\t)\t)\r\246\000\000\t)\t)\t)\t)\000\000\000\000\000\000\000\000\000\000\t)\000\000\t)\t)\000\000\t)\t)\t)\r\222\t)\t)\000\000\000\000\t)\r\254\t)\000\000\000\000\000\000\000\000\t)\t)\014\006\014\014\002\201\000\000\000\000\002\201\000\000\002\201\000\000\000\000\002\201\000\000\000\000\000\000\002\201\000\000\002\201\000\000\000\000\rN\000\000\002\201\002\201\002\201\000\000\002\201\002\201\002\201\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\201\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\r\182\r\190\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\r\198\002\201\000\000\000\000\000\000\000\000\002\201\002\201\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\rV\r\150\r\206\r\214\r\230\002\201\002\201\000\000\000\000\002\201\000\000\002\201\002\201\r\238\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\000\000\002\201\002\201\r\246\000\000\002\201\002\201\002\201\002\201\000\000\000\000\000\000\000\000\000\000\002\201\000\000\002\201\002\201\000\000\014\022\002\201\014\030\r\222\002\201\002\201\000\000\000\000\002\201\r\254\002\201\000\000\000\000\000\000\000\000\002\201\002\201\014\006\014\014\t%\000\000\000\000\t%\000\000\t%\000\000\000\000\t%\000\000\000\000\000\000\t%\000\000\t%\000\000\000\000\rN\000\000\t%\t%\t%\000\000\t%\t%\t%\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\t%\000\000\000\000\000\000\000\000\000\000\000\000\t%\t%\r\182\r\190\t%\000\000\000\000\000\000\000\000\000\000\t%\000\000\t%\000\000\r\198\t%\000\000\000\000\000\000\000\000\t%\t%\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t%\t%\rV\r\150\r\206\r\214\r\230\t%\t%\000\000\000\000\t%\000\000\t%\t%\r\238\000\000\000\000\000\000\000\000\000\000\t%\000\000\t%\000\000\t%\t%\r\246\000\000\t%\t%\t%\t%\000\000\000\000\000\000\000\000\000\000\t%\000\000\t%\t%\000\000\t%\t%\t%\r\222\t%\t%\000\000\000\000\t%\r\254\t%\000\000\000\000\000\000\000\000\t%\t%\014\006\014\014\002\249\000\000\000\000\002\249\000\000\002\249\000\000\000\000\002\249\000\000\000\000\000\000\002\249\000\000\002\249\000\000\000\000\rN\000\000\002\249\002\249\002\249\000\000\002\249\002\249\002\249\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\r\182\r\190\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\000\000\r\198\002\249\000\000\000\000\000\000\000\000\002\249\002\249\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\rV\r\150\r\206\r\214\r\230\002\249\002\249\000\000\000\000\002\249\000\000\002\249\002\249\r\238\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\000\000\002\249\002\249\r\246\000\000\002\249\002\249\002\249\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\249\002\249\000\000\014\022\002\249\014\030\r\222\002\249\002\249\000\000\000\000\002\249\r\254\002\249\000\000\000\000\000\000\000\000\002\249\002\249\014\006\014\014\002\245\000\000\000\000\002\245\000\000\002\245\000\000\000\000\002\245\000\000\000\000\000\000\002\245\000\000\002\245\000\000\000\000\rN\000\000\002\245\002\245\002\245\000\000\002\245\002\245\002\245\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\r\182\r\190\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\000\000\r\198\002\245\000\000\000\000\000\000\000\000\002\245\002\245\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\rV\r\150\r\206\r\214\r\230\002\245\002\245\000\000\000\000\002\245\000\000\002\245\002\245\r\238\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\000\000\002\245\002\245\r\246\000\000\002\245\002\245\002\245\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\002\245\002\245\000\000\014\022\002\245\014\030\r\222\002\245\002\245\000\000\000\000\002\245\r\254\002\245\000\000\000\000\000\000\000\000\002\245\002\245\014\006\014\014\002\253\000\000\000\000\002\253\000\000\002\253\000\000\000\000\002\253\000\000\000\000\000\000\002\253\000\000\002\253\000\000\000\000\rN\000\000\002\253\002\253\002\253\000\000\002\253\002\253\002\253\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\253\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\r\182\r\190\002\253\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\000\000\r\198\002\253\000\000\000\000\000\000\000\000\002\253\002\253\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\rV\r\150\r\206\r\214\r\230\002\253\002\253\000\000\000\000\002\253\000\000\002\253\002\253\r\238\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\000\000\002\253\002\253\r\246\000\000\002\253\002\253\002\253\002\253\000\000\000\000\000\000\000\000\000\000\002\253\000\000\002\253\002\253\000\000\014\022\002\253\014\030\r\222\002\253\002\253\000\000\000\000\002\253\r\254\002\253\000\000\000\000\000\000\000\000\002\253\002\253\014\006\014\014\002\233\000\000\000\000\002\233\000\000\002\233\000\000\000\000\002\233\000\000\000\000\000\000\002\233\000\000\002\233\000\000\000\000\rN\000\000\002\233\002\233\002\233\000\000\002\233\002\233\002\233\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\233\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\r\182\r\190\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\r\198\002\233\000\000\000\000\000\000\000\000\002\233\002\233\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\rV\r\150\r\206\r\214\r\230\002\233\002\233\000\000\000\000\002\233\000\000\002\233\002\233\r\238\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\000\000\002\233\002\233\r\246\000\000\002\233\002\233\002\233\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\002\233\002\233\000\000\014\022\002\233\014\030\r\222\002\233\002\233\000\000\000\000\002\233\r\254\002\233\000\000\000\000\000\000\000\000\002\233\002\233\014\006\014\014\002\237\000\000\000\000\002\237\000\000\002\237\000\000\000\000\002\237\000\000\000\000\000\000\002\237\000\000\002\237\000\000\000\000\rN\000\000\002\237\002\237\002\237\000\000\002\237\002\237\002\237\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\237\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\r\182\r\190\002\237\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\000\000\r\198\002\237\000\000\000\000\000\000\000\000\002\237\002\237\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\rV\r\150\r\206\r\214\r\230\002\237\002\237\000\000\000\000\002\237\000\000\002\237\002\237\r\238\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\000\000\002\237\002\237\r\246\000\000\002\237\002\237\002\237\002\237\000\000\000\000\000\000\000\000\000\000\002\237\000\000\002\237\002\237\000\000\014\022\002\237\014\030\r\222\002\237\002\237\000\000\000\000\002\237\r\254\002\237\000\000\000\000\000\000\000\000\002\237\002\237\014\006\014\014\002\241\000\000\000\000\002\241\000\000\002\241\000\000\000\000\002\241\000\000\000\000\000\000\002\241\000\000\002\241\000\000\000\000\rN\000\000\002\241\002\241\002\241\000\000\002\241\002\241\002\241\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\241\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\r\182\r\190\002\241\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\000\000\r\198\002\241\000\000\000\000\000\000\000\000\002\241\002\241\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\rV\r\150\r\206\r\214\r\230\002\241\002\241\000\000\000\000\002\241\000\000\002\241\002\241\r\238\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\000\000\002\241\002\241\r\246\000\000\002\241\002\241\002\241\002\241\000\000\000\000\000\000\000\000\000\000\002\241\000\000\002\241\002\241\000\000\014\022\002\241\014\030\r\222\002\241\002\241\000\000\000\000\002\241\r\254\002\241\000\000\000\000\000\000\000\000\002\241\002\241\014\006\014\014\003\005\000\000\000\000\003\005\000\000\003\005\000\000\000\000\003\005\000\000\000\000\000\000\003\005\000\000\003\005\000\000\000\000\rN\000\000\003\005\003\005\003\005\000\000\003\005\003\005\003\005\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\005\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\r\182\r\190\003\005\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\000\000\r\198\003\005\000\000\000\000\000\000\000\000\003\005\003\005\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\rV\r\150\r\206\r\214\r\230\003\005\003\005\000\000\000\000\003\005\000\000\003\005\003\005\r\238\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\000\000\003\005\003\005\r\246\000\000\003\005\003\005\003\005\003\005\000\000\000\000\000\000\000\000\000\000\003\005\000\000\003\005\003\005\000\000\014\022\003\005\014\030\r\222\003\005\003\005\000\000\000\000\003\005\r\254\003\005\000\000\000\000\000\000\000\000\003\005\003\005\014\006\014\014\003\001\000\000\000\000\003\001\000\000\003\001\000\000\000\000\003\001\000\000\000\000\000\000\003\001\000\000\003\001\000\000\000\000\rN\000\000\003\001\003\001\003\001\000\000\003\001\003\001\003\001\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\001\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\r\182\r\190\003\001\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\000\000\r\198\003\001\000\000\000\000\000\000\000\000\003\001\003\001\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\rV\r\150\r\206\r\214\r\230\003\001\003\001\000\000\000\000\003\001\000\000\003\001\003\001\r\238\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\000\000\003\001\003\001\r\246\000\000\003\001\003\001\003\001\003\001\000\000\000\000\000\000\000\000\000\000\003\001\000\000\003\001\003\001\000\000\014\022\003\001\014\030\r\222\003\001\003\001\000\000\000\000\003\001\r\254\003\001\000\000\000\000\000\000\000\000\003\001\003\001\014\006\014\014\003\t\000\000\000\000\003\t\000\000\003\t\000\000\000\000\003\t\000\000\000\000\000\000\003\t\000\000\003\t\000\000\000\000\rN\000\000\003\t\003\t\003\t\000\000\003\t\003\t\003\t\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\r\182\r\190\003\t\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\000\000\r\198\003\t\000\000\000\000\000\000\000\000\003\t\003\t\000\246\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\rV\r\150\r\206\r\214\r\230\003\t\003\t\000\000\000\000\003\t\000\000\003\t\003\t\r\238\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\000\000\003\t\003\t\r\246\000\000\003\t\003\t\003\t\003\t\000\000\000\000\000\000\000\000\000\000\003\t\000\000\003\t\003\t\000\000\014\022\003\t\014\030\r\222\003\t\003\t\000\000\000\000\003\t\r\254\003\t\000\000\000\000\000\000\000\000\003\t\003\t\014\006\014\014\002\229\000\000\000\000\002\229\000\000\002\229\000\000\000\000\002\229\000\000\000\000\000\000\002\229\000\000\002\229\000\000\000\000\rN\000\000\002\229\002\229\002\229\000\000\002\229\002\229\002\229\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\229\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\r\182\r\190\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\r\198\002\229\000\000\000\000\000\000\000\000\002\229\002\229\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\rV\r\150\r\206\r\214\r\230\002\229\002\229\000\000\000\000\002\229\000\000\002\229\002\229\r\238\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\000\000\002\229\002\229\r\246\000\000\002\229\002\229\002\229\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\002\229\002\229\000\000\014\022\002\229\014\030\r\222\002\229\002\229\000\000\000\000\002\229\rrN\000\000\002U\002U\002U\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\r\182\r\190\002U\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\r\198\002U\000\000\000\000\000\000\000\000\002U\002U\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\rV\r\150\r\206\r\214\r\230\002U\002U\000\000\000\000\002U\000\000\002U\002U\r\238\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\000\000\002U\002U\r\246\000\000\002U\002U\018F\002U\000\000\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\000\000\014\022\002U\014\030\r\222\002U\002U\000\000\000\000\002U\r\254\002U\000\000\000\000\000\000\000\000\002U\002U\014\006\014\014\002Q\000\000\000\000\002Q\000\000\002Q\000\000\000\000\002Q\000\000\000\000\000\000\002Q\000\000\002Q\000\000\000\000\rN\000\000\002Q\002Q\002Q\000\000\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002Q\000\000\000\000\000\000\000\000\000\000\000\000\002Q\002Q\r\182\r\190\002Q\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\000\000\r\198\002Q\000\000\000\000\000\000\000\000\002Q\002Q\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002Q\002Q\rV\r\150\r\206\r\214\r\230\002Q\002Q\000\000\000\000\002Q\000\000\002Q\002Q\r\238\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\000\000\002Q\002Q\r\246\000\000\002Q\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\002Q\000\000\002Q\002Q\000\000\014\022\002Q\014\030\r\222\002Q\002Q\000\000\000\000\002Q\r\254\002Q\000\000\000\000\000\000\000\000\002Q\002Q\014\006\014\014\002\225\000\000\000\000\002\225\000\000\002\225\000\000\000\000\002\225\000\000\000\000\000\000\002\225\000\000\002\225\000\000\000\000\rN\000\000\002\225\002\225\002\225\000\000\002\225\002\225\002\225\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\002\225\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\r\182\r\190\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\r\198\002\225\000\000\000\000\000\000\000\000\002\225\002\225\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\rV\r\150\r\206\r\214\r\230\002\225\002\225\000\000\000\000\002\225\000\000\002\225\002\225\r\238\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\000\000\002\225\002\225\r\246\000\000\002\225\002\225\002\225\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\002\225\002\225\000\000\014\022\002\225\014\030\r\222\002\225\002\225\000\000\000\000\002\225\rt\000\000\000\000\002\t\000\000\002\t\000\000\000\000\002\t\000\000\000\000\000\000\002\t\000\000\002\t\000\000\000\000\002\t\000\000\002\t\002\t\002\t\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\000\000\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\000\000\002\t\002\t\000\000\000\000\000\000\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\000\000\000\000\002\t\000\000\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\000\000\002\t\002\t\002\t\000\000\002\t\002\t\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\002\t\000\000\002\t\002\t\002\t\002\t\002\t\002\t\000\000\000\000\002\t\002\t\018.\000\000\000\000\000\000\000\000\002\t\002\t\002\t\002\t\002M\000\000\000\000\002M\000\000\002M\000\000\000\000\002M\000\000\000\000\000\000\002M\000\000\002M\000\000\000\000\002M\000\000\002M\002M\002M\000\000\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\000\000\002M\002M\002M\002M\002M\000\000\002M\000\000\000\000\000\000\000\000\000\000\000\000\002M\002M\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\002M\000\000\002M\000\000\002M\002M\000\000\000\000\000\000\000\000\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\000\000\002M\002M\002M\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\000\000\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\002M\000\000\002M\000\000\002M\002M\002M\000\000\002M\002M\002M\002M\000\000\000\000\000\000\000\000\000\000\002M\000\000\002M\002M\000\000\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\002M\018.\000\000\000\000\000\000\000\000\002M\002M\002M\002M\028\162\000\000\000\000\002\r\000\000\002\r\000\000\000\000\002\r\000\000\000\000\000\000\002\r\000\000\002\r\000\000\000\000\002\r\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\002\r\000\000\002\r\002\r\000\000\000\000\000\000\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\028\178\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\000\000\002\r\002\r\000\000\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\rn\001\014\000\000\001\018\001\030\001*\012\166\000\000\000\000\012\254\001.\001r\000\000\000\000\000\000\001v\000\000\000\000\000\000\007Q\0012\000\000\000\000\000\000\000\000\001z\001\158\012N\012R\001\170\001\174\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\028b\000\000\012r\012v\007Q\b\022\b\"\001n\b.\b2\b:\012z\nZ\000\000\001\190\007Q\001\130\000\000\000\000\011\130\007Q\007Q\000\246\011\134\011\138\011\150\011\166\000\000\b\210\007Q\007Q\001\194\001\198\001\202\001\206\001\210\000\000\000\000\011\190\001\214\000\000\000\000\000\000\000\000\001\218\000\000\000\000\011\202\011\226\012\002\012\022\b\222\000\000\005\170\000\000\000\000\001\222\000\000\000\000\007Q\000\000\000\000\011\158\001\226\011\162\000\000\000\000\000\000\000\000\000\000\007Q\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\011\178\000\000\002\"\000\000\016~\003z\012\142\026\170\002*\000\000\002.\0022\000\006\000\254\000\000\000\000\r)\001\n\001\014\000\000\001\018\001\030\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\000\000\000\000\012J\000\000\000\000\000\000\r)\0012\000\000\000\000\000\000\000\000\001z\001\158\012N\012R\001\170\001\174\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\012V\000\000\012r\012v\r)\b\022\b\"\001n\b.\b2\b:\012z\nZ\000\000\001\190\r)\001\130\000\000\000\000\011\130\r)\r)\000\246\011\134\011\138\011\150\011\166\000\000\b\210\r)\r)\001\194\001\198\001\202\001\206\001\210\000\000\000\000\011\190\001\214\012\233\012\213\000\000\000\000\001\218\000\000\000\000\011\202\011\226\012\002\012\022\b\222\000\000\005\170\000\000\000\000\001\222\000\000\000\000\r)\000\000\012\233\011\158\001\226\011\162\002\150\000\000\000\000\002\154\000\000\r)\000\000\000\000\000\000\002\030\007\002\000\000\000\000\b\226\011\178\000\000\002\"\002\166\016~\003z\012\142\002\174\002*\012\213\002.\0022\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\007r\000\000\000\000\002\178\004\193\000\000\007v\0012\000\000\000\000\021b\001\014\0016\000\000\007z\007~\000\000\000\000\000\000\007\130\000\000\007\158\000\000\000\000\001:\000\000\021r\000\000\b\014\b\018\0012\b\022\b\"\001n\b.\b2\b:\b\150\nZ\r\029\000\000\021Z\001\130\000\000\025\194\011\130\021\214\000\000\000\000\011\134\011\138\011\150\011\166\002\182\b\210\000\000\025\234\000\000\001F\005\161\000\000\025\238\021\222\005\161\011\190\001\130\000\000\000\000\000\000\000\000\000\000\000\000\026\030\011\202\011\226\012\002\012\022\b\222\000\000\005\170\021\242\022\030\000\000\000\000\004\193\004\193\000\000\000\000\011\158\000\000\011\162\007u\tf\000\000\000\000\007u\000\000\026.\000\000\000\000\000\000\000\000\022J\025\162\b\226\011\178\018\158\000\000\000\000\012*\003z\012\142\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\r\029\r\029\000\000\000\000\001.\000\000\000\000\004\225\000\000\tA\000\000\tA\tA\007v\0012\000\246\000\000\005\161\000\000\0016\000\000\007z\007~\000\000\r\029\000\000\007\130\r\029\007\158\000\000\000\000\001:\000\000\021r\005\161\b\014\b\018\005\161\b\022\b\"\001n\b.\b2\b:\b\150\nZ\r\029\000\000\021Z\001\130\000\000\000\000\011\130\021\214\000\000\000\000\011\134\011\138\011\150\011\166\000\000\b\210\000\000\000\000\000\000\tj\005\165\000\000\t>\021\222\005\165\011\190\000\000\029\214\000\000\tr\000\000\000\000\021j\tz\011\202\011\226\012\002\012\022\b\222\000\000\005\170\021\242\022\030\000\000\000\000\029\247\018N\000\000\000\000\011\158\004Q\011\162\b5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nB\025\162\b\226\011\178\tA\000\000\000\000\012*\003z\012\142\000\006\000\254\000\000\000\000\001\138\001\n\001\014\006\146\001\018\001\030\001*\r\029\r\029\000\000\000\000\001.\000\000\000\000\030&\000\000\000\000\000\000\005f\000\246\007v\0012\000\000\000\000\005\165\000\000\0016\000\000\007z\007~\000\000\r\029\000\246\007\130\r\029\007\158\000\000\000\000\001:\000\000\021r\005\165\b\014\b\018\005\165\b\022\b\"\001n\b.\b2\b:\b\150\nZ\004Q\000\000\021Z\001\130\000\000\000\000\011\130\021\214\001\r\000\000\011\134\011\138\011\150\011\166\000\000\b\210\tj\000\000\000\000\t>\t\230\000\000\000\000\021\222\000\000\011\190\tr\029\214\001\r\tj\tz\000\000\t>\nF\011\202\011\226\012\002\012\022\b\222\tr\005\170\021\242\022\030\tz\000\000\004\233\000\000\000\000\000\000\011\158\000\000\011\162\001\r\000\000\000\000\007\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\r\025\162\b\226\011\178\016\142\001\r\000\000\012*\003z\012\142\000\173\001\n\001\014\000\173\001\r\001\r\001*\000\000\012\182\000\000\000\000\001.\000\000\000\000\000\173\000\000\000\173\000\000\000\173\000\000\000\173\0012\000\000\000\000\012\230\000\000\0016\000\000\003\021\003\021\000\000\000\000\012\238\000\173\001\r\000\000\000\000\003\021\001:\000\000\000\173\000\000\020\"\000\000\000\173\001\r\000\000\001n\003\021\001~\000\173\000\000\000\173\002J\000\000\000\173\001\130\000\n\000\000\011\130\000\173\000\173\000\173\011\134\011\138\011\150\000\000\015J\b\210\000\173\000\173\000\000\0012\000\000\003\021\000\000\000\173\000\000\000\000\000\000\000\173\000\000\000\000\003\021\000\000\000\000\023F\000\000\000\246\003\021\000\000\b\222\000\000\005\170\000\173\000\173\000\000\000\000\000\173\000\173\003\006\000\000\011\158\023\190\011\162\n:\000\000\001\130\000\000\000\000\000\173\000\000\000\000\003\021\023\214\000\000\000\173\000\173\b\226\011\178\000\000\000\000\000\000\012*\003z\000\000\000\173\000\000\000\173\000\197\001\n\001\014\000\197\000\000\000\000\001*\000\000\012\182\tj\000\000\001.\t>\020&\000\197\000\000\000\197\000\000\000\197\tr\000\197\0012\000\246\tz\012\230\000\000\0016\000\000\003\021\003\021\000\000\000\000\012\238\000\197\000\000\000\000\000\000\003\021\001:\000\000\000\197\000\000\000\000\000\000\000\197\000\000\000\000\001n\003\021\001~\000\197\000\000\000\197\000\000\000\000\000\197\001\130\000\n\000\000\011\130\000\197\000\197\000\197\011\134\011\138\011\150\000\000\015J\b\210\000\197\000\197\000\000\tj\000\000\003\021\t>\000\197\000\000\000\000\000\000\000\197\000\000\tr\003\021\000\000\000\000\tz\000\000\000\000\003\021\000\000\b\222\000\000\005\170\000\197\000\197\000\000\000\000\000\197\000\197\t\150\000\000\011\158\tU\011\162\000\000\000\000\000\000\000\000\000\000\000\197\000\000\000\000\003\021\000\000\000\000\000\197\000\197\b\226\011\178\000\000\000\000\000\000\012*\003z\000\000\000\197\000\014\000\197\000\018\000\022\000\026\000\030\000\000\000\"\000&\000\000\000*\000.\0002\000\000\0006\000:\000\000\000\000\000>\000\000\000\246\000\000\000B\007\134\000\000\000\000\000\000\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000j\000\000\000\000\000\000\000n\000\000\000r\000\000\000v\000z\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tj\000\130\000\000\t>\000\134\000\138\000\000\000\000\tU\000\000\tr\000\142\000\146\000\150\tz\000\000\000\000\000\000\007A\007A\000\000\000\154\000\158\000\162\000\000\000\166\000\000\000\000\000\170\000\174\000\178\000\000\000\000\000\000\000\182\000\186\000\190\000\000\007A\007A\000\000\007A\000\194\000\000\000\198\000\202\000\000\000\000\000\000\007A\000\000\000\000\000\206\000\000\000\210\000\000\001\221\007\174\001\014\n\018\000\214\000\218\001*\000\222\007A\007A\007A\001.\001r\000\000\000\000\007A\001v\007A\007A\007A\001\221\0012\000\000\000\000\007A\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\210\007A\001\178\n.\001\221\000\000\000\000\007\202\017\246\001~\000\000\001\186\000\000\000\000\001\190\001\221\001\130\000\000\000\000\b\154\001\221\001\221\000\246\b\158\000\000\b\162\b\198\000\000\b\210\001\221\001\221\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\003.\001\218\007A\000\000\000\000\b\006\007\146\001\014\b\222\000\000\005\170\000\000\t\030\001\222\000\000\007\150\001\221\000\000\000\000\000\000\001\226\011R\000\000\000\000\000\000\000\000\0012\001\221\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\000\000\002*\000\000\002.\0022\007\174\001\014\011\242\000\000\b\002\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\001\130\000\000\001v\000\000\000\000\000\000\000\000\0012\002~\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\007\210\0012\001\178\n.\nn\000\000\000\000\007\202\017\246\001~\001\138\001\186\000\000\006\146\001\190\000\000\001\130\000\000\000\000\b\154\007\242\000\000\000\000\b\158\004\225\b\162\b\198\n\134\b\210\002V\007v\001\194\001\198\001\202\001\206\001\210\001\130\000\000\000\000\001\214\b\214\000\000\000\000\007\130\001\218\000\000\000\000\000\000\000\000\000\000\021r\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\b:\000\000\027F\001\226\000\000\021Z\n\138\000\000\000\000\000\000\021\214\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\021\222\002*\000\000\002.\0022\007\174\001\014\017\206\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\021\242\022\030\001v\000\000\000\000\000\000\000\000\0012\000\000\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\025\162\000\000\000\000\007\210\000\000\001\178\n.\000\000\000\000\000\000\007\202\017\246\001~\001\138\001\186\000\000\002\138\001\190\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\022N\b\162\b\198\000\000\b\210\000\000\007v\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\022R\001\218\000\000\000\000\000\000\000\000\000\000\022z\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\000\000\000\000\001\226\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\022\242\002*\000\000\002.\0022\007\174\001\014\019f\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\021\242\023\006\001v\000\000\004\181\004\181\000\000\0012\003\021\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\003\021\000\000\000\000\000\000\023\022\000\000\000\000\007\210\003\021\001\178\n.\000\000\000\000\000\000\007\202\017\246\001~\000\n\001\186\000\000\000\000\001\190\000\000\001\130\000\000\000\000\b\154\003\021\000\000\000\000\b\158\000\000\b\162\b\198\003\021\b\210\003\021\000\000\001\194\001\198\001\202\001\206\001\210\003\021\000\000\000\000\001\214\b\214\000\000\003\021\000\000\001\218\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\000\000\000\000\001\226\000\000\000\000\003\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\006\238\000\000\000\000\b\226\000\000\000\000\002\"\000\000\002&\003z\000\000\000\000\002*\000\000\002.\0022\007\174\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\001r\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\0012\000\000\000\000\000\000\000\000\001\154\001\158\001\162\007\206\001\170\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\210\000\000\001\178\n.\000\000\000\000\000\000\007\202\n2\001~\000\000\001\186\000\000\000\000\001\190\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\001\194\001\198\001\202\001\206\001\210\000\000\000\000\000\000\001\214\b\214\000\000\000\000\000\000\001\218\000\000\000\000\000\000\000\000\003\021\000\000\b\222\000\000\005\170\000\000\t\030\001\222\000\000\000\000\000\000\000\000\003\021\003\021\001\226\000\000\000\000\003\021\003\021\000\000\003\021\003\021\003\021\003\021\003\021\002\030\006\238\003\021\003\021\b\226\000\n\000\000\002\"\003\021\002&\003z\000\000\003\021\002*\000\000\002.\0022\003\021\003\021\003\021\003\021\000\n\003\021\003\021\n^\000\000\003\021\000\n\003\021\003\021\003\021\018\202\000\000\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\000\nnb\000\000\0009\0009\000\000\0009\0009\0009\0009\0009\0009\0009\0009\000\000\000\000\000\000\0009\000\000\000\000\0009\000\000\000\000\000\000\0009\0009\0009\0009\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\0009\0009\0009\0009\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\000\0009\000\000\0005\0005\000\000\000\000\bA\0005\0005\000\000\0005\0005\0005\000\000\0009\0009\000\000\0005\000\000\0009\0009\0009\006\253\000\000\000\000\000\000\bA\0005\000\000\000\000\000\000\000\000\0005\000\000\0005\0005\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\0005\000\000\000\000\000\000\0005\0005\bA\0005\0005\0005\0005\0005\0005\0005\0005\000\000\000\000\bA\0005\000\000\000\000\0005\bA\bA\000\246\0005\0005\0005\0005\000\000\0005\bA\bA\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\0005\0005\0005\0005\000\000\0005\000\000\000\000\bA\000\000\000\000\bA\000\000\000\000\0005\000\000\0005\000\000\012y\012y\000\000\000\000\bA\012y\012y\000\000\012y\012y\012y\000\000\0005\0005\000\000\012y\000\000\0005\0005\0005\007\r\000\000\000\000\000\000\000\000\012y\000\000\000\000\000\000\000\000\012y\000\000\012y\012y\000\000\000\000\000\000\000\000\000\000\012y\000\000\000\000\012y\000\000\000\000\000\000\012y\012y\000\000\012y\012y\012y\012y\012y\012y\012y\012y\000\000\000\000\000\000\012y\000\000\000\000\012y\000\000\000\000\000\000\012y\012y\012y\012y\000\000\012y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012y\012y\012y\012y\012y\000\000\012y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012y\000\000\012y\000\000\012u\012u\000\000\000\000\000\000\012u\012u\000\000\012u\012u\012u\000\000\012y\012y\000\000\012u\000\000\012y\012y\012y\007\t\000\000\000\000\000\000\000\000\012u\000\000\000\000\000\000\000\000\012u\000\000\012u\012u\000\000\000\000\000\000\000\000\000\000\012u\000\000\000\000\012u\000\000\000\000\000\000\012u\012u\000\000\012u\012u\012u\012u\012u\012u\012u\012u\000\000\000\000\000\000\012u\000\000\000\000\012u\000\000\000\000\000\000\012u\012u\012u\012u\000\000\012u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012u\012u\012u\012u\012u\000\000\012u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012u\000\000\012u\000\006\000\254\000\000\000\000\000\000\001\n\001\014\000\000\001\018\001\030\001*\000\000\000\000\012u\012u\001.\000\000\000\000\012u\012u\012u\000\000\016\254\000\000\000\000\0012\000\000\000\000\000\000\000\000\0016\000\000\007z\007~\000\000\000\000\000\000\000\000\000\000\007\158\000\000\000\000\001:\000\000\000\000\000\000\b\014\b\018\000\000\b\022\b\"\001n\b.\b2\b:\b\150\nZ\000\000\000\000\000\000\001\130\000\000\000\000\011\130\000\000\000\000\000\000\011\134\011\138\011\150\011\166\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\202\011\226\012\002\012\022\b\222\005q\005\170\000\000\005q\000\000\005q\005q\005q\005q\000\000\011\158\000\000\011\162\000\000\000\000\005q\000\000\005q\000\000\005q\005q\005q\000\000\005q\005q\005q\b\226\011\178\000\000\000\000\000\000\012*\003z\012\142\000\000\000\000\005q\000\000\005q\000\000\000\000\000\000\000\000\005q\005q\005q\005q\000\000\000\000\005q\000\000\000\000\005q\000\000\005q\005q\000\000\005q\005q\000\000\005q\000\000\000\000\005q\005q\005q\005q\005q\004\173\000\000\000\000\000\000\000\000\000\000\005q\005q\000\000\000\000\000\000\005q\000\000\005q\000\000\005q\000\000\005q\000\000\000\000\004\173\005q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005q\005q\005q\005q\005q\005q\005q\005q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\173\000\000\000\000\005q\000\000\005q\005q\024\158\005q\003\"\005q\004\173\000\000\000\000\000\000\005q\004\173\006\138\000\246\005q\n\205\005q\005q\n\205\n\205\004\173\004\173\000\000\n\205\000\000\n\205\000\000\000\000\n\205\000\000\000\000\000\000\n\205\n\205\000\000\n\205\n\205\000\000\n\205\000\000\000\000\n\205\000\000\000\000\000\000\000\000\n\205\002F\002J\n\205\004\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\205\000\000\n\205\004\173\000\000\000\000\n\205\000\000\n\205\0012\002N\000\000\002^\000\000\000\000\n\205\000\000\000\000\n\205\000\000\002j\n\205\n\205\023F\n\205\000\000\n\205\n\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\n\205\024\154\000\000\n\205\023\190\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\n\205\024\170\n\205\000\000\000\000\n\205\0206\n\205\000\000\000\000\000\000\000\000\000\000\000\000\b\254\000\000\000\000\000\000\003F\000\000\000\000\n\205\n\205\000\000\n\205\n\205\007v\n\205\000\000\n\205\000\000\n\205\t-\n\205\000\000\n\205\000\000\t-\000\000\002J\t-\000\000\000\000\000\000\000\000\000\000\000\000\002F\002J\t-\020\170\t-\t-\t-\000\000\t-\t-\t-\000\000\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\0012\002N\000\000\t-\000\000\000\000\000\000\000\000\025\206\025\222\t-\t-\000\000\000\000\t-\000\000\000\000\000\000\000\000\003\006\t-\000\000\t-\000\000\000\000\t-\002n\000\000\003\014\000\000\t-\t-\t-\003\n\000\000\001\130\003*\0036\004\217\t-\t-\000\000\003B\000\000\000\000\000\000\t-\000\000\000\000\026\202\003\182\000\000\000\000\000\000\t-\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\005\030\t-\t-\t-\000\000\t-\t-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t-\000\000\t-\t-\005\006\000\000\012\177\t-\000\000\000\000\000\000\012\177\t-\002J\012\177\000\000\t-\000\000\t-\t-\000\000\002F\002J\003\198\000\000\012\177\012\177\012\177\000\000\012\177\012\177\012\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\012\177\000\000\000\000\000\000\000\000\000\000\000\000\012\177\012\177\000\000\000\000\012\177\000\000\000\000\000\000\023^\003\006\012\177\000\000\012\177\000\000\000\000\012\177\002n\000\000\003\014\000\000\012\177\012\177\012\177\003\n\000\000\001\130\003*\0036\007v\012\177\012\177\000\000\003B\000\000\000\000\000\000\012\177\000\000\000\000\000\000\003\182\000\000\000\000\000\000\012\177\000\000\000\000\000\000\000\000\003F\000\000\000\000\023\138\005A\012\177\012\177\012\177\000\000\012\177\012\177\000\000\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\012\177\000\000\012\177\012\177\005\006\000\000\t1\012\177\023\182\000\000\000\000\t1\012\177\002J\t1\000\000\012\177\000\000\012\177\012\177\000\000\002F\002J\t1\000\000\t1\t1\t1\000\000\t1\t1\t1\000\000\000\000\000\000\000\000\000\000\004\209\000\000\000\000\000\000\0012\002N\000\000\t1\000\000\000\000\000\000\024\026\000\000\000\000\t1\t1\000\000\000\000\t1\000\000\000\000\000\000\000\000\003\006\t1\000\000\t1\000\000\000\000\t1\002n\000\000\003\014\000\000\t1\t1\t1\003\n\000\000\001\130\003*\0036\000\000\t1\t1\000\000\003B\000\000\000\000\000\000\t1\000\000\000\000\000\000\003\182\000\000\000\000\000\000\t1\000\000\000\000\b=\000\000\003F\000\000\000\000\000\000\005E\t1\t1\t1\000\000\t1\t1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b=\000\000\000\000\t1\000\000\t1\t1\005\006\012\181\000\000\t1\000\000\000\000\012\181\000\000\t1\012\181\000\000\000\000\t1\000\000\t1\t1\000\000\b=\003\166\000\000\012\181\012\181\012\181\000\000\012\181\012\181\012\181\000\000\b=\000\000\000\000\000\000\000\000\b=\b=\000\246\000\000\000\000\000\000\012\181\000\000\000\000\b=\b=\000\000\000\000\012\181\012\181\000\000\000\000\012\181\000\000\000\000\000\000\000\000\000\000\012\181\000\000\012\181\000\000\007\221\012\181\000\000\000\000\000\000\000\000\012\181\012\181\012\181\b=\000\000\000\000\b=\000\000\000\000\012\181\012\181\007\221\007\221\000\000\007\221\007\221\012\181\btttt>\007\237\000\000\011\253\011\253\007\237\000\000\007\237\000\000\000\000\011\253\007\237\000\000\000\000\011\253\000\000\000\000\000\000\011\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\253\011\253\011\253\000\000\011\253\011\253\011\249\000\000\000\000\000\000\000\000\011\249\000\000\000\000\011\249\000\000\011\253\000\000\011\253\011\253\000\000\000\000\000\000\011\253\000\000\011\249\011\249\011\249\011\253\011\249\011\249\011\249\011\253\000\000\011\253\011\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\249\000\000\000\000\000\000\000\000\000\000\000\000\011\249\003\138\000\000\000\000\011\249\000\000\000\000\000\000\000\000\000\000\011\249\000\000\011\249\000\000\007\225\011\249\000\000\000\000\000\000\000\000\011\249\011\249\011\249\000\000\000\000\000\000\000\000\000\000\000\000\011\249\011\249\007\225\007\225\000\000\007\225\007\225\011\249\000\000\000\000\000\000\011\249\000\000\000\000\000\000\011\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\249\011\249\011\249\007\225\011\249\011\249\012\025\000\000\000\000\000\000\000\000\012\025\000\000\000\000\012\025\000\000\011\249\000\000\011\249\011\249\000\000\000\000\000\000\011\249\000\246\012\025\012\025\012\025\011\249\012\025\012\025\012\025\011\249\000\000\011\249\011\249\000\000\000\000\000\000\007\225\000\000\000\000\000\000\000\000\012\025\000\000\000\000\000\000\000\000\000\000\000\000\012\025\003\138\000\000\000\000\012\025\000\000\000\000\007\225\000\000\007\225\012\025\000\000\012\025\000\000\000\000\012\025\000\000\000\000\000\000\000\000\012\025\012\025\012\025\tj\000\000\000\000\t>\007\225\000\000\012\025\012\025\007\225\000\000\007\225\000\000\000\000\012\025\007\225\000\000\000\000\012\025\000\000\000\000\000\000\012\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\025\012\025\012\025\000\000\012\025\012\025\012\021\000\000\000\000\000\000\000\000\012\021\000\000\000\000\012\021\000\000\012\025\000\000\012\025\012\025\000\000\002F\002J\012\025\000\000\012\021\012\021\012\021\012\025\012\021\012\021\012\021\012\025\000\000\012\025\012\025\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\012\021\000\000\000\000\000\000\000\000\000\000\000\000\012\021\003\150\000\000\000\000\012\021\000\000\000\000\000\000\000\000\000\000\012\021\000\000\012\021\000\000\000\000\012\021\002n\003&\003\006\000\000\012\021\012\021\012\021\003\nn\003\218\003\006\000\000\012\017\012\017\012\017\003\n\000\000\001\130\003*\0036\000\000\012\017\012\017\000\000\003B\000\000\000\000\000\000\012\017\000\000\000\000\000\000\012\017\000\000\000\000\000\000\012\017\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\012\017\012\017\012\017\000\000\012\017\012\017\012\r\000\000\000\000\000\000\000\000\012\r\000\000\000\000\012\r\000\000\012\017\000\000\012\017\012\017\000\000\000\000\000\000\012\017\000\000\012\r\012\r\012\r\012\017\012\r\012\r\012\r\012\017\000\000\012\017\012\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\012\r\003\150\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\012\r\000\000\012\r\000\000\000\000\012\r\000\000\000\000\000\000\000\000\012\r\012\r\012\r\000\000\000\000\000\000\000\000\000\000\000\000\012\r\012\r\000\000\000\000\000\000\000\000\000\000\012\r\000\000\000\000\000\000\012\r\000\000\000\000\000\000\012\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\r\012\r\012\r\000\000\012\r\012\r\012\t\000\000\000\000\000\000\000\000\012\t\000\000\000\000\012\t\000\000\012\r\000\000\012\r\012\r\000\000\000\000\000\000\012\r\000\000\012\t\012\t\012\t\012\r\012\t\012\t\012\t\012\r\000\000\012\r\012\r\000\000\002F\002J\000\000\000\000\000\000\000\000\000\000\012\t\000\000\000\000\000\000\000\000\000\000\000\000\012\t\003\138\000\000\000\000\012\t\000\000\0012\002N\000\000\002^\012\t\000\000\012\t\000\000\000\000\012\t\000\000\002j\000\000\000\000\012\t\012\t\012\t\000\000\000\000\002r\000\000\000\000\000\000\012\t\012\t\000\000\002n\003\002\003\030\000\000\012\t\000\000\000\000\003\n\012\t\001\130\003*\0036\012\t\000\000\000\000\000\000\003B\000\000\012\233\012\213\000\000\000\000\012\t\012\t\012\t\000\000\012\t\012\t\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\012\t\012\233\012\t\012\t\000\000\002\150\000\000\012\t\002\154\000\000\000\000\000\000\012\t\000\000\000\000\002\162\012\t\n\217\012\t\012\t\007\174\001\014\002\166\000\000\000\000\001*\002\174\000\000\012\213\000\000\001.\000\000\000\000\000\000\n\217\n\217\000\000\n\217\n\217\003z\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\178\000\000\000\000\000\000\002\178\000\000\000\000\012\233\012\213\000\000\000\000\000\000\n\217\000\000\007\190\000\000\000\000\000\000\007\202\t\222\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\012\233\000\000\b\154\000\000\002\150\n\217\b\158\002\154\b\162\b\198\000\000\b\210\000\000\000\000\006\158\000\000\000\000\000\000\000\000\000\000\n\217\002\166\000\000\b\214\000\000\002\174\002\182\012\213\000\000\n\213\000\000\000\000\007\174\001\014\b\222\000\000\005\170\001*\t\030\n\217\000\000\n\217\001.\000\000\000\000\000\000\n\213\n\213\000\000\n\213\n\213\002\178\0012\000\000\000\000\n\217\000\000\000\000\n\217\n\217\007\178\b\226\000\000\n\217\000\000\n\217\000\000\003z\000\000\n\217\000\000\000\000\n\213\000\000\007\190\000\000\000\000\000\000\007\202\bN\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\n\213\b\158\000\000\b\162\b\198\000\000\b\210\000\000\002\182\000\000\000\000\000\000\000\000\000\000\000\000\n\213\000\000\000\000\b\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\n\213\000\000\n\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\245\000\000\000\000\n\213\000\000\001\245\n\213\n\213\001\245\b\226\000\000\n\213\000\000\n\213\000\000\003z\000\000\nbV\000\000\001\245\001.\001\245\001\245\004\173\000\000\000\000\001\245\004\173\000\000\004\173\0012\001\245\000\000\b\130\000\000\004R\000\000\001\245\007\178\000\000\000\000\t\210\004\173\000\000\000\000\000\000\000\000\000\000\000\000\004\173\000\000\000\000\007\190\000\000\000\000\000\000\n\014\000\000\001~\004\173\000\000\004\173\000\000\004:\004\173\001\130\000\000\000\000\b\154\004\173\006\138\n\177\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\173\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\004\173\004\173\nV\0012\004\173\004\173\b\130\000\000\000\000\000\000\000\000\007\178\n\230\000\000\t\210\000\000\006\178\000\000\n\177\012\194\000\000\n\177\0142\004\173\b\226\007\190\000\000\000\000\n\177\n\014\003z\001~\n\177\000\000\004\173\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\n\177\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\005\233\000\000\000\000\000\000\000\000\005\233\000\000\000\000\005\233\b\222\000\000\005\170\000\000\000\000\nV\000\000\000\000\000\000\000\000\005\233\000\000\005\233\000\000\005\233\000\000\005\233\000\000\000\000\000\000\000\000\n\177\000\000\000\000\n\177\n\177\000\000\b\226\000\000\005\233\000\000\n\177\000\000\003z\000\000\nny\000\000\000\000\003\141\000\000\003\141\000\000\000\000\003\141\000\000\005\221\000\000\000\000\003\141\003\141\003\141\000\000\000\000\000\000\000\000\000\000\000\000\001\229\000\000\002J\001\229\000\000\000\000\000\000\003\141\000\000\000\000\000\000\003\141\t\025\000\000\001\229\000\000\000\000\000\000\001\229\000\000\001\229\000\000\000\000\000\000\000\000\003\141\003\141\003\141\000\000\003\141\003\141\000\000\000\000\001\229\000\000\000\000\000\000\005y\000\000\000\000\001\229\001\229\000\000\000\000\003\141\000\000\000\000\000\000\003\141\003\006\001\229\000\000\001\229\000\000\000\000\001\229\000\000\000\000\000\000\003\141\001\229\001\229\001\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003q\000\000\002J\003q\000\000\001\229\001\229\000\000\000\000\003\182\000\000\000\000\t\021\000\000\003q\000\000\000\000\000\000\003q\000\000\003q\000\000\000\000\001\229\001\229\000\000\000\000\001\229\001\229\000\000\000\000\000\000\000\000\003q\000\000\000\000\000\000\000\000\000\000\001\229\003q\001\225\000\000\000\000\000\000\000\000\001\229\000\000\000\000\003\006\003q\001\229\003q\000\000\000\000\003q\000\000\001\229\000\000\000\000\003q\003q\003q\000\000\000\000\000\000\b\177\000\000\000\000\000\000\000\000\b\177\000\000\000\000\b\177\000\000\003q\003q\000\000\000\000\003\182\000\000\000\000\000\000\000\000\b\177\000\000\b\177\000\000\b\177\000\000\b\177\000\000\000\000\003q\003q\000\000\000\000\003q\003q\000\000\000\000\000\000\000\000\b\177\000\000\000\000\000\000\000\000\000\000\003q\b\177\b\177\000\000\000\000\000\000\000\000\003q\000\000\000\000\000\000\b\177\003q\b\177\000\000\000\000\b\177\000\000\003q\000\000\000\000\b\177\b\177\b\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\177\000\000\000\000\000\000\b\177\000\000\000\000\000\000\ri\000\000\000\000\000\000\000\000\ri\000\000\000\000\ri\000\000\b\177\b\177\b\177\000\000\b\177\b\177\000\000\000\000\000\000\ri\000\000\ri\000\000\ri\000\000\ri\b\177\000\000\000\000\b\177\000\000\000\000\000\000\b\177\000\000\000\000\000\000\000\000\ri\000\000\000\000\000\000\004R\000\000\b\177\ri\ri\000\000\000\000\000\000\000\000\000\000\003N\000\000\000\000\ri\000\000\ri\000\000\000\000\ri\000\000\000\000\000\000\000\000\ri\ri\ri\000\000\rm\000\000\000\000\000\000\000\000\rm\000\000\000\000\rm\000\000\000\000\000\000\ri\000\000\000\000\000\000\ri\000\000\000\000\rm\000\000\rm\000\000\rm\000\000\rm\000\000\000\000\000\000\000\000\ri\ri\ri\000\000\ri\ri\000\000\000\000\rm\000\000\000\000\000\000\003Z\000\000\000\000\rm\rm\000\000\000\000\ri\000\000\000\000\003N\ri\000\000\rm\000\000\rm\000\000\000\000\rm\000\000\000\000\000\000\ri\rm\rm\rm\000\000\003\141\000\000\000\000\000\000\000\000\003\141\000\000\000\000\003\141\000\000\000\000\000\000\rm\000\000\000\000\000\000\rm\000\000\000\000\003\141\000\000\003\141\000\000\003\141\000\000\003\141\000\000\000\000\000\000\000\000\rm\rm\rm\000\000\rm\rm\000\000\000\000\003\141\000\000\000\000\000\000\003Z\000\000\000\000\003\141\003\141\000\000\000\000\rm\000\000\000\000\005}\rm\000\000\003\141\000\000\003\141\000\000\000\000\003\141\000\000\000\000\000\000\rm\003\141\003\141\003\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\141\000\000\000\000\000\000\003\141\000\000\000\000\000\000\000\000\rN\000\000\000\000\015&\t=\000\000\t=\t=\000\000\003\141\003\141\003\141\000\000\003\141\003\141\r\134\r\158\r\166\r\142\r\174\000\000\005}\000\000\000\000\000\000\000\000\000\000\000\000\003\141\000\000\r\182\r\190\003\141\000\000\000\000\000\000\000\000\001}\000\000\000\000\000\000\000\000\r\198\003\141\000\000\000\000\016\218\000\000\000\000\000\000\000\246\rN\000\000\000\000\007e\000\000\000\000\001}\007e\rV\r\150\r\206\r\214\r\230\000\000\000\000\r\134\r\158\r\166\r\142\r\174\018b\r\238\000\000\000\000\000\000\000\000\000\000\016\158\000\000\000\000\r\182\r\190\000\000\r\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\000\000\014\022\000\246\014\030\r\222\000\000\000\000\000\000\000\000\t=\r\254\rV\r\150\r\206\r\214\r\230\000\000\000\000\014\006\014\014\000\000\000\000\007e\000\000\r\238\000\000\000\000\000\000\000\000\000\000\001}\000\000\000\000\001y\000\000\000\000\r\246\000\000\000\000\000\000\000\000\016\222\000\000\000\000\000\000\000\000\000\000\rN\000\000\000\000\000\000\019\234\014\022\001y\014\030\r\222\000\000\000\000\000\000\000\000\001}\r\254\r\134\r\158\r\166\r\142\r\174\000\000\001}\014\006\014\014\000\000\000\000\000\000\000\000\000\000\000\000\r\182\r\190\000\000\000\000\001\138\002F\002J\002\138\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\246\000\000\004\181\000\000\007v\0012\002N\000\000\002^\rV\r\150\r\206\r\214\r\230\000\000\000\000\002j\022R\000\000\000\000\000\000\000\000\r\238\000\000\022z\000\000\000\000\000\000\001y\000\000\000\000\002n\003\002\003\030\r\246\000\000\000\000\000\000\003\n\021Z\001\130\003*\0036\000\000\021\214\000\000\000\000\003B\000\000\000\000\014\022\019\238\014\030\r\222\019\250\000\000\000\000\000\000\001y\r\254\022\242\000\000\000\000\000\000\003F\000\000\001y\014\006\014\014\000\181\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\021\242\023\006\000\000\000\000\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\022\000\181\000\000\000\000\000\000\003v\000\000\003zr\000\000\000\000\000\185\001vn\000\000\000\000\000\000\001\193\001\193\002\"\000\000\002&\000\000\000\000\001\193\002*\000\000\002.\0022\000\000\000\000\005y\000\000\000\000\001\193\000\000\001\193\000\000\000\000\001\193\000\000\000\000\000\000\000\000\001\193\001\193\001\193\001\225\000\000\002J\001\225\000\000\000\000\000\000\000\000\003e\000\000\000\000\003e\t\021\001\193\001\225\000\000\000\000\001\193\001\225\000\000\001\225\000\000\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\000\000\001\193\001\193\001\225\000\000\001\193\001\193\000\000\000\000\000\000\001\225\003e\005\198\005y\000\000\000\000\000\000\001\193\003e\003\006\001\225\000\000\001\225\001\193\001\193\001\225\000\000\000\000\000\000\001\193\001\225\001\225\001\225\003e\000\000\001\193\b\181\000\000\003e\003e\003e\b\181\000\000\000\000\b\181\000\000\001\225\001\225\000\000\000\000\003\182\000\000\000\000\000\000\003e\b\181\000\000\b\181\000\000\b\181\000\000\b\181\000\000\000\000\001\225\001\225\000\000\000\000\001\225\001\225\000\000\000\000\003e\003e\b\181\000\000\003e\003e\000\000\000\000\001\225\b\181\b\181\000\000\000\000\000\000\000\000\001\225\000\000\000\000\000\000\b\181\001\225\b\181\005\234\003e\b\181\000\000\001\225\000\000\000\000\b\181\b\181\000\246\000\000\000\000\000\000\re\000\000\000\000\000\000\000\000\re\000\000\000\000\re\000\000\b\181\000\000\000\000\000\000\b\181\000\000\000\000\000\000\000\000\re\000\000\re\000\000\re\000\000\re\000\000\000\000\b\181\b\181\b\181\000\000\b\181\b\181\000\000\000\000\000\000\000\000\re\000\000\000\000\000\000\000\000\000\000\b\181\re\re\b\181\000\000\000\000\000\000\b\181\000\000\000\000\000\000\re\000\000\re\000\000\000\000\re\000\000\b\181\000\000\000\000\re\re\re\000\000\ra\000\000\000\000\000\000\000\000\ra\000\000\000\000\ra\000\000\000\000\000\000\re\000\000\000\000\000\000\re\000\000\000\000\ra\000\000\ra\000\000\ra\000\000\ra\000\000\007A\007A\000\000\re\re\re\000\000\re\re\000\000\000\000\ra\000\000\000\000\000\000\000\000\000\000\003:\ra\ra\007A\007A\re\007A\000\000\000\000\re\000\000\ra\000\000\ra\007A\000\000\ra\000\000\004R\000\000\re\ra\ra\ra\000\000\000\000\000\000\006\017\000\000\007A\007A\007A\006\017\000\000\000\000\006\017\007A\ra\007A\007A\007A\ra\000\000\000\000\000\000\007A\006\017\000\000\006\017\000\000\006\017\000\000\006\017\000\000\000\000\ra\ra\ra\000\000\ra\ra\000\000\007A\000\000\000\000\006\017\000\000\000\000\000\000\000\000\000\000\006\178\006\017\006\017\ra\000\000\000\000\000\000\ra\011N\000\000\000\000\006\017\000\000\006\017\000\000\000\000\006\017\000\000\ra\000\000\000\000\006\017\006\017\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001rm\000\000\002J\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\237\000\000\003m\000\000\001\237\000\000\003m\000\000\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\170\001\237\001\237\000\000\003m\001\237\001\237\000\000\000\000\000\000\000\000\003m\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\000\003\006\003m\000\000\003m\001\237\000\000\003m\000\000\000\000\000\000\000\000\003m\003m\003m\000\000\001\237\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\003m\003m\000\000\000\000\003\182\000\000\000\000\000\000\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\003m\003m\t\210\000\000\003m\003m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\003m\019b\000\000\001~\000\000\000\000\000\000\003m\000\000\000\000\001\130\000\000\003m\b\154\000\000\000\000\000\000\b\158\003m\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\000\000\019r\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\012\194\000\000\000\000\019\150\000\000\b\226\007\190\000\000\000\000\000\000\n\014\003z\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\170\000\000\000\000\000\000\b\214\006\r\000\000\000\000\006\r\000\000\000\000\000\000\000\000\000\000\000\000\b\222\000\000\005\170\000\000\006\r\nV\006\r\000\000\006\r\000\000\006\r\000\000\000\000\000\000\000\000\000\000\006%\000\000\000\000\000\000\000\000\006%\012\194\006\r\006%\012\202\000\000\b\226\000\000\000\000\006\r\011\002\000\000\003z\000\000\006%\000\000\006%\000\000\006%\006\r\006%\006\r\000\000\000\000\006\r\000\000\000\000\000\000\000\000\006\r\006\r\000\246\000\000\006%\000\000\000\000\000\000\000\000\000\000\000\000\006%\006%\000\000\000\000\000\000\006\r\000\000\000\000\000\000\006\r\006%\000\000\006%\000\000\000\000\006%\000\000\000\000\000\000\000\000\006%\006%\006%\006\r\006\r\006\r\n\170\006\r\006\r\000\000\000\000\006!\000\000\000\000\006!\000\000\006%\000\000\000\000\000\000\006%\000\000\006\r\000\000\000\000\006!\006\r\006!\000\000\006!\000\000\006!\000\000\000\000\006%\006%\006%\006\r\006%\006%\000\000\000\000\000\000\000\000\006!\000\000\000\000\000\000\000\000\000\000\000\000\006!\011\002\006%\000\000\000\000\000\000\006%\000\000\000\000\000\000\006!\000\000\006!\000\000\000\000\006!\000\000\n\250\000\000\000\000\006!\006!\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rN\000\000\000\000\015&\006!\000\000\t=\015\n\006!\000\000\000\000\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\000\000\006!\006!\006!\000\000\006!\006!\000\000\000\000\r\182\r\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006!\r\198\000\000\000\000\006!\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\006!\000\000\000\000\rV\r\150\r\206\r\214\r\230\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\r\238\bV\000\000\000\000\001.\000\000\017\014\000\000\000\000\000\000\000\000\000\000\r\246\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\014\022\000\000\014\030\r\222\000\000\000\000\000\000\000\000\007\190\r\254\000\000\000\000\019b\000\000\001~\000\000\000\000\014\006\014\014\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\001I\000\000\000\000\001I\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\001I\000\000\001I\000\000\001I\000\000\001I\b\222\000\000\005\170\000\000\000\000\019r\000\000\000\000\000\000\000\000\001E\000\000\001I\001E\000\000\000\000\000\000\000\000\000\000\001I\000\000\000\000\012\194\001I\001E\012\202\001E\b\226\001E\001I\001E\001I\000\000\003z\001I\000\000\000\000\000\000\000\000\001I\001I\000\246\000\000\001E\000\000\000\000\000\000\000\000\000\000\001I\001E\000\000\000\000\000\000\001E\001I\000\000\000\000\000\000\001I\001E\000\000\001E\000\000\000\000\001E\000\000\000\000\000\000\000\000\001E\001E\000\246\001I\001I\001I\000\000\001I\001I\003e\001E\000\000\003e\000\000\000\000\000\000\001E\000\000\000\000\001I\001E\000\000\000\000\003e\000\000\000\000\001I\003e\000\000\003e\000\000\000\000\000\000\000\000\001E\001E\001E\001I\001E\001E\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\001E\000\000\000\000\000\000\000\000\000\000\000\000\001E\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\n\170\001E\003e\003e\003e\004\173\000\000\000\000\004\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003e\004\173\000\000\000\000\003e\004\173\000\000\004\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003e\003e\004\173\000\000\003e\003e\000\000\000\000\000\000\004\173\011\002\000\000\000\000\004\173\000\000\000\000\003e\000\000\000\000\004\173\000\000\004\173\005\234\003e\004\173\000\000\000\000\000\000\003e\004\173\006\138\000\246\000\000\000\000\003e\000\000\000\000\000\000\004\173\004\173\000\000\000\000\000\000\000\000\000\000\004\173\004\173\000\000\000\000\004\173\000\000\000\000\003\021\003\021\000\000\000\000\000\000\003\021\000\000\003\021\000\000\000\000\003\021\004\173\004\173\000\000\000\000\004\173\004\173\000\000\000\000\000\000\003\021\000\000\000\000\003\021\000\000\000\000\000\000\004\173\003\021\000\n\000\000\003\021\000\000\000\000\004\173\000\000\000\000\000\000\000\000\006\222\000\000\000\000\003\021\000\000\000\000\004\173\003\021\000\000\003\021\007\174\001\014\000\000\000\000\000\000\001*\003\021\bV\000\000\003\021\001.\000\000\003\021\003\021\000\000\003\021\000\000\003\021\003\021\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\003\021\t\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\254\003\021\007\190\003\021\000\000\000\000\017\202\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\003\021\rN\000\000\000\000\000\000\000\000\003\021\000\000\015\198\000\000\000\000\b\214\000\000\000\000\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\b\222\000\000\005\170\000\000\000\000\000\000\000\000\000\000\000\000\r\182\r\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\017\218\000\000\b\226\000\000\000\246\rN\000\000\000\000\003z\000\000\000\000\017\030\000\000\rV\r\150\r\206\r\214\r\230\000\000\000\000\r\134\r\158\r\166\r\142\r\174\000\000\r\238\000\000\000\000\000\000\000\000\000\000\016\158\000\000\000\000\r\182\r\190\000\000\r\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000\000\000\000\000\000\000\000\000\000\000\014\022\000\246\014\030\r\222\000\000\000\000\000\000\000\000\016\174\r\254\rV\r\150\r\206\r\214\r\230\000\000\000\000\014\006\014\014\000\000\000\000\000\000\000\000\r\238\000\000\000\000\000\000\000\000\000\000\017\014\000\000\000\000\000\000\000\000\000\000\r\246\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\000\000\014\022\000\000\014\030\r\222\000\000\0012\000\000\000\000\b\130\r\254\000\000\000\000\000\000\007\178\000\000\000\000\t\210\014\006\014\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\000\000\n\014\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\000\000\nV\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\190\000\000\b\226\007\190\000\000\000\000\000\000\n\014\003z\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\001u\000\000\012\205\001u\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\012\205\000\000\001u\000\000\001u\000\000\001u\000\000\001u\b\222\000\000\005\170\000\000\000\000\nV\000\000\000\000\000\000\000\000\000\000\000\000\001u\000\000\000\000\000\000\000\000\000\000\000\000\001u\012\205\000\000\000\000\000\000\000\000\021.\000\000\b\226\012\205\000\000\000\000\000\000\000\000\003z\001u\000\000\000\000\007\174\001\014\001u\001u\001u\001*\000\000\000\000\000\000\000\000\001.\0019\000\000\000\157\0019\t\026\000\000\005f\001u\000\000\0012\000\000\012\205\000\157\000\000\0019\000\000\0019\007\178\0019\000\000\0019\000\000\000\000\000\000\000\000\001u\001u\001u\000\000\001u\001u\007\190\000\000\0019\000\000\007\202\000\000\001~\000\000\000\000\0019\000\157\000\000\000\000\001\130\000\000\000\000\b\154\001u\000\157\000\000\b\158\000\000\b\162\b\198\0019\b\210\000\000\000\000\001u\0019\0019\0019\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\007\174\001\014\b\222\000\157\005\170\001*\t\030\bV\000\000\000\000\001.\000\000\000\000\000\000\000\000\000\000\000\000\0019\0019\0019\0012\0019\0019\b\130\000\000\000\000\007\002\000\000\007\178\b\226\000\000\t\210\000\000\011\214\000\000\003z\000\000\000\000\000\000\000\000\0019\000\000\007\190\000\000\000\000\000\000\025\186\000\000\001~\000\000\000\000\0019\000\000\000\000\000\000\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\000\000\000\000\004\149\004\149\000\000\000\000\000\000\004\149\b\222\000\000\005\170\000\000\004\149\025\190\000\000\000\000\000\000\000\000\004\149\000\000\000\000\000\000\004\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\149\025\242\000\000\026\250\026\n\b\226\000\000\000\000\000\000\000\000\000\000\003z\000\000\000\000\004\149\000\000\000\000\000\000\004\149\004\149\004\149\000\000\000\000\000\000\000\000\000\000\000\000\004\149\000\000\000\000\004\149\000\000\000\000\000\246\004\149\000\000\004\149\004\149\000\000\004\149\000\000\000\000\000\000\000\000\000\000\001\n\001\014\000\000\000\000\000\000\001*\004\149\000\000\000\000\000\000\001.\000\000\000\000\000\000\000\000\006\189\000\000\004\149\000\000\004\149\0012\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001:\000\000\000\000\000\000\000\000\000\000\000\000\004\149\000\000\001n\000\000\001~\000\000\004\149\000\000\000\000\000\000\000\000\001\130\000\000\000\000\011\130\000\000\000\000\000\000\011\134\011\138\011\150\000\000\000Y\b\210\000Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y\003e\000\000\000Y\003e\000\000\000\000\000Y\000Y\000\000\b\209\000\000\b\222\000\000\005\170\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\011\158\000\000\011\162\000\000\000\000\000\000\000Y\000\000\000\000\000Y\000\000\003e\005\198\000\000\000Y\000\000\b\226\011\178\003e\000\000\000Y\012*\003z\000\000\000\000\000Y\000Y\000Y\003e\000\000\003e\000\000\000\000\003e\000Y\000Y\000\000\000\000\003e\003e\003e\000\000\000\000\000\000\000\000\000Y\000\000\000\000\003e\000Y\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\003e\000\000\000\000\000Y\003e\000\000\000Y\000\000\003e\000\000\003e\000\000\000\000\b\209\003e\003e\006\230\000Y\003e\003e\000Y\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\000\000\000\000\000Y\000\000\000\000\005\234\003e\000\000\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\000\000\003e\003e\003e\001\n\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\003e\000\000\006\229\000\000\003e\000\000\000\000\0012\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\003e\003e\007:\000\000\003e\003e\001:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\001~\000\000\000\000\000\000\000\000\005\234\003e\001\130\000\000\000\000\011\130\003e\000\000\000\000\011\134\011\138\011\150\000\000\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\000\000\bV\000\000\000\000\001.\b\222\000\000\005\170\000\000\000\000\000\000\000\000\000\000\000\000\0012\000\000\011\158\b\130\011\162\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\000\000\000\000\b\226\011\178\026:\000\000\007\190\012*\003z\000\000\025\186\000\000\001~\000\000\000\000\006u\000\000\000\000\006u\001\130\000\000\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\006u\n&\b\210\000\000\006u\000\000\006u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\214\000\000\000\000\012\197\000\000\006u\012\197\000\000\000\000\000\000\000\000\b\222\006u\005\170\000\000\000\000\000\000\012\197\000\000\000\000\000\000\012\197\006u\012\197\006u\000\000\000\000\006u\000\000\000\000\005q\000\000\006u\006u\000\246\000\000\012\197\000\000\b\226\000\000\000\000\000\000\000\000\012\197\003z\000\000\000\000\000\000\006u\000\000\000\000\000\000\006u\012\197\000\000\012\197\000\000\000\000\012\197\000\000\000\000\000\000\000\000\012\197\012\197\000\000\006u\006u\006J\000\000\006u\006u\000\000\000\000\000\000\007\174\001\014\000\000\000\000\012\197\001*\000\000\006u\012\197\000\000\001.\000\000\000\000\000\000\006u\006\193\000\000\tY\000\000\000\000\0012\000\000\012\197\012\197\002\242\006u\012\197\012\197\007\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\197\000\000\000\000\000\000\007\190\000\000\000\000\012\197\007\202\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001\130\012\197\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\174\001\014\000\000\b\214\000\000\001*\000\000\bV\000\000\000\000\001.\000\000\000\000\000\000\b\222\000\000\005\170\000\000\t\030\000\000\0012\000\000\000\000\b\130\000\000\000\000\000\000\000\000\007\178\000\000\000\000\t\210\000\000\000\000\000\000\000\000\005\197\000\000\000\000\005\197\000\000\b\226\007\190\tY\000\000\000\000\011\238\003z\001~\000\000\005\197\000\000\000\000\000\000\005\197\001\130\005\197\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\000\000\n&\b\210\000\000\005\197\000\000\000\000\000\000\000\000\000\000\000\000\005\197\000\000\000\000\b\214\000\000\000\000\000\000\011N\000\000\000\000\005\197\000\000\005\197\000\000\b\222\005\197\005\170\000\000\000\000\000\000\005\197\005\197\000\246\000\000\005\201\000\000\000\000\005\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\197\005\197\005\201\000\000\005\197\b\226\005\201\000\000\005\201\000\000\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\005\197\005\197\000\000\005\201\005\197\005\197\000\000\000\000\000\000\000\000\005\201\000\000\000\000\000\000\000\000\000\000\000\000\011N\000\000\000\000\005\201\003e\005\201\005\197\003e\005\201\000\000\000\000\000\000\000\000\005\201\005\201\000\246\000\000\005\197\003e\000\000\000\000\000\000\003e\000\000\003e\000\000\000\000\000\000\000\000\005\201\005\201\000\000\000\000\005\201\000\000\000\000\000\000\003e\005\198\000\000\000\000\000\000\000\000\000\000\003e\000\000\000\000\005\201\005\201\000\000\000\000\005\201\005\201\000\000\003e\000\000\003e\000\000\000\000\003e\000\000\000\000\000\000\000\000\003e\003e\003e\000\000\000\000\000\000\005\201\000\000\000\000\000\000\000\000\000\000\012\133\000\000\001\014\012\133\003e\005\201\029\222\000\000\003e\000\000\000\000\029\226\000\000\000\000\012\133\000\000\000\000\000\000\000\000\000\000\012\133\000\000\003e\003e\022.\000\000\003e\003e\000\000\000\000\000\000\000\000\000\000\012\133\000\000\000\000\000\000\000\000\000\000\000\000\012\133\000\000\000\000\000\000\005\234\003e\000\000\001\150\000\000\001~\012\133\001\241\012\133\000\000\001\241\012\133\000\000\000\000\000\000\000\000\012\133\000\000\000\000\000\000\000\000\001\241\000\000\000\000\029\230\001\241\000\000\001\241\000\000\000\000\000\000\000\000\012\133\000\000\000\000\000\000\012\133\000\000\006y\000\000\001\241\006y\000\000\000\000\000\000\000\000\000\000\001\241\000\000\029\234\012\133\012\133\006y\000\000\012\133\000\000\006y\001\241\006y\001\241\000\000\000\000\001\241\000\000\000\000\000\000\000\000\001\241\001\241\000\000\000\000\006y\000\000\012\133\000\000\000\000\000\000\000\000\006y\000\000\000\000\000\000\000\000\001\241\000\000\000\000\000\000\001\241\006y\000\000\006y\000\000\000\000\006y\000\000\000\000\000\000\000\000\006y\006y\000\246\001\241\001\241\bq\bq\001\241\001\241\000\000\bq\000\000\000\000\000\000\000\000\bq\006y\000\000\000\000\001\241\006y\bF\000\000\000\000\000\000\bq\001\241\000\000\000\000\000\000\000\000\006\014\000\000\bq\006y\006y\000\000\001\241\006y\006y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bq\000\000\000\000\006y\bq\bq\bq\007\174\001\014\000\000\006y\000\000\001*\bq\000\000\000\000\bq\001.\000\000\000\000\bq\006y\bq\bq\t\134\bq\000\000\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\178\000\000\bq\n\170\000\000\000\000\000\000\000\000\007m\000\000\000\000\007m\000\000\bq\007\190\bq\000\000\000\000\007\202\000\000\001~\000\000\007m\000\000\000\000\000\000\007m\001\130\007m\000\000\b\154\000\000\000\000\000\000\b\158\000\000\b\162\b\198\000\000\b\210\bq\007m\000\000\000\000\000\000\000\000\bq\000\000\007m\011\002\000\000\b\214\000\000\012\197\000\000\000\000\012\197\000\000\007m\000\000\007m\000\000\b\222\007m\005\170\000\000\t\030\012\197\007m\007m\000\246\012\197\000\000\012\197\000\000\000\000\000\000\000\000\000\000\000\000\005q\000\000\000\000\000\000\007m\000\000\012\197\000\000\007m\b\226\000\000\t\194\000\000\012\197\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\007m\007m\000\000\000\000\007m\007m\012\197\000\000\000\000\000\000\000\000\012\197\012\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007m\000\000\000\000\000\000\012\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002F\002\246\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\012\197\012\197\002\242\000\000\012\197\012\197\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\002\250\004\173\012\197\000\000\004\173\000\000\006~\002j\000\000\012\197\000\000\000\000\000\000\000\000\000\000\004\173\000\000\000\000\000\000\004\173\012\197\004\173\002\254\003\002\003\030\000\000\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\004\173\000\000\000\000\000\000\005bq\000\000\000\241\000\000\000\000\000\000\012\197\000\000\000\237\000\000\000\000\000\000\000\000\012\197\000\000\000\000\000\241\000\241\000\000\000\237\000\241\000\241\000\000\000\000\000\000\000\000\000\000\000\000\012\197\000\000\000\000\000\000\000\000\012\197\012\197\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\197\000\241\000\000\000\000\000\000\000\000\000\000\000\000\002F\002\246\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\012\197\012\197\002\242\000\000\012\197\012\197\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\012\197\000\000\000\000\000\000\028\026\002j\000\000\012\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\197\000\000\002\254\003\002\003\030\000\000\000\000\007i\000\000\003\n\007i\001\130\003*\0036\000\000\000\000\000\000\000\000\005b\000\000\005j\007i\000\000\000\000\000\000\007i\000\000\007i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\006m\000\000\007i\006m\000\000\000\000\000\000\000\000\000\000\007i\005\170\022\014\000\000\000\000\006m\000\000\000\000\000\000\006m\007i\006m\007i\005\174\000\000\007i\000\000\000\000\000\000\000\000\007i\007i\000\000\000\000\006m\000\000\000\000\000\000\000\000\000\000\005\178\006m\000\000\000\000\000\000\000\000\007i\000\000\000\000\000\000\007i\006m\000\000\006m\000\000\000\000\006m\000\000\000\000\000\000\000\000\006m\006m\000\000\007i\007i\021\134\000\000\007i\007i\001a\000\000\000\000\001a\000\000\000\000\000\000\006m\000\000\000\000\000\000\006m\000\000\000\000\001a\000\000\001a\007i\001a\000\000\001a\000\000\000\000\000\000\000\000\006m\006m\000\000\000\000\006m\006m\0121\000\000\001a\0121\000\000\000\000\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\0121\000\000\000\000\006m\0121\000\000\0121\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\001a\001a\000\246\000\000\0121\000\000\000\000\000\000\000\000\000\000\000\000\0121\000\000\000\000\000\000\000\000\001a\000\000\000\000\000\000\000\000\0121\000\000\0121\000\000\000\000\0121\000\000\000\000\000\000\000\000\0121\000\000\000\000\001a\001a\001a\000\000\001a\001a\0125\000\000\000\000\0125\000\000\000\000\000\000\0121\r2\000\000\000\000\0121\000\000\000\000\0125\000\000\000\000\001a\0125\000\000\0125\000\000\000\000\000\000\000\000\0121\0121\000\000\001a\0121\0121\000\000\000\000\0125\000\000\000\000\000\000\000\000\000\000\000\000\0125\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0121\000\000\0125\000\000\0125\000\000\000\000\0125\000\000\000\000\000\000\014&\0125\000\000\000\000\007\174\001\014\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\001.\000\000\000\000\0125\rB\000\000\000\000\0125\000\000\000\000\0012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\178\000\000\000\000\0125\0125\000\000\000\000\0125\0125\000\000\000\000\000\000\000\000\000\000\007\190\000\000\000\000\000\000\n*\000\000\001~\000\000\000\000\000\000\000\000\000\000\0125\001\130\004\133\000\000\b\154\004\133\000\000\000\000\b\158\000\000\b\162\014&\000\000\b\210\000\000\000\000\004\133\000\000\000\000\000\000\004\133\n\170\004\133\000\000\000\000\b\214\005\209\000\000\000\000\005\209\000\000\000\000\000\000\000\000\000\000\004\133\b\222\000\000\005\170\000\000\005\209\000\000\004\133\000\000\005\209\000\000\005\209\000\000\000\000\000\000\000\000\000\000\004\133\000\000\004\133\000\000\000\000\004\133\000\000\005\209\000\000\000\000\004\133\b\226\000\000\000\000\005\209\011\002\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\133\000\000\000\000\005\209\004\133\000\000\000\000\000\000\005\209\005\209\000\246\004}\000\000\000\000\004}\000\000\000\000\000\000\004\133\004\133\000\000\000\000\004\133\004\133\005\209\004}\000\000\000\000\000\000\004}\000\000\004}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\133\005\209\005\209\004}\000\000\005\209\005\209\000\000\000\000\000\000\004}\021\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004}\000\000\004}\004\157\005\209\004}\004\157\000\000\000\000\000\000\004}\000\000\000\000\000\000\000\000\000\000\000\000\004\157\000\000\000\000\000\000\004\157\000\000\004\157\000\000\000\000\004}\000\000\000\000\000\000\004}\000\000\000\000\000\000\000\000\000\000\004\157\000\000\000\000\000\000\000\000\000\000\000\000\004\157\004}\004}\000\000\000\000\004}\004}\000\000\000\000\000\000\004\157\004m\004\157\000\000\004m\004\157\000\000\000\000\000\000\000\000\004\157\000\000\000\000\000\000\004}\004m\000\000\000\000\000\000\004m\000\000\004m\000\000\000\000\000\000\024Z\004\157\000\000\000\000\000\000\004\157\000\000\000\000\000\000\004m\000\000\000\000\000\000\000\000\000\000\000\000\004m\000\000\000\000\004\157\004\157\000\000\000\000\004\157\004\157\000\000\004m\000\000\004m\000\000\000\000\004m\000\000\000\000\002F\002J\004m\000\000\000\000\000\000\000\000\000\000\004\157\000\000\000\000\000\000\000\000\000\000\000\000\001v\000\000\005f\004m\025:\0012\002N\004m\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\004m\004m\000\000\002r\004m\004m\000\000\000\000\000\000\000\000\002n\003\002\003\030\004\173\000\000\012\149\004\173\003\n\012\149\001\130\003*\0036\000\000\004m\000\000\000\000\003B\004\173\000\000\012\149\000\000\004\173\000\000\004\173\027\026\012\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\001\138\000\000\004\173\006\146\012\149\000\000\000\000\000\000\000\000\004\173\000\000\012\149\000\000\000\000\007r\000\000\003N\000\000\004\193\000\000\007v\012\149\000\000\012\149\004\173\000\000\012\149\000\000\000\000\004\173\006\138\012\149\000\000\007\130\005.\000\000\000\000\000\000\000\000\000\000\021r\003v\000\000\003z\000\000\004\173\000\000\012\149\000\000\000\000\b:\012\149\027F\000\000\000\000\021Z\000\000\000\000\rq\rq\021\214\000\000\000\000\004\173\004\173\012\149\012\149\004\173\004\173\012\149\000\000\000\000\000\000\000\000\000\000\003Z\021\222\029\206\rq\rq\000\000\rq\n\190\000\000\000\000\000\000\004\173\000\000\012\149\rq\000\000\000\000\000\000\000\000\021\242\022\030\000\000\000\000\004\193\004\193\000\000\002F\002J\0146\rq\rq\rq\000\000\000\000\000\000\000\000\rq\000\000\rq\rq\rq\000\000\025\162\000\000\000\000\rq\0012\003\022\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002j\000\000\000\000\000\000\000\000\rq\000\000\002F\002J\020\194\000\000\000\000\000\000\000\000\000\000\002n\003\002\003\030\000\000\002F\002J\0212\003\n\000\000\001\130\003*\0036\0012\003\022\000\000\002^\003B\000\000\000\000\000\000\000\000\000\000\000\000\002j\0012\003\022\000\000\002^\000\000\000\000\000\000\000\000\000\000\003F\000\000\002j\000\000\000\000\002n\003\002\003\030\000\000\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\002n\003\002\003\030\000\000\003B\004\141\000\000\003\n\004\141\001\130\003*\0036\000\000\000\000\004u\000\000\003B\004u\000\000\004\141\000\000\003F\000\000\004\141\000\000\004\141\000\000\000\000\004u\000\000\000\000\000\000\004u\003F\004u\000\000\000\000\000\000\004\141\000\000\000\000\000\000\000\000\000\000\000\000\004\141\000\000\004u\000\000\000\000\000\000\000\000\000\000\000\000\004u\000\000\000\000\000\000\000\000\000\000\004\141\000\000\000\000\000\000\000\000\004\141\000\000\000\000\000\000\004u\000\000\000\000\000\000\000\000\004u\000\000\000\000\004\165\000\000\000\000\004\165\004\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004u\004\165\000\000\000\000\000\000\004\165\000\000\004\165\000\000\004\141\004\141\000\000\000\000\004\141\004\141\000\000\000\000\000\000\004u\004u\004\165\000\000\004u\004u\000\000\000\000\000\000\004\165\000\000\000\000\000\000\000\000\004\141\000\000\000\000\000\000\000\000\001\138\000\000\000\000\006\146\004u\004\165\022\170\000\000\000\000\000\000\004\165\000\000\000\000\000\000\030&\024\230\000\000\000\000\000\000\000\000\007v\000\000\000\000\000\000\000\000\000\000\004\165\000\000\000\000\000\000\000\000\000\000\000\000\007\130\000\000\000\000\000\000\000\000\000\000\000\000\021r\000\000\000\000\000\000\004\165\004\165\000\000\000\000\004\165\004\165\b:\000\000\027F\000\000\000\000\021Z\000\000\000\000\000\000\000\000\021\214\000\000\000\000\000\000\000\000\002F\002J\004\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\222\000\000\025b\000\000\029\214\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\021\242\022\030\002j\000\000\004\233\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\003\142\003\030\002j\000\000\000\000\025\162\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\000\000\003B\000\000\002n\003\154\003\030\002F\002J\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\003F\003B\000\000\000\000\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\003F\002j\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\003\230\003\030\002j\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\000\000\003B\000\000\002n\003\254\003\030\002F\002J\000\000\000\000\003\n\000\000\001\130\003*\0036\000\000\000\000\000\000\003F\003B\000\000\000\000\000\000\000\000\002F\002J\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\000\000\000\000\003F\002j\000\000\000\000\000\000\000\000\000\000\000\000\0012\002N\000\000\002^\000\000\000\000\000\000\000\000\002n\004\186\003\030\002j\000\000\000\000\000\000\003\n\000\000\001\130\003*\0036\001\138\000\000\000\000\002\138\003B\000\000\002n\004\210\003\030\000\000\000\000\000\000\000\000\003\n\022N\001\130\003*\0036\004\181\000\000\007v\003F\003B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022R\000\000\000\000\000\000\000\000\000\000\003F\022z
  
  and lhs =
    (8, "\012\011\n\t\b\007\006\005\004\003\002\001\000\227\227\226\226\225\224\224\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\223\222\222\221\220\220\220\220\220\220\220\220\219\219\219\219\219\219\219\219\218\218\218\217\217\216\215\215\215\214\214\213\213\213\213\213\213\212\212\212\212\212\212\212\211\211\211\211\211\210\210\210\210\209\208\207\207\206\206\206\206\205\205\205\205\204\204\204\204\203\203\203\203\202\202\202\201\201\201\201\200\199\199\199\198\198\197\197\196\196\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\195\194\194\193\193\192\191\190\189\189\188\188\187\187\187\187\186\186\185\185\184\183\183\183\183\182\181\180\180\179\179\178\178\177\176\176\175\174\174\173\172\171\171\171\170\170\169\168\168\168\168\168\168\167\167\167\167\167\167\167\167\167\167\167\167\167\166\166\166\166\166\166\166\166\166\165\165\164\164\164\163\163\162\162\162\161\161\160\160\159\159\158\158\157\157\156\156\155\155\154\154\153\153\152\152\151\151\151\150\150\150\150\149\149\148\148\147\147\146\146\146\146\146\145\145\145\145\144\144\143\143\143\142\141\141\140\140\140\139\139\139\139\139\139\139\138\138\138\138\138\138\138\137\137\136\136\135\135\135\135\135\135\134\134\133\133\132\132\131\131\130\130\129\128\128\128\127\127~~~~~~~~~}}|{{{{{{{{{zyxxwwwwvvvvvuttssrrrrrrrrrrrrrrqqppooooooooooooooooooooooooooooooonnmmllkkjjiihhggffeeddccccccba`r\r")
  
  and goto =
    ((16, "\000%\001{\000A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\203\000d\000.\001e\000+\n\016\000\000\000\000\001'\001H\nN\000\233\001\146\n\214\000\000\000\000\000\000\017@\000\157\001\218\000\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\182\000\000\b\204\000\000\000\000\017@\000\000\000\172\001r\000\139\002\206\000\015\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\140\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000 J\001\170\002\214\002|\000\000\002\226\n\016\001\244\003\140\000\020\000\000\000\000\000\000\002\n\000\000\000\000\002\142\000\000\000\000\000\000\000\000\003\142\000\000\003\206\000\000\000\000\000\000\000\000\000\000\000\138\000\000\001\026\005\186\001\030\000\000'\214 J\000v\000\000\004T\000\000J\136\004\180\000\000\000\000\002\212\002\228\005V\000\000;\030\005\162\000\000;(A0\000y\000\000\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;\148\005F\000\000\000\000\000\000\t\220\007\012\000\000\018J\007j\000\000\000\000\b<\000\000\000\000\002\022\002\140\000\000\000\000\002\022\b\254\002\022\000\000\000\000\007\164\t\030\000\000\027V\n\254\000\000\000\000\000\000\000\000\028H\012\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\184\000\000\003\194\006N\000\000\005v\003\214\016\186\000\000\000\000\000\000\005\216\000\000\000\000\000\000\000\000\005\156\000\000\000\000\000\000\000\000\000\000<\b\000\000\000\000\000\000\000\000\000\000\000\000\000\204\006\128\000\000\000\000\000\000\000\000 \030\rV\000\000\000\000\000\000\000\000+\026\r\218\000\000\000\000\000\000\000\000\006\174\000\000\020l\000\000\003\236\000\000\004 \007V\000\000\000\000\002\022\007\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003Z\003H\000\000\000\000N\166\005\156\005\156\000\000N\210\005\156A0\000\000\001,\000\000\000\000\000\000\000\000\000\000K\218\004D\000\000\004\244\000\000\000\000\000\000\001\142\000\000\000\000\000\000\000\000\000I\000\000\000\000\000\000\006\198\000\n\001\228\000\000\000\000\000\000\n\178\002\022\000\000\002\022\005\148\000\000\n\250\002\022\002\022\006\200\000\000\000\000\006\210\000I\000\000\000\000\000\000\005\156\000\000\006\218\007\012\000\000\003&\000\000\000\000\000\000\000\000\005\156\005\162\005\246\007>\000\000\000\000\000\000\000\000\b\134\000\000\000\000\000\000\000\000\000\000\002\180\007\208\002\190\001Z\001\196\007\012\007\020\004\164\006\144\004\182\005\186\bb\003\142O\016\005\156O(\005\156\003\152\000\000\000\000\000\000\b\184\000\000\000\218\002F\006\198\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007T\000\000\000\000\000b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\218\004\224\007d\000\000\000\000\005\228\t$\b\216\004,\000\000\000\000\b\212\003<\003\022\000\000\007\254\000\000\000\000\000\000\007\254\b\014\007t\006l\000\000\007\166\006j\bh\007\246\bNB \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\180\000\000\b\152\b\154\tJ\000\000\000\000\000\000\000\000\002\164\000\000\000\000\b\194\007\176\b\232\b\226(\172\000\000\000\000\t4\b\238\0118\tZ\b\240\011X\011\242\000\000(\226\td\t\000\nZ\000\000<d\005\234B\000\000\000\t\198\t\206\000\000O2\005\156\000\000\000\000\000\000\000\000\000\000\000\000\t\210\t\250\n\174\012N9\020'\002<\154\002\192\000\000\000\000\000\000\n\180O\182\005\156\n\188B\130\n6\t\020\020\022\000\000\006\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002F\000\000\000\000\000\000\000\000\011dC\020\000\000\nH\t\136C\030\000\000\000\000\000\000C~\n\020C\144\n\020\000\000D\028\n\020\000\000D.\n\020\n\020\n\020\000\000D\142\n\020D\152\n\020\006\014\000\000<\154\000\000\000\000\000\000\n\020<\206\000\000\000\000\000\000\n\020\000\000\004\b\011\016\000\000\000\000\000\000\000\000\000\000\000\000H\136\011B\000\000=\014=n\n\020O\186\005\156\011 \000\000\000\000\011,\000\000\000\000\000\000\000\000\026\180\011\018\011\030\000\000\000\000=\176Nz\026\180\000\000D\216\n\020\000\000\n\020\000\000P>\005\156\000\000\000\000\012\188\n\170\n\194\n\222\t\158\011(\t\172\003\196\011\140\000\000\000\000\004\156\006\132\t\234\004^\011\028\000\000\000\000\007\214\000\000\006N\002\128\007j\004\168\012x\000\000\000\000?\246\000\000S\246\012\n\000\000\001\174\000\000\000\248\000\000\000\000\002\246\000\000\000\000\000\000\012\130\000\000\b\252\006N\000\000\000\000\011<\000\000\000\000\000\000\000\000\000\000\000\000\006N\000\000\006N\000\000\000\000\011\130\000\000\003T\b\232\000\000\003T\000\000\t\146\006N\000\000\000\000\000\000\000\000\000\000\003T\r\026\003\170\rv\012\150\012b)2Dd\000\000\029\184)R\011\186\t\242#\006\011\188\n:\r\212\011\202\nF\r\254\011\206\n^9\182>\024\n\020\014\158\011\254\n\130L\154\026\180\012\188\000\000H\252\014\252\012$\n\172E8\n\020\015\150\012.\n\206E\172\n\020\015\182&\000\000\000\000\000\000\000\000\000\000\000\006\026\t@\000\000\000\000\000\000\0120\011v\011\202\003T\011@\006N\000\000\000\000\000\0009\020\000\000PH\005\156\016\024\0126\011xS\192\000\000T6\000\000\000\000\016\158)\180L\186\000\000\000\000\r\160P`\005\156GN\005\156P\158\005\156\000\000\000\000\000\000\000\000\000\000T\188\000\000\000\000\000\000\004\180\016\190\000\000\000\000\000\000)\216T\214\000\000\000\000\000\000\000\000\000\000\012l\017\138\000\000\000\000\012z\017\170\000\000\001M*Z\001M*z\001M\000\000T\240\000\000+\\\001M\018D\001\240\018\148\000\000\000\000+d\001M+\134\001M,,\001M,j\001M,\144\001M-2\001M-\162\001M.\020\001M.<\001M.\174\001M/\030\001M/H\001M/\184\001M0*\001M0R\001M0\196\001M14\001M1^\001M1\206\001M2@\001M\011\128>2F$GN\r\140\000\000P\202\005\156\018\182\000\000\000\000P\228\005\156\019\\\000\000\000\000\019|\000\000\000\000\000\000>~\000\000\019\204\000\000\000\000\000\000\000\000Q*\005\156\020f\000\000\012\202\021,\000\000E\226\n\020FJ\n\020F\134\n\020\0066\000\000\000\000\000\000\000\000F\170\n\020\004B\000\000\000\000\000\000\001M\021N\000\000\000\0002h\001M\000\000\000\000\000\000\021\158\000\000\000\000\001M\021\244\000\000\022D\000\000\000\000\022\254\000\000\000\000\000\000T\252\000\000\000\000\023&\000\000\000\0002\218\001M\023\198\000\000\000\0003J\001M\0244\000\000\000\0003t\001M\005L\024\168\000\000\000\0003\228\001M\024\206\000\000\000\0004V\001M4~\001M\000\0004\240\001M\000\000\000\000\025*\000\000\000\0005`\001M\025\176\000\000\000\0005\138\001M\0262\000\000\000\0005\250\001M\000\0006l\001M\000\000\r\204\000\000\000\000\001M\000\000\000\000\026R\000\000\000\000\026\166\000\000\000\000\000\000\012\202\026\248\000\000\000\000\027Z\000\000>\184\000\000\000\000&\000\000\000\000\000\027\220\000\000\000\000\000\000\001M\001L\012\2346\148\000\214\000\000\000\000\000\000\004\230\011\142G<\n\0207\006\001M7v\000k\000\000\000\0007\160\001M\000\000\000\000\000\000\000\000\028,\000\000\000\000\000\000\001\168\002\182\012\2388\016\002\254\000\000\000\000\000\000\000\000\000\000\014*\000\000\000\000Gx\000\000\000e\000\000\005Z\000\000\r\196\000\000\003(\000\000\000\000\000\000\000\000\000\000\006\026\000\000\000\000\r\018\028\130\000\000\028\210\000\000\000\000\000\000\028\242\000\000\000\000\029T\r\030\029\250\000\000\030\026\000\000\000\000\000\000\026\180\r\208\000\000I\014\012\254\002\022\030j\000\000I\150\000\000\000\000?.\000\000\000\000\000\000I\160\000\000\000\000\030\204\000\000\0310\000\000\000\000\000\000\000\000?z\000\000\000\000\000\0008\130\001M8\170\001M\000\000\000\000\000\000\000\000\001M\000\000\000\000\000\000\000\000\001M\000\000\014|\000\000\000\000\000\000\000\000\000\000\000\000\005@\000\000\000\000\000\000\000\000\001^\000\000\000\000\011\160\012\014\003T\031\146\000\000\r\156\011\162\014:\002\208\014.\003T\011\164\006N\014P\003T\000\000\031\226\000\000\006f\000\000\r\238\011\170\007\016\014\006\011\172\000\000 \002\000\000\011\182\014\224@*\006\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\190\000\000\000\000\000\000\026\180\014\196\000\000$\236 \168\000\000\000\000!\n\000\000\000\000\000\000? \000\000L\192\000\000Qh\005\156!*\000\000\000\000!z\000\000\000\000\bZ\000\000\001M\000\000\000\000:$\000\000\000\000:2\000\000\001M\000\000\016\244\006N\000\000\017\242\006N\000\000\020<\006N\000\000\003T\006N\000\000\n\020\000\000Q\128\005\156\000\000\000\182\000L\011\188\014\194\000\000\000\000\015x!\208\000\000\000\000\" \000\000\b\156\000\000\001H\000\000\000\000\000\000\000\000\000\000\000\000Q\244\005\156\000\000\015\142\"@\000\000\000\000\"\162\000\000\004*\011\192\0152\000\000I\248\0018\014\242\000\000R\018\005\156#H\000\000\000\000RH\005\156\000\000#h\000\000\005\156\000\000\n,\000\000\006<\000\000\000\000\000\000\000\000\000\000\000\000\004\220\000\000\000\000J\018J,\015(\000\000R\134\005\156#\184\000\000\000\000$\026\000\000\000\000\001\254\003\bG\156\n\020$~\000\000\014\144\014\174\011\198\014\214\015\132\022\158\006N\n\230\000\000\011\242\015h\015n\006\178\011:\0154\011\244\015x\007\212\011\\\015@\000\000\000\000\b\022\012(\000\000\004\022\003Z\015\b\011\246\014t\005\134\000\000\015\022\0126\b\148\000\000R\226\005\156\015\192\015\222\000\000\012f\000\000\015X\0128\b\170\015\154\006\242\012P\012z\000\000\012\\\012\190\000\000\b@\006\178\015\138\015\182\012d\004t\012\220\000\000\012\128\005\238\r(\000\000\015\188\012\150\016H\000\000\006\020\r:\000\000\016L\000\000\023r\006N\016\026\012\210\016\\\000\000\024\254\006P\016 \000\000\000\000\001N\007\226\rZ\000\000\025\128\006N\r\146\000\000\005\146\000\000\015\214\012\250\025\230\007V\000\000\015\218\r\n\tv\015\154\015\220\015\240\r\018\017T\000\000\015\254\004~\000\000\000\000\000\000\000\000\000\249\r\022\015\206S\018\005\156\000\000\000\004\r(\016\148\000\000\000\000\000\000\000\000\000\000\000\000S.\007\210\000\000\r8\016\242\000\000\000\000\000\000\000\000\000\000\000\000J<\r\218\000\000\r@\000\215\000\000\rX\rh\t*\000\000\000}:\140\000\000\007\170\000\000Sn\005\156\005\156\000\000\000\000\007\242\000\000\nJ\000\000\006\022\007\242\007\242\000\000\rrL\196\005\156S\136\005\156\014\002\000\000\000\000\000\000\014\014\000\000\000\000\000\250\000\000\t \016R\rt\017n\016\024\000\000\000\000\006J\tV\016X\000\000\000\000\r\200\017t\016\"\000\000\000\000\007\250\000\000\0144\000\000\023b@`\005\156\000\000\024v\020\024\000\000,\210\000\000\000\000\000\000\007\242\000\000\000\000\014\026\016~\0142\017\160\016N\000\000\000\000;\206\014\160\016\158\000\000\000\000\000\0008\128\000\000\000\000\000\000\000\000\000\000\000\000\014\218\000\000\016\172\014X\007\148\000\000\017\170\017^\014\252\016\190\000\000\000\000\016\194\014h\tB\000\000\000\000$\230\017h\015\b\016\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\156\016z\014\144\017\228\016\144\000\000K\024\026\180\000\245\014\146\016^\t0\014\150%F\0156\000\000\014\158\014\162\000\217\000\167\014\190\b\170\014\202\017x@4\015f\000\000\014\232\014\240\n\172\000\000\000\135M\004\000\000\005\200\000\000\014\244K*K\136\003\220\016P\012\026\000\000M\180\r\204\000\000\005\142\000\000\000\000\005\142\000\000\000\000\005\142\011$\000\000\022\000\005\142\017|@\236\015|\000\000\005\142\000\000@\246\000\000\000\000\005\142\000\000\000\000\015\158\000\000\023\232\t\184\015\168\000\000\015 M\174\015\192\000\000\000\000\000\000\016\020\000\000\000\000\th\000\000\005\142T\156\000\000\030`\005\142K\200\000\000\016\026\016\214\015R\017\246\016\160\000\000K\254\0164\016\222\000\000\000\000\000\000\015Z\n\170\000\000\000\000\000\000\000\000\000\000\012l\000\000\012z\016>\000\000\016\238\000\000\000\000\000\000\000\000\016B\016\n\000\000\000\000\000\000\012l\000\000\012z\000\000\000\000\000\000\000\000\000\000\000\000\006\128\000\000\015Z\014\138\006\158\000\000\016N\022\202\000\000\000\000\000\000\000\000\000\000\000\000\017\138\000\129\000y\000\000\000\000\000\000\000\000\b\182\t$%\174\017\154\016T\000\000\000\000\017\144\0001\000i\000\000\000\000\000\000\006N\000\000\tj\000\000\000\000\000\000\000\000\016\174\015\150\014\232\003T\000\000\027\190\006N\000\000\017\252\000\000\000\000\000\000\000\000:f\000\000\000\000:\212\000\000&`\000\000&\184\000\000\000\000'(\000\000\000\000\000\000\000\000'^\000\000(*\000\000\000\000\000\000\000\000\000\000\004\166\000\000\000\000\000\000\005p\000\198\000\000\000\000\000\000\000\000\000\000\007\184\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000N\"\000\000\005\156\000\000\t\174\000\000\000\000\000\000\004\230\000\000\000\000\000\000\001\\\000\000\000\000\000\000\000\238\000\000\000\000\000\000A.\n\020\000\000\000\000\000>\000\000\000\000\000\000\000\000\006\026\004\214\016\214\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\172\000\000\016Z\000\000\000\000\000\000\000\000\005&\006\186\020\168H\"\000\000\000\000\016rH&\000\000\000\000\000\000\016\158H\182\000\000\000\000\000\000\000\000"), (16, "\006\208\004S\003\012\003\r\002;\000=\000\211\000S\007\000\0009\000W\000X\000\217\000\220\000\144\002;\000A\003,\006\209\007:\001\177\000S\006\211\000\211\000W\000X\003-\0009\001\177\000\217\000\220\006\212\006\226\000\225\000\177\001\190\007\005\001\210\000W\003D\004>\006\208\006\144\003\012\003\r\002;\000S\000F\007\014\000W\000X\007p\003\r\002;\0075\003X\006\144\005\025\003,\006\209\006\225\006\213\000S\006\211\001v\000W\000X\003-\000\211\005\253\000\211\006\146\006\212\006\226\000\217\000\220\000\217\000\220\000I\000S\003D\006\144\000W\002*\005\254\006\146\005\253\000\225\006\021\006\147\001K\0009\007\001\000\177\006\149\006\214\000\186\006\144\006\190\003F\007\015\005\254\006\213\006\147\006\215\006\005\0073\001\195\006\149\001\197\006\146\003\016\006\170\003H\000W\000\233\000P\007\003\007\004\004T\000Z\007r\007\002\006\231\003O\000d\006\146\0009\006\147\001\177\007\002\005\253\006\232\006\149\000B\000\211\006\214\006\165\001\138\001\130\003F\000\217\000\235\0049\006\147\006\215\005\254\006\233\000\221\006\149\005\255\006\014\003\016\006\156\003H\000W\006\219\007\003\007\004\007<\007s\006\221\003H\000W\006\231\003O\001q\001\130\003X\006\253\001)\000\225\006\223\006\232\000\226\003I\006\016\003S\001\138\001\130\005 \001\007\001\198\003Y\000\225\001\197\003K\000\226\006\233\000\211\000<\006\224\006\018\005\027\001\007\000\217\000\235\006\219\000\236\000\233\000Z\001\199\006\221\006\208\001y\003\012\003\r\002;\000;\003[\000\142\007h\000\233\006\223\0009\006\019\003I\001\131\003S\001,\003,\006\209\006\225\0057\003Y\006\211\001\197\003K\001z\003-\004)\001\200\006\224\000S\006\212\006\226\000W\000X\005:\006\236\007i\001\201\003D\000\246\006\208\000\213\003\012\003\r\002;\002\196\003[\000\217\000\236\002\200\002\185\000\217\000\246\001\145\000}\000Z\000\217\003,\006\209\006\225\006\213\006\185\006\211\007d\007\022\001_\003-\000\211\000?\000\211\006\020\006\212\006\226\000\217\000\235\000\217\000\235\006\187\000\241\003D\005$\000\177\000\211\000\187\001\210\0009\001\202\001\203\000\217\000\235\005\185\000\240\0009\002\201\006\214\006\016\001\204\001\205\003F\007e\000\129\006\213\000W\006\215\000b\006\250\006\188\001\206\001\130\004-\003\016\006\018\003H\000W\001_\000G\000Y\001f\001h\001j\001\134\001\135\006\231\003O\003X\001\019\007T\007|\003\r\002;\002\189\006\232\000\236\002A\006\019\006\214\001\146\001\159\001\019\003F\002\183\001\138\001\130\000W\006\215\000\236\006\233\000\177\005\187\005=\000\182\003\016\000J\003H\000W\006\219\0040\001_\001\190\000\133\006\221\000W\000\241\006\231\003O\001\029\001i\001h\001j\004=\000\225\006\223\006\232\000\226\003I\000\241\003S\004\172\001\029\002\190\001\007\000Z\003Y\000\183\001\197\003K\000\225\006\233\000Q\0013\006\224\001\164\003X\000\211\000\225\000\151\006\219\001-\000\233\000\217\000\235\006\221\006\208\000\158\003\012\003\r\002;\004E\003[\001t\001h\001j\006\223\004L\000\233\003I\001\131\003S\000Z\003,\006\209\006\225\000\233\003Y\006\211\001\197\003K\001\177\003-\003X\007U\006\224\001\197\006\212\006\226\002\169\007}\007\018\003H\000W\000\164\003D\000\246\006\208\002\196\003\012\003\r\002;\002\200\003[\000\217\004Y\000\211\001R\000Z\002\169\001\161\005\006\000\217\000\220\003,\006\209\006\225\006\213\002\196\006\211\003_\006\234\002\200\003-\000\217\001\177\000\211\005X\006\212\006\226\000\181\000S\000\217\000\235\000W\002*\003D\001\219\004\189\003\012\003\r\002;\000\211\001\185\001\130\002B\002\201\002+\000\217\000\235\000\211\006\214\000[\006\252\003,\003F\000\217\000\235\006\213\002\188\006\215\002\202\006\229\003-\000e\000\217\002\201\003\016\000\159\003H\000W\002-\001_\004\169\000\162\002\219\003D\001\134\001\135\006\231\003O\002\202\001\019\000S\000\239\001\177\000W\002*\006\232\000\236\001\177\0040\006\214\001\146\001\159\004\192\003F\001\220\001\138\001\130\000\211\006\215\002\165\006\233\004=\000\236\000\217\000\220\003\016\000\211\003H\000W\006\219\000\236\0009\000\217\000\235\006\221\000Z\000\241\006\231\003O\001\029\004T\001\142\001h\001j\001\200\006\223\006\232\000Z\003I\000\225\003S\000Z\000\241\003F\001\201\004I\003Y\000Z\001\197\003K\000\241\006\233\001\202\001\203\006\224\003\016\000\177\003H\000W\000\182\006\219\003X\001\204\001\205\001\179\006\221\000\165\003L\003O\001\178\006D\001\177\003[\001\206\001\130\000\177\006\223\001\211\001\210\003I\000S\003S\001\177\000W\000X\001Q\002\165\003Y\001\180\001\197\003K\003P\005\205\001\026\006\208\006\224\003\012\003\r\002;\006E\007>\006F\000S\001\024\002\220\000W\002*\000\225\007\127\007\128\000\226\003,\007\130\003[\001?\006\144\006\211\001\007\002p\003I\003-\004\171\000\180\002\208\002\203\006\212\007\132\003Y\005?\001\197\003K\006G\000Z\003D\006\208\000\233\003\012\003\r\002;\007\147\001A\000\211\002-\001\215\006\146\005A\0057\000\217\000\235\007\139\001I\003,\007\140\003[\003\186\006\213\006\211\005\153\001c\000Z\003-\005I\006\147\000\217\006H\006\212\007\148\006\149\002\169\000Z\002\206\006\153\004U\003D\006I\007E\006J\002\196\007`\000\246\000Z\002\200\000S\000\217\000\225\000W\002*\000\226\003\196\006\214\000\211\000W\002*\003F\001\007\006\213\000\217\000\235\006\215\000\225\002\167\002\203\005w\006g\000\236\003\016\000Z\003H\000W\000\211\001\190\000Z\000\233\000W\007a\000\217\000\235\006\231\003O\001\171\000\217\001\017\002\174\007\135\000Z\002\201\006L\007@\003\210\006\214\001v\006N\006X\003F\001D\002\021\002;\000\199\006\215\001\216\002\202\006\233\006c\004V\001\177\003\016\001e\003H\000W\000\205\006\219\007F\001\131\002`\002;\006\221\000\246\006\231\003O\004`\002;\006d\007\152\002\219\003\245\001\019\006\223\000W\002*\003I\005F\003S\000\236\003\179\002;\006\173\005=\003Y\0040\001\197\003K\006\233\001\208\007G\001\197\006\224\000\211\000\208\007N\000\217\006\219\004;\000\217\000\235\001\131\006\221\006\208\005\188\003\012\003\r\002;\000\211\000\241\003[\004\006\001\029\006\223\000\217\000\235\003I\000\224\003S\000Z\003,\006\209\006\238\005|\003Y\006\211\001\197\003K\000\177\003-\001\169\001\210\006\224\000S\006\212\006\226\000W\000X\007O\006D\005J\004\167\003D\006\208\0027\003\012\003\r\002;\000\211\001\019\003[\001\177\001\177\005\157\000\217\000\235\000\236\003X\007\139\000\217\003,\007\140\005\187\007P\006\213\006\211\001\134\001\135\006E\003-\006F\000\236\005\164\000\211\006\212\007\143\001\177\001|\000\217\000\217\000\220\001\016\003D\001\158\007Q\002\210\000\241\001\138\001\130\001\025\001\023\001\177\002\220\001\177\000\225\002\219\006\151\000\229\006\214\000\211\006G\001\127\003F\001\028\006\213\000\217\000\220\006\215\001\134\001\135\002\219\004\193\006\240\001+\003\016\002\221\003H\000W\000W\002\169\006\139\002\204\000\233\005\170\005\176\001\153\006\231\003O\002\196\001\138\001\130\000\225\002\200\006H\000\217\006\232\005\253\000\177\006\214\002\173\001\210\000\225\003F\006I\000\232\006J\000\211\006\215\006\241\005j\006\233\005\254\000\217\000\235\003\016\006\004\003H\000W\000\177\006\219\006Q\001\210\005\253\006\245\006\221\004\206\006\231\003O\004\192\000\233\000\225\007\146\006e\000\254\007L\006\223\002\201\005\254\003I\002\222\003S\006\029\001\190\001\177\000\225\000W\003Y\001\129\001\197\003K\006\233\002\202\002\195\002\195\006\224\006L\000\211\001;\000\233\006\219\006N\006X\000\217\000\235\006\221\006\208\004\192\003\012\003\r\002;\001_\006c\003[\000\225\001\128\006\223\006-\002\220\003I\001\133\003S\001\140\003,\006\209\001\139\001\167\003Y\006\211\001\197\003K\006d\003-\002\220\000\211\006\224\001\162\006\212\006\246\006D\000\217\000\235\000\233\001C\000\211\003D\001\177\000\225\002\210\000\225\000\217\000\235\000\226\003[\000Z\005\141\005\193\001\197\001\196\001\007\000\236\001\166\001\177\001\150\001h\001j\001\209\006\213\006E\006f\006F\004\197\001\130\000\211\001\228\005\005\000\211\000\233\002\221\000\217\000\235\000W\000\217\000\220\005\128\002;\006/\000\211\000Z\002\169\000\241\002\170\000Z\000\217\000\235\005o\001F\000\236\002\196\001\231\006G\006\214\002\200\005\181\000\217\003F\000W\000\236\007\011\001\172\006\215\003\012\003\r\002;\001\177\0009\000\211\003\016\005\226\003H\000W\000\246\000\217\0062\000Z\002\195\003,\001D\005t\006\231\003O\007M\000Z\006H\006\006\003-\000\236\000\241\006\249\001\234\000Z\007!\002\222\006I\000\225\006J\002\201\001\177\003D\000\211\000\236\000\211\004\192\006\233\005\249\000\217\000\235\000\217\000\235\001\183\000\225\002\202\006\219\000\248\001\213\000Z\000\241\006\221\001\214\003\012\003\r\002;\006g\001\218\000\177\001_\006[\001\210\006\223\0063\001D\003I\006\242\003S\003,\004\192\004\241\001\028\000\233\003Y\001\227\001\197\003K\003-\005\254\006L\0068\006\224\0065\004!\006N\006X\000\142\006\000\002\210\000Z\003D\001\019\003F\000\241\000\211\006c\000\236\001\177\000\236\003[\000\217\000\235\006h\005\026\003\016\001\247\003H\000W\003\012\003\r\002;\001\155\001h\001j\006d\002\214\003L\003O\002\221\001\233\002\169\000W\002\194\003,\001\177\002\000\000\237\005\r\000\241\002\196\000\211\001\029\003-\002\200\001\177\000\217\000\217\000\235\007\\\000\225\003P\002\003\001\004\001\246\000\142\003D\000\211\002\b\002\011\001\005\003F\005\244\000\217\000\235\000W\006D\002\017\003\012\003\r\002;\005\139\001\130\003\016\001\250\003H\000W\0024\000\233\003I\006\022\003S\000Z\003,\006\183\003L\003O\003Y\002\201\001\197\003K\006~\003-\002\222\007^\006E\007\016\006F\007/\003\012\003\r\002;\000Z\002\202\000\236\003D\002\169\006\030\002\217\003P\006\185\006\177\006\189\003[\003,\002\196\003F\007\021\000Z\002\200\000\236\000\217\000\246\003-\000Z\000Z\006\187\006G\003\016\007(\003H\000W\002\007\000Z\000\243\002J\003D\003I\006\185\003S\003L\003O\001\177\000Z\006\208\003Y\002\155\001\197\003K\006\000\000\241\002\n\000\211\002\157\006\187\006\188\002\016\000\225\000\217\000\235\006H\002\019\007\130\002\201\003P\003F\006\211\003\012\003\r\002;\006I\003[\006J\005\197\001\130\006\212\006\000\003\016\002\202\003H\000W\002\030\003,\006\188\002\164\002\028\001\028\004\213\002\236\003L\003O\003-\003I\000\225\003S\000\225\003F\007%\000\251\006g\003Y\000Z\001\197\003K\003D\006\213\006\002\002$\003\016\000W\003H\000W\000Z\003P\005@\000\236\003\012\003\r\002;\000Z\003L\003O\006L\000\233\002\239\006\151\003[\006N\006X\004\211\002\242\003,\003\012\003\r\002;\001\177\0020\002k\006c\006\214\003-\003I\002\245\003S\003P\000\241\004\247\003,\006\215\003Y\000Z\001\197\003K\003D\000Z\006\134\003-\006d\000W\000\211\002\251\0023\004\244\002h\003F\000\217\000\235\006\216\003O\003D\002I\002R\003I\007\131\003S\003[\003\016\001\177\003H\000W\003Y\003\003\001\197\003K\002o\002\131\002}\002\210\003L\003O\000Z\006\218\002\128\002\136\001\177\000\211\000Z\000\211\003\b\002\135\006\219\000\217\000\235\000\217\000\235\006\221\003[\005e\000Z\003\012\003\r\002;\003P\003F\002\223\006\158\006\223\002\221\000W\004\202\000W\002\169\000\236\003\027\003,\003\016\000Z\003H\000W\003F\002\196\004\174\002\210\003-\002\200\006\224\000\217\003L\003O\004\243\003I\003\016\003S\003H\000W\002\154\003D\000Z\003Y\005k\001\197\003K\001x\003L\003O\003\012\003\r\002;\000\236\002\211\000\236\003P\002\221\002\160\000Z\000W\005p\002\166\002\210\002\179\003,\002\169\002\181\004\186\003[\002\192\002\199\003P\002\201\003-\002\196\002\222\003\024\003&\002\200\004\210\000\217\003\139\001~\003I\000\241\003S\003D\002\202\0041\003\025\001\177\003Y\002\221\001\197\003K\000W\002\210\004\175\004\181\003I\003F\003S\004\196\004\199\003\012\003\r\002;\003Y\004\203\001\197\003K\005\016\003\016\005-\003H\000W\005`\003[\004\162\003,\002\222\001\177\002\201\004\176\003L\003O\002\221\000\225\003-\000W\001\001\001\177\000S\003[\004\207\000W\000X\002\202\005g\005m\005z\003D\000Z\000Z\004\158\000\225\003F\000Z\003P\002\235\002\238\003\012\003\r\002;\000Z\000\233\002\222\002\241\003\016\002\244\003H\000W\005u\000Z\000Z\001\177\003,\006\144\000Z\000Z\003L\003O\005\127\005\138\000Z\003-\003I\000Z\003S\000Z\001\177\004\173\000Z\002\250\003Y\005\142\001\197\003K\003D\000\225\002\222\005\145\0010\005\135\003P\005\152\006\146\003\012\003\r\002;\002\254\003F\003\002\005\143\000Z\000Z\000Z\003\007\003\023\005\156\003[\003%\003,\003\016\006\147\003H\000W\000\233\001\177\006\149\005\161\003-\003I\006\150\003S\003L\003O\001\177\0037\000\211\003Y\004\164\001\197\003K\003D\000\217\000\235\005\146\000Z\000Z\003\012\003\r\002;\001\177\003\012\003\r\002;\000\211\003F\003P\005\172\000Z\005\154\000\217\000\235\000\225\003[\000Z\0016\003,\003\016\000Z\003H\000W\004\t\003\012\003\r\002;\003-\003\188\005\191\001\177\003L\003O\004\149\000Z\003\187\003I\005\196\003S\003,\003D\005\201\000\233\005\211\003Y\000Z\001\197\003K\003-\005\158\000\211\000\236\005\217\003F\004\143\003P\000\217\000\235\005\165\000\225\005\228\003D\006)\003\143\005\239\003\016\001\177\003H\000W\000\236\003[\003\180\004<\004K\005\182\000Z\006\001\003L\003O\004N\004W\000\241\004b\003I\005\243\003S\001\177\000\233\004m\006\b\006\024\003Y\001\177\001\197\003K\000Z\003\015\004u\001\177\004x\003F\003P\005\186\000Z\003\012\003\r\002;\000Z\003\016\000Z\003H\000W\003\016\000\236\003H\000W\000\211\003[\000Z\003,\004\160\003F\000\217\000\235\003L\003O\000Z\002\210\003-\003I\000Z\004\166\006\"\003\016\004\132\003H\000W\003Y\005\237\001\197\003K\003D\000Z\000\241\002\210\003L\003O\004\011\003P\004\180\000Z\003\012\003\r\002;\004\184\000Z\000Z\002\221\006\r\004\182\000W\000\211\002\210\003[\006\017\001\177\003,\000\217\000\235\003P\0069\004\188\003I\002\210\002\221\003-\003I\000W\003S\000\236\003J\004r\001\197\003K\003Y\006;\001\197\003K\003D\005{\004\195\004\198\002\221\004\204\001\177\000W\006\208\003I\000Z\003S\006\244\003F\004\214\002\221\006P\003Y\000W\001\197\003K\000\241\003[\001\177\006Z\003\016\006\209\003H\000W\001\177\006\211\004\219\002\210\002\222\005\018\005\022\000\236\003L\003O\006\212\003\012\003\r\002;\003[\006k\006r\005(\006u\005.\006A\002\222\006\175\001\177\006z\0052\003,\003\012\003\r\002;\007\028\003F\003P\002\221\000Z\003-\000W\000\241\006\161\002\222\006\213\004g\003,\003\016\006\127\003H\000W\001\177\003D\006M\002\222\003-\005N\000Z\005f\003L\003O\004a\001\177\006\157\003I\000Z\003S\006\133\003D\006\141\006U\006\208\003Y\005_\001\197\003K\006`\005a\006\214\001\177\003\012\003\r\002;\003P\001\177\000Z\000Z\006\215\000Z\006\209\005d\006\180\000Z\006\211\000Z\003,\001\177\005s\003[\006w\005i\002\222\006\212\005r\003-\005n\006\216\003O\000Z\005q\004\022\003I\003F\003S\000Z\006\217\006\200\003D\005y\003Y\006\243\001\197\003K\006\130\003\016\005~\003H\000W\003F\000Z\006\218\005\134\006\213\000Z\006\164\000Z\003L\003O\001\177\006\219\003\016\001\177\003H\000W\006\221\003[\005\133\003\012\003\r\002;\007\027\006\174\003L\003O\001\177\006\223\006\178\000Z\005\137\001\177\003P\001\177\003,\003\012\003\r\002;\006\214\001\177\006\182\000\225\001\177\003-\000\226\001\177\006\224\006\215\003P\003F\003,\001\007\005\144\004\014\000Z\005\155\003D\001\177\000Z\003-\003I\003\016\003S\003H\000W\003B\006\216\003O\003Y\000\233\001\197\003K\003D\003L\003O\006\228\003I\005\151\003S\001\177\005\160\005\179\006\186\005\167\003Y\006\198\001\197\003K\000Z\005\178\006\218\005\173\005\177\005\190\003[\005\195\006!\003P\006\205\006\219\003\012\003\r\002;\006\220\006\221\006\227\005\200\005\203\005\207\005\215\003[\006\247\005\222\000\246\007\n\006\223\003F\007\133\005\233\006 \006\025\006\026\006\031\006#\007\024\003I\006$\003S\003\016\007\144\003H\000W\003F\003Y\006\224\001\197\003K\003\012\003\r\002;\003L\003O\006C\000\211\003\016\006<\003H\000W\006=\000\217\000\235\007\149\003,\003\012\003\r\002;\003L\003O\006B\003[\006W\003-\006S\002\169\003P\004\253\006T\003N\003,\006V\006b\006_\002\196\006a\003D\006j\002\200\003-\000\217\006l\003P\006m\006s\003R\006\128\006\152\006\162\006\207\006\201\006\202\003D\006\206\003I\006\222\003\201\006\255\007\t\003\015\007\r\001\019\003Y\007\026\001\197\003K\007#\007w\000\236\000\000\003I\003\016\003S\003H\000W\000\000\000\000\000\000\003Y\000\000\001\197\003K\002\201\000\000\000\000\000\000\000\000\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\000\000\003F\002\202\000\241\000\000\000\000\001\020\000\000\000\225\003[\000\000\000\244\003,\003\016\000\000\003H\000W\003F\000\245\000\000\000\000\003-\000\000\000\000\000\000\003L\003O\003a\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\233\003\012\003\r\002;\003I\003L\003O\000\000\000\000\000\000\000\000\000\000\003J\003P\001\197\003K\003,\000\000\003\012\003\r\002;\002\169\000\000\005\000\000\000\003-\000\000\000\000\000\000\003P\002\196\003`r\002;\000\000\000\000\003P\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003F\003,\003\012\003\r\002;\000\000\000\000\003L\003O\000\000\003-\000\000\003\016\000\000\003H\000W\003\152\003,\000\000\003I\000\000\003S\000\236\003D\003L\003O\003-\003Y\000\000\001\197\003K\003P\003\155\000\000\000\000\000\000\000\000\000\000\000\000\003D\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\003P\000\000\000\000\000\000\000\241\003[\000\000\000\000\000\000\003,\000\000\003I\000\000\003S\000\000\000\000\000\000\000\000\003-\003Y\000\000\001\197\003K\000\000\003\161\000\000\000\000\000\000\003I\000\000\003S\003D\002:\002;\000\000\003F\003Y\000\000\001\197\003K\000\225\000\000\000\000\0060\000\000\003[\000\000\003\016\000\000\003H\000W\003F\000\000\002<\002=\000\000\002>\002?\000\000\003L\003O\000\000\003[\003\016\000\000\003H\000W\000\000\000\233\000\000\000\000\003\012\003\rr\002;\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\211\003,\000\000\003\012\003\r\002;\000\217\000\235\003L\003O\003-\000\000\000\000\006\214\000\000\000\000\003\171\003[\003,\000\000\002U\000\236\006\215\003D\002\201\000\000\000\000\003-\002i\000\000\001\197\002B\003P\003\191\000\000\000\000\000\000\000\000\000\000\002\202\003D\006\216\003O\003\012\003\r\002;\007\142\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\000\001\019\000\000\003,\000\000\003I\000\000\003S\000\236\000\000\006\218\000\000\003-\003Y\000\000\001\197\003K\000\000\000\000\006\219\000\000\000\000\003\199\000\000\006\221\003D\000\000\000\000\003F\000\000\000\000\003\012\003\r\002;\000\000\006\223\000\000\000\000\000\241\003[\003\016\001=\003H\000W\000\000\003F\003,\000\000\000\000\000\000\000\000\000\000\003L\003O\006\224\003-\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003\203\000\000\000\000\003D\003L\003O\003\012\003\r\002;\000\000\000\000\003P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\003,\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\003-\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\003I\003\205\003S\000\000\003D\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\003P\000\000\000\000\006\208\000\000\003[\000\000\003\016\000\000\003H\000W\000\000\000\000\000S\000\000\000\000\000W\000X\000\000\003L\003O\006\209\003[\000\000\000\000\006\211\000\000\000\000\003I\000\000\003\201\003\012\003\r\002;\006\212\003F\003Y\000\000\001\197\003K\000\000\000\000\000\000\003P\000\000\000\000\003,\003\016\006\144\003H\000W\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\003L\003O\000\000\003[\000\000\006\213\003\208\003,\000\000\003D\000\000\000\000\003I\000\000\003\201\000\000\003-\000\000\006\146\000\000\003Y\000\000\001\197\003K\003P\002\169\003\215\005c\000\000\003D\000\225\000\000\000\000\006-\002\196\000\000\006\147\000\000\002\200\006\214\000\217\006\149\000\000\000\000\000\000\006\160\003[\000\000\006\215\000\000\000\000\000\000\003I\000\000\003\201\000\000\000\000\000\000\000\233\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\006\216\003O\003F\000\000\000\000\003\012\003\r\002;\000\000\006\248\000\000\000\000\000\000\000\000\003\016\002\201\003H\000W\000\000\003[\003,\000\000\003F\000\000\006\218\000\000\003L\003O\000\000\003-\002\202\000\000\000\000\006\219\003\016\006/\003H\000W\006\221\003\220\000\000\000\000\003D\000\000\000\000\000\000\003L\003O\000\000\006\223\003P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\002\169\000\211\005\169\000\000\006\224\000\000\003P\000\217\0062\002\196\000\000\003,\000\000\002\200\003I\000\217\003\201\000\000\000\000\000\000\003-\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\003\225\000\000\000\000\003D\003I\000\000\003\201\000\225\003F\000\000\006-\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\002\201\000\000\000\000\000\000\000\000\003L\003O\0063\000\233\000\000\000S\003[\003,\000W\000X\002\202\003\012\003\r\002;\000\000\000\000\003-\005\254\000\000\0067\000\000\0065\003\231\000\000\003P\000\000\003,\000\000\000\000\003D\000\000\003F\000\241\000\000\000\000\003-\000\000\000\000\000\000\000\000\006\144\003\236\000\000\003\016\000\000\003H\000W\006/\003D\000\000\000\000\000\000\003I\000\000\003\201\003L\003O\003\012\003\r\002;\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\006\146\000\000\000\000\003,\000\000\000\000\000\000\000\000\000\211\000\000\003P\000\000\003-\000\000\000\217\0062\000\000\003[\006\147\000\000\003F\000\000\003\248\006\149\000\000\003D\000\000\006\176\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\003I\003F\003\201\000\000\000\000\000\000\003L\003O\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\002\169\003P\005\175\003,\0063\003[\000\000\000\000\000\000\002\196\000\000\000\000\003-\002\200\000\000\000\217\000\000\000\000\003F\005\254\003P\0066\003\253\0065\000\000\003D\000\000\000\000\000\000\003I\003\016\003S\003H\000W\000\241\000\000\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\000\000\003\012\003\r\002;\003Y\002\201\001\197\003K\000\000\000\000\000\000\003[\000\000\002\169\003P\005\184\003,\003\012\003\r\002;\002\202\000\000\002\196\000\000\000\000\003-\002\200\000\000\000\217\000\000\003[\000\000\003,\003F\000\000\004\002\000\000\000\000\003D\000\000\000\000\003-\003I\000\000\003\201\003\016\000\000\003H\000W\000\000\003Y\004\017\001\197\003K\003D\000\000\000\000\003L\003O\003\012\003\r\002;\000\000\000\000\002\169\000\000\005\192\002:\002;\000\000\002\201\000\000\000\000\002\196\003,\000\000\003[\002\200\000\000\000\217\000\000\003P\000\000\003-\000\000\002\202\000\000\000\000\002<\002K\000\000\002>\002?\004\020\000\000\000\000\003D\000\000\003F\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\003I\003\016\003\201\003H\000W\003F\003,\000\000\003Y\000\000\001\197\003K\002\201\003L\003O\003-\000\000\003\016\000\000\003H\000W\004\025\000\000\002L\000\000\002M\002\144\002\202\003D\003L\003O\000\000\000\000\000\000\003[\000\000\000\000\003P\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\225\003F\000\142\000\252\000\000\000\000\000\000\003P\002S\003,\000\253\000\000\000\000\003\016\000\000\003H\000W\000\000\003-\003I\002D\003\201\000\000\000W\004\028\003L\003O\003Y\000\233\001\197\003K\003D\000\000\000\000\000\000\003I\000\000\003\201\000\000\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\000\000\000\000\003P\000\000\000\000\000\000\003[\003\016\000\000\003H\000W\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\003L\003O\000\000\003[\000\000\000\000\000\246\000\000\003,\000\000\000\000\003I\000\000\003\201\000\000\000\000\000\000\003-\002U\003Y\000\000\001\197\003K\000\000\003P\003F\002V\004%\001\197\002B\003D\000\000\000\000\003\012\003\r\002;\000\211\003\016\000\000\003H\000W\000\000\000\217\000\235\000\000\003[\000\000\000\000\003,\003L\003O\000\000\003I\000\000\003S\000\225\000\000\003-\001\002\000\000\003Y\000\000\001\197\003K\000\000\001\003\000\000\004A\000\000\000\000\003D\000\000\000\000\003P\000\000\000\000\003\012\003\r\002;\002\169\000\000\007\031\000\000\000\233\000\000\000\000\003[\000\000\002\196\000\000\003F\003,\002\200\000\000\000\217\000\000\000\000\000\000\000\000\000\236\003-\003I\003\016\003S\003H\000W\004c\000\000\000\000\003Y\000\000\001\197\003K\003D\003L\003O\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\241\003F\003,\003\012\003\r\002;\003[\002\201\000\000\003P\000\000\003-\000\000\003\016\000\000\003H\000W\004e\003,\000\000\000\000\000\000\002\202\000\000\003D\003L\003O\003-\000\211\000\000\000\000\000\000\000\000\004i\000\217\000\235\000\000\003I\000\000\004'\003D\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\003P\000\000\000\000\003\012\003\r\002;\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003,\003L\003O\000\000\003[\000\000\000\000\000\000\000\000\003-\003I\000\000\004C\000\000\000\000\004l\000\000\003F\003Y\000\000\001\197\003K\003D\000\000\000\236\003P\000\000\000\000\000\000\003\016\000\000\003H\000W\003F\000\000\003\012\003\r\002;\000\000\000\000\000\000\003L\003O\000\000\003[\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003I\000\241\003S\000\000\003L\003O\004\154\000\000\003Y\000\000\001\197\003K\003P\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\003F\003,\003\012\003\r\002;\003[\000\000\000\000\000\000\000\000\003-\003I\003\016\003S\003H\000W\004n\003,\000\000\003Y\000\000\001\197\003K\003D\003L\003O\003-\003I\000\000\003S\000\000\000\000\004p\000\000\000\000\003Y\000\000\001\197\003K\003D\000\000\000\000\003\012\003\r\002;\003[\000\000\000\000\003P\000\000\003\015\000\000\000\000\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\003[\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\004z\000\000\000\000\000\000\003I\000\000\003S\003D\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\000\000\000\000\000\000\003\012\003\r\002;\000\000\003\016\000\000\003H\000W\003F\000\000\000\000\000\000\000\000\000\000\000\000\003,\003L\003O\000\000\003[\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\004\134\000\000\003L\003O\000\000\003I\000\000\003D\000\000\000\000\003P\000\000\000\000\003J\000\000\001\197\003K\000\000\003F\000\000\003\012\003\r\002;\000\000\000\000\000S\003P\000\000\000W\000X\003\016\000\000\003H\000W\000\000\003,\000\000\000\000\003I\000\000\003S\000\000\003L\003O\003-\000\000\003Y\000\000\001\197\003K\004\137\000\000\000\000\000\000\003I\000\000\003S\003D\000\000\000\000\006\144\000\000\003Y\000\000\001\197\003K\003P\003F\000\000\003\012\003\r\002;\003[\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003,\000\000\000\000\000\000\003[\006\146\000\000\003L\003O\003-\003I\000\000\003S\000\000\000\000\004\178\000\000\000\000\003Y\000\000\001\197\003K\003D\006\147\000\000\003\012\003\r\002;\006\149\000\000\000\000\003P\006\194\003F\000\000\000\000\000\000\000\000\000\000\000\000\003,\003\012\003\rr\002;\000\000\000\000\000\000\003P\000\000\000\000\000\000\003\016\000\246\003H\000W\003F\003,\000\000\000\000\000\000\003[\000\000\000\000\003L\003O\003-\000\000\003\016\000\000\003H\000W\004\222\000\000\000\000\000\246\003I\000\000\003S\003D\003L\003O\000\000\000\211\003Y\000\000\001\197\003K\003P\000\217\000\235\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\211\003,\003\012\003\r\002;\003[\000\217\000\235\000\000\000\000\003-\003I\000\000\003S\000\000\000\000\004\225\003,\000\000\003Y\000\000\001\197\003K\003D\000\000\000\000\003-\003I\000\000\003S\000\000\000\000\004\235\000\000\003F\003Y\000\000\001\197\003K\003D\000\000\000\236\003\012\003\r\002;\003[\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\000\000\000\001\019\003,\003L\003O\000\000\003[\000\000\000\236\000\000\000\000\003-\001U\000\000\000\000\000\000\000\241\004\238\000\000\000\000\000\000\000\000\000\000\000\000\003D\000\000\000\000\003P\003F\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\241\000\000\003\016\001\029\003H\000W\003F\003,\000\000\000\000\000\000\000\000\000\000\000\000\003L\003O\003-\003I\003\016\003S\003H\000W\005\021\000\000\000\000\003Y\000\000\001\197\003K\003D\003L\003O\003\012\003\r\002;\000\000\000\000\000\000\003P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\003,\003\012\003\r\002;\003[\000\000\000\000\003P\000\000\003-\000\000\003\016\000\000\003H\000W\005\024\003,\000\000\000\000\003I\000\000\003S\003D\003L\003O\003-\000\000\003Y\000\000\001\197\003K\005'\000\000\000\000\000\000\003I\000\000\003S\003D\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\003P\000\000\000\000\003\012\003\r\002;\003[\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003,\003L\003O\000\000\003[\000\000\000\000\000\000\000\000\003-\003I\000\000\003S\000\000\000\000\005*\000\000\003F\003Y\000\000\001\197\003K\003D\000\000\000\000\003P\000\000\000\000\000\000\003\016\000\000\003H\000W\003F\000\000\003\012\003\r\002;\000\000\000\000\000\000\003L\003O\000\000\003[\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\003L\003O\004\151\000\000\003Y\000\000\001\197\003K\003P\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\003F\003,\003\012\003\r\002;\003[\000\000\000\000\000\000\000\000\003-\003I\003\016\003S\003H\000W\0056\003,\000\000\003Y\000\000\001\197\003K\003D\003L\003O\003-\003I\000\000\003S\000\000\000\000\005<\000\000\000\000\003Y\000\000\001\197\003K\003D\000\000\000\000\003\012\003\r\002;\003[\000\000\000\000\003P\000\000\003\015\000\000\000\000\000\000\000\000\000\000\000\000\003,\000\000\000\000\000\000\003[\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\005R\000\000\000\000\000\000\003I\000\000\003S\003D\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\000\000\000\000\000\000\003\012\003\r\002;\000\000\003\016\000\000\003H\000W\003F\000\000\000\000\000\000\000\000\000\000\000\000\003,\003L\003O\000\000\003[\003\016\000\000\003H\000W\003-\000\000\000\000\000\000\000\000\000\000\005U\000\000\003L\003O\000\000\003I\000\000\003D\000\000\000\000\003P\000\000\000\000\003J\000\000\001\197\003K\000\000\003F\000\000\003\012\003\rr\002;\000\000\000\000\000\000\001\131\000\000\003[\003\016\000\000\003H\000W\000\000\000\000\003,\000\000\000\000\000\000\000\000\000\000\003L\003O\003I\003-\003S\000\000\000\000\000\000\000\000\006v\003Y\000\246\001\197\003K\000\000\000\000\003D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\006^\000\000\000\000\000\000\000\000\000\000\002C\000\000\000\000\000\000\000\000\003[\000\000\000\000\000\225\000\000\000\211\000\226\002D\000\000\000\000\000W\000\217\000\235\001\007\000\000\000\000\003I\000\000\003S\000\000\000\000\004\226\004\227\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\233\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\003F\000\000\000\000\000\000\000\000\004\228\000\000\000\000\000\000\001\131\003[\000\000\003\016\000\000\003H\000W\001\134\001\135\000\000\000\000\003\014\001\019\000\000\000\000\003L\003O\000\000\000\000\000\236\000\000\000\000\002U\001\146\001\159\000\000\000\246\000\000\001\138\001\130\002i\000\000\001\197\002B\000\000\003\012\003\r\002;\000\000\003P\007\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\241\003,\000\000\001\029\000\000\000\000\000\000\000\211\000\000\000\000\003-\000\000\000\000\000\217\000\235\000\000\007,\000\000\003I\000\000\003S\000\000\000\000\003D\000\000\000\000\003Y\000\000\001\197\003K\003\012\003\r\002;\000\000\000\000\003\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003,\000\000\003\016\000\000\003H\000W\000\000\003[\000\000\003-\000\000\000\000\000\000\001\134\001\135\007.\000\000\000\000\001\019\000\000\000\000\000\000\003D\002:\002;\000\236\000\000\000\000\000\000\001\146\001\159\000\000\000\000\000\000\001\138\001\130\000\000\000\000\003F\000\000\000\000\003\012\003\r\002;\002<\002K\000\000\002>\002?\000\000\003\016\000\000\003H\000W\002r\000\241\003,\000\000\001\029\000\000\000\000\000\000\003L\003O\000\000\003-\003I\000\000\003\012\003\r\002;\0071\000\000\000\000\003J\000\000\001\197\003K\003D\000\000\000\000\000\000\003F\003,\000\000\000\000\003P\000\000\002L\000\000\002M\002e\003-\000\000\003\016\000\000\003H\000W\0076\000\000\000\000\000\000\000\000\000\000\000\000\003D\003L\003O\000\000\000\000\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\000\000\002S\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\003P\002D\000\000\000\000\000W\000\000\000\225\000\000\003F\000\226\000\000\000\000\000\000\000\000\000\000\000\000\001\007\000\000\003[\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003I\000\000\003S\000\000\003L\003O\000\233\003F\003Y\000\000\001\197\003K\003\012\003\r\002;\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\001\131\000\000\000\000\003,\003P\000\000\000\000\003L\003O\000\000\003[\000\000\003-\002U\000\000\000\000\000\000\000\000\0078\000\000\000\000\002V\000\000\001\197\002B\003D\000\246\000\000\000\000\000\000\000\000\003P\003I\000\000\003S\000\000\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\211\000\000\000\000\003I\000\000\003S\000\217\000\235\000\000\000\000\003[\003Y\003,\001\197\003K\000\000\000\000\000\000\000\000\000\000\000\000\003-\000\000\000\000\003\012\003\r\002;\000\000\000\000\003F\000\000\000\000\000\000\000\000\003D\000\000\000\000\003[\000\000\003,\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\003-\000\000\000\000\001\134\001\135\003L\003O\000\000\001\019\000\000\000\000\000\000\000\000\003D\000\000\000\236\003\012\003\r\002;\001\136\001\137\000\000\000\000\000\000\001\138\001\130\000\000\000\000\000\000\003P\000\000\003,\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\241\003F\003,\001\029\000\000\000\000\000\000\000\000\003D\000\000\000\000\003-\003I\003\016\003S\003H\000W\000\000\000\000\000\000\003Y\000\000\001\197\003K\003D\003L\003O\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\003\016\000\000\003H\000W\000\000\000\000\003[\000\000\000\000\003P\000\000\003,\003L\003O\003\012\003\r\002;\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\003,\000\000\000\000\000\000\003D\000\000\000\000\003P\003I\003-\004\250\003\016\000\000\003H\000W\003F\003Y\000\000\001\197\003K\000\000\000\000\003D\003L\003O\000\000\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\003I\000\000\004\242\000\000\003L\003O\000\000\003[\003Y\000\000\001\197\003K\003P\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\003F\003,\003\012\003\rr\000\000\000\000\000\000\000\000\003F\003Y\000\000\001\197\003K\000\000\000\000\000\225\000\000\000\000\0017\003I\003\016\003\189\003H\000W\003F\0018\000\000\003Y\000\000\001\197\003K\000\000\003L\003O\000\000\003[\003\016\000\000\003H\000W\003\012\003\r\002;\000\233\003\012\003\r\002;\000\000\003L\003O\000\000\000\000\000\000\003[\000\000\003,\003P\000\000\000\000\003,\000\000\003\012\003\rr\002;\000\000\000\000\003\016\000\000\003H\000W\003\016\000\000\003H\000W\000\000\003F\003,\000\000\003L\003O\000\000\000\000\003L\003O\000\000\003-\000\000\003\016\000\000\003H\000W\000\000\003\012\003\r\002;\000\000\000\000\000\236\003D\003L\003O\000\000\003P\000\000\000\000\000\000\003P\003,\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\241\000\000\003D\003I\000\000\003\\\000\000\003I\003-\003c\000\000\003Y\000\000\001\197\003K\003Y\000\000\001\197\003K\000\000\000\000\003D\000\000\000\000\003I\000\225\003e\000\000\006-\000\000\000\000\003F\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\003[\000\000\003\016\000\000\003H\000W\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\000\003L\003O\000\000\003[\000\000\000\000\000\000\003F\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003P\003,\003F\000\000\000\000\000\000\000\000\003L\003O\000\000\003-\000\000\000\000\000\000\003\016\000\000\003H\000W\006/\000\000\000\000\000\000\000\000\003D\000\000\000\000\003L\003O\003I\000\000\003g\003P\000\000\000\000\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\211\000\000\003P\000\000\000\000\000\000\000\217\0062\000\000\003,\000\000\003I\000\000\003i\003[\000\000\000\000\000\000\003-\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003I\003D\003k\000\000\000\000\003F\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\003[\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\0063\003[\000\000\003,\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\005\254\000\000\0064\000\000\0065\003P\000\000\000\000\003,\000\000\003D\000\000\000\000\003F\000\000\000\241\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\000\000\003m\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\003F\003o\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\003I\003F\003q\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\000\000\003s\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\003F\003u\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\003I\003F\003w\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\000\000\003y\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\003F\003{\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\003I\003F\003}\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\000\000\003\127\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\003F\003\129\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\003I\003F\003\131\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\000\000\003\133\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\003F\003\135\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\003I\003F\003\137\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\000\000\003\194\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\003F\003\218\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\003I\003F\003\223\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\000\000\003\228\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\003F\003\234\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\003I\003F\003\239\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\000\000\003\241\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\003F\003\244\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\003I\003F\003\251\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\000\000\004\000\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\003F\004\005\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\000\000\003\012\003\r\002;\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\000\000\003,\003D\000\000\000\000\003I\003F\004\b\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\003I\000\000\004+\000\000\000\000\003L\003O\000\000\003Y\000\000\001\197\003K\000\000\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003[\000\000\000\000\003F\000\000\000\000\000\000\003-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\000\003D\000\000\000\000\003I\003F\0044\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\006D\003H\000W\003\012\003\r\002;\000\000\000\000\000\000\000\000\000\000\003L\003O\000\000\003P\000\000\000\000\000\000\003,\000\000\003[\000\000\000\000\003\012\003\r\002;\000\000\003-\000\000\006E\000\000\006F\000\000\000\000\000\000\003P\000\000\000\000\003,\000\000\003D\000\000\003I\003F\0046\000\000\000\000\003-\000\000\000\000\003Y\000\000\001\197\003K\000\000\003\016\000\000\003H\000W\000\000\003D\006G\000\000\003I\000\000\004:\000\000\003L\003O\000\000\000\000\003Y\000\000\001\197\003K\000\000\003[\002tc\002S\000\000\000\000\003I\000\000\004\145\002<\002K\000\000\002>\002?\003Y\002D\001\197\003K\000W\000\000\000\000\006db\000\233\000\211\000\000\000\000\001\b\000\233\001&\000\217\000\235\000\000\000\000\001$\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\002V\000\000\001\197\002B\002S\000\000\000\000\002V\000\000\001\197\002B\000\225\000\000\000\000\000\226\000\000\002D\001\006\000\000\000W\000\000\001\007\000\000\000\000\000\246\002U\000\000\004\142\000\000\000\246\000\000\000\000\000\000\002V\000\000\001\197\002B\001\019\001\b\000\233\000\225\001\r\000\000\006-\000\236\001\t\001\r\000\000\005\252\000\000\000\000\000\000\000\000\000\000\000\211\000\000\000\000\000\000\000\000\000\211\000\217\000\235\000\000\000\000\000\000\000\217\000\235\000\000\000\233\000\225\000\000\000\000\000\226\000\000\000\241\001\006\000\000\001\029\000\000\001\007\002U\000\000\000\000\000\246\000\000\000\000\000\000\000\000\002V\000\000\001\197\002B\000\000\000\000\000\000\000\000\001\b\000\233\000\000\000\000\001\r\000\000\000\000\001\"\000\000\000\000\000\000\000\000\003\140\002;\001\019\000\000\006/\000\211\000\000\001\019\000\000\000\236\000\000\000\217\000\235\001\027\000\236\000\000\000\000\000\000\001\027\000\000\000\000\003\164\002K\000\000\002>\002?\000\000\002:\002;\000\000\000\000\000\000\000\000\000\246\000\211\000\000\000\000\000\000\000\000\000\241\000\217\0062\001\029\000\000\000\241\000\000\000\000\001\029\002<\002K\001\r\002>\002?\002:\002;\000\000\000\000\000\000\002c\000\000\000\000\001\019\000\000\000\211\003\169\003\181\003\182\000\000\000\236\000\217\000\235\000\000\001\027\000\000\002<\002K\000\000\002>\002?\000\000\000\000\000\000\000\000\000\000\002g\002:\002;\000\000\000\000\000\000\000\000\000\000\002L\000\000\002M\002e\002S\0063\000\241\000\000\000\000\001\029\000\000\000\000\000\000\000\000\002<\002K\002D\002>\002?\000W\005\254\000\000\006@\000\000\0065\000\000\002L\001\019\002M\002e\000\000\002S\000\000\000\000\000\236\000\241\000\000\000\000\001\027\000\000\000\000\002:\002;\002D\000\000\000\000\000W\000\000\000\000\000\000\000\000\000\000\000\000\004\240\000\000\000\000\000\000\002S\002L\000\000\002M\002y\002<\002K\000\241\002>\002?\001\029\000\000\002D\000\000\000\000\000W\000\000\002:\002;\000\000\000\000\000\000\000\000\002U\000\000\000\000\003\159\000\000\000\000\000\000\000\000\002V\002S\001\197\002B\003\162\000\000\000\000\002<\003\157\000\000\002>\002?\000\000\002D\000\000\000\000\000W\000\000\002L\002U\002M\002y|i\000\000\001\197\002B\002:\002;\000\000\000\000\000\000\000\000\000\000\002:\002;\004\223\000\000\000\000\003\169\003\181\003\182\002C\000\000\000\000\000\000\000\000\000\000\002<\003\157\000\000\002>\002?\003\185\002D\002<\002K\000W\002>\002?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\002S\002:\002;\000\000\002V\000\000\001\197\002B\000\000\002U\000\000\000\000\002D\000\000\000\000\000W\000\000\002V\000\000\001\197\002B\003\158\002<\002K\000\000\002>\002?\000\000\002L\000\000\002M\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\163\000\000\000\000\000\000\000\000\002U\000\000\004\030\000\000\000\000\002C\000\000\000\000\002iirl\000\236\007n\000\000\000\000\006,\000\000\002D\000\225\000\000\000W\000\226\000\246\000\211\001\006\000\000\000\000\000\000\001\007\000\217\0062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002S\001\r\000\000\000\241\000\000\000\000\001\029\001\012\000\233\002:\002;\000\000\002D\000\000\000\211\000W\006\163\000\000\004\236\000\000\000\217\000\235\000\000\000\000\000\000\002:\002;\000\000\000\000\000\000\002<\003\157\000\000\002>\002?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002U\000\000\000\000\002<\002K\0063\002>\002?\002V\000\246\001\197\002B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\254\000\000\006\168\000\000\0065\000\000\001\r\001\019\000\000\000\000\000\000\002:\002;\002U\000\236\000\241\000\000\000\000\001\027\000\211\000\000\002V\000\000\001\197\002B\000\217\000\235\002L\000\000\002M\005\b\000\000\002<\002K\000\000\002>\002?\000\000\000\000\000\000\000\000\000\000\002C\000\000\000\241\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\000\000\002D\000\000\000\000\000W\002S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\239\000\000\002D\000\000\000\000\000W\000\000\001\019\002L\000\000\002M\002j\000\000\000\000\000\236\000\000\002:\002;\001\027\000\000\000\000\002:\002;\000\000\004\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002<\002K\002S\002>\002?\002<\002K\000\241\002>\002?\001\029\000\000\000\000\002U\002D\000\000\000\000\000W\000\000\000\000\000\000\002irtr\002;\002U\000\000\000\000\002D\000\000\000\000\000W\000\000\002ii\006\221\001\197\002B\002:\002;\000\000\000\000\000\000\000\000\000\000\000\000\006\223\000\000\000\000\000\000\000\000\002:\002;\000\000\000\000\000\000\005>\000\000\004{\002<\003\157\000\000\002>\002?\000\000\006\224\000\000\004{\000\000\005V\000\000\000\225\002<\003\157\000\226\002>\002?\000\000\004\129\000\225\000\000\001\007\000\226\000\000\002U\002C\000\000\004}\000\000\001\007\002C\000\000\002i\002U\001\197\002B\000\000\002D\000\000\000\233\000W\002i\002D\001\197\002B\000W\000\000\000\233\000\000\000\000\0057\000\000\000\000\000\000\000\000\000\000\000\000\000\225\0057\000\000\000\226\000\000\000\000\000\000\000\000\005S\000\000\001\007\000\000\000\000\000\000\000\000\000\000\005\236\002C\004{\000\000\000\000\000\000\000\000\004{\000\000\000\000\000\246\000\000\000\233\002D\002C\000\000\000W\000\000\000\246\000\000\000\000\000\000\004|\0019\000\000\000\000\002D\004\131\002U\000W\000\000\000\000\000\000\002U\000\000\000\000\002i\001>\001\197\002B\000\211\002i\000\000\001\197\002B\000\000\000\217\000\235\000\211\002:\002;\003\158\000\000\000\000\000\217\000\235\000\246\000\000\002:\002;\000\000\000\000\000\000\000\000\003\158\000\000\000\000\000\000\000\000\000\000\002<\003\157\000\000\002>\002?\000\000\000\000\002U\000\000\002<\003\157\000\000\002>\002?\000\000\002i\000\211\001\197\002B\000\000\002U\000\000\000\217\000\235\000\000\000\000\001\019\000\000\002ib\000\000\000\000\000\000\000\000\000\000\000\000\002D\000\000\000\000\000W\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\246\000\000\000\000\000\000\002i\002U\001\197\002B\002C\000\000\000\000\000\000\000\000\002i\000\000\001\197\002B\002:\002;\000\000\002D\006\197\000\000\000W\000\000\000\000\006\142\000\000\000\000\006\155\000\211\000\000\003\012\003\r\002;\002C\000\217\000\235\002<\003\157\000\000\002>\002?\000\225\000\000\000\225\000\226\002D\000\226\000\000\000W\000\000\002U\001\007\000\000\001\007\004\t\000\000\006\195\000\000\002i\000\000\001\197\002B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\000\000\233\000\000\000\000\006\154\000\225\000\000\000\000\000\226\004\n\004\231\000\000\002U\006\195\001\019\001\007\000\000\000\000\000\000\000\000\002i\000\236\001\197\002B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\000\000\000\000\000\006\196\006\137\002U\000\000\002C\000\000\000\246\000\000\000\246\000\000\002i\000\000\001\197\002B\000\241\000\000\002D\001G\000\000\000W\003\015\000\000\000\000\000\000\000\000\000\000\000\000\006\204\000\000\000\000\000\000\000\000\003\016\000\000\003H\000W\000\211\000\000\000\211\000\000\000\246\000\000\000\217\000\235\000\217\000\235\000\000\000\000\003\012\003\r\002;\000\000\000\000\000\225\004\130\000\000\000\226\000\000\000\000\000\000\000\000\000\000\000\000\001\007\000\000\000\000\000\000\000\000\000\000\000\000\000\211\004\012\004\t\000\000\000\000\000\000\000\217\000\235\000\000\000\000\002U\000\233\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\001\197\002B\001\019\000\000\001\019\000\000\003I\006\148\000\000\000\236\000\000\000\236\000\000\0034\003J\006\tti{r\002;\000\000\000\000\000\217\000\235\000\246\000\233\001\019\000\000\000\000\000\000\000\000\000\000\000\241\000\236\000\000\001\029\000\000\005P\000\000\000\000\000\211\003'\000\000\000\000\000\000\000\000\000\217\000\235\000\000\000\000\000\000\000\000\000\225\000\000\000\211\000\226\000\246\000\000\000\000\000\000\000\217\000\235\001\007\000\241\000\000\000\000\001\029\000\000\000\000\000\246\000\000\000\000\001\019\000\000\000\000\000\000\003\012\003\rr\002;\000\000\000\241\000\000\000\236\001\029\000\000\000\000\005\251\000\211\001\019\003\012\003\r\002;\000\000\000\217\000\235\000\236\000\233\000\000\000\000\006\011\003=\000\000\003\012\003\r\002;\000\000\003\015\000\000\003\012\003\r
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4020 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+" )
# 1525 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4021 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "+." )
# 1550 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3544 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1575 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tyvar_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3547 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1622 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_tyvar_, _startpos_ty_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1631 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3549 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1637 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_binding) = let attrs2 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1685 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined2_ in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1694 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2784 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3902 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 1731 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3903 "src/ocaml/preprocess/parser_raw.mly"
                                 ( Lident _1 )
# 1756 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 3630 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 1795 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 1862 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 1872 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 1878 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3632 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1887 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3635 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_var _2 )
# 1920 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1929 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1935 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3637 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_any )
# 1961 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 1969 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 1975 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2006 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3682 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2012 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3640 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2017 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2026 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2032 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2070 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3684 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2076 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3640 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2081 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_ty_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2091 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2097 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2150 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2158 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2163 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3686 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2169 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3640 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_constr(tid, tys) )
# 2175 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2185 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2191 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3642 "src/ocaml/preprocess/parser_raw.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2231 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2240 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2246 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3644 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_object ([], Closed) )
# 2279 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2288 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2294 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2332 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3682 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 2338 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3648 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2343 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2353 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2359 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2404 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys = 
# 3684 "src/ocaml/preprocess/parser_raw.mly"
      ( [ty] )
# 2410 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3648 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2415 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_ty_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2425 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2431 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 2491 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2499 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2504 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3686 "src/ocaml/preprocess/parser_raw.mly"
      ( tys )
# 2510 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3648 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_class(cid, tys) )
# 2516 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2526 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2532 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3651 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2572 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2581 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2587 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2637 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2642 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3696 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2648 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3653 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2654 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2664 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2670 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _4 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2727 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2732 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3696 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2738 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3655 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2744 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2754 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2760 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2810 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2815 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3696 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2821 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3657 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2827 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2837 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2843 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3659 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant([], Open, None) )
# 2876 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2885 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2891 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 2941 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 2946 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3696 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 2952 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3661 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 2958 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 2968 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 2974 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let xs_inlined1 : (string list) = Obj.magic xs_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _5 =
              let xs = xs_inlined1 in
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 3039 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3044 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3724 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3050 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _3 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 3058 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3063 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3696 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3069 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3663 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 3075 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3085 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3091 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3665 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_extension _1 )
# 3117 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 3125 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3667 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 3131 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string Location.loc) = let _1 =
          let _1 = 
# 4089 "src/ocaml/preprocess/parser_raw.mly"
                     ( _1 )
# 3157 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1020 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3165 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 4091 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3171 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string Location.loc) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string Location.loc) = let _1 =
          let _1 = 
# 4090 "src/ocaml/preprocess/parser_raw.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3211 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1020 "src/ocaml/preprocess/parser_raw.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3220 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 4091 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3226 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 4095 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3275 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1959 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3300 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3341 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1961 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3350 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1963 "src/ocaml/preprocess/parser_raw.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3392 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3457 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined2_ in
        let _4 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3466 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3472 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1965 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3482 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 3554 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3563 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3569 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1965 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3579 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1969 "src/ocaml/preprocess/parser_raw.mly"
      ( Cl.attr _1 _2 )
# 3611 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let _2 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 3646 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 3651 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1972 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_apply(_1, _2) )
# 3657 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3667 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1975 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1974 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_extension _1 )
# 3699 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 3707 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1975 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 3713 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3768 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__1_inlined2_ in
        let _3 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3777 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 3783 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2030 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3792 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let self : (string Location.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.class_field) = let _6 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3854 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos__1_inlined3_ in
        let _3 =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3863 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 3869 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2030 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3878 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _1_inlined1 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3920 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2033 "src/ocaml/preprocess/parser_raw.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3932 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _3 =
          let _1 = _1_inlined1 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 3974 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__3_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2037 "src/ocaml/preprocess/parser_raw.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 3986 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4034 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4043 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2041 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4053 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4101 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4110 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2044 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4120 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4154 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2047 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_field) = let _1 =
          let _1 = 
# 2050 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcf_attribute _1 )
# 4191 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1041 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcf ~loc:_sloc _1 )
# 4199 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2051 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4205 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1939 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4237 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1942 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_4, _2) )
# 4284 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4293 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1945 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4299 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1944 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4332 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4341 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1945 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4347 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 2006 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4387 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_e_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4396 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2007 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4402 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 2006 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4435 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_e_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 4444 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2007 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4450 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3893 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _1 )
# 4475 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2015 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4517 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2017 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 4571 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 4580 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2018 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4586 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
        let _symbolstartpos = _endpos in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2020 "src/ocaml/preprocess/parser_raw.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4607 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2147 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 4646 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 2148 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ptyp_any )
# 4665 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 4674 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2149 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 4680 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4728 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4737 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2157 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4747 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = flags;
                  MenhirLib.EngineTypes.startp = _startpos_flags_;
                  MenhirLib.EngineTypes.endp = _endpos_flags_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4807 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4820 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined3_ in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let label =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4830 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4838 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2182 "src/ocaml/preprocess/parser_raw.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 4847 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4855 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2160 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4865 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 4925 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.class_type_field) = let _7 =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4938 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__1_inlined4_ in
        let _6 =
          let _1 = _1_inlined3 in
          
# 3510 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4947 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 4955 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 4963 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 4971 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2164 "src/ocaml/preprocess/parser_raw.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 4982 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5030 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__4_ = _endpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5039 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2168 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 5049 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_type_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5083 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2171 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type_field) = let _1 =
          let _1 = 
# 2174 "src/ocaml/preprocess/parser_raw.mly"
      ( Pctf_attribute _1 )
# 5120 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1039 "src/ocaml/preprocess/parser_raw.mly"
    ( mkctf ~loc:_sloc _1 )
# 5128 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2175 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5134 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5165 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys = 
# 2133 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5172 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2139 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5177 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2114 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5183 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5192 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2117 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5198 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5251 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let params =
                  let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 5260 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5265 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2135 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5271 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2139 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5277 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2114 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_constr (cid, tys) )
# 5283 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5293 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2117 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5299 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 = 
# 2116 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_extension _1 )
# 5325 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 5333 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2117 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5339 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _3 =
          let _1 = _1_inlined2 in
          let _2 =
            let _1 =
              let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 5396 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2153 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5401 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 985 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5410 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2143 "src/ocaml/preprocess/parser_raw.mly"
      ( Csig.mk _1 _2 )
# 5416 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5424 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2119 "src/ocaml/preprocess/parser_raw.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 2125 "src/ocaml/preprocess/parser_raw.mly"
      ( Cty.attr _1 _2 )
# 5465 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5530 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined2_ in
        let _4 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5539 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 5545 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5627 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5636 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 5642 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2127 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5652 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1979 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 5691 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let cid =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5722 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys = 
# 2133 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 5729 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2139 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5734 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1986 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5740 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5749 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1997 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5755 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 =
            let cid =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 5808 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let tys =
              let tys =
                let params =
                  let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 5817 "src/ocaml/preprocess/parser_raw.ml"
                   in
                  
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 5822 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 2135 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 5828 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2139 "src/ocaml/preprocess/parser_raw.mly"
    ( tys )
# 5834 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1986 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constr(cid, tys) )
# 5840 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5850 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1997 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5856 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.class_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _1 = 
# 1992 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcl_constraint(_2, _4) )
# 5910 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1043 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc _1 )
# 5919 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1997 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 5925 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _3 =
          let _1 = _1_inlined2 in
          let _2 =
            let _1 =
              let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 5982 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 2024 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 5987 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 984 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 5996 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2011 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 6002 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6010 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1999 "src/ocaml/preprocess/parser_raw.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 6019 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 2102 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6044 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 6092 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2108 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6097 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6107 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2109 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6113 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6162 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 6172 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2108 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6177 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6187 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2109 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _1 =
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 6234 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2108 "src/ocaml/preprocess/parser_raw.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6239 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_domain_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1037 "src/ocaml/preprocess/parser_raw.mly"
    ( mkcty ~loc:_sloc _1 )
# 6249 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2109 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 6255 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_type_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _8 : unit = Obj.magic _8 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 6340 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (string Location.loc option * Parsetree.class_type_declaration list) = let _1 =
          let a =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6358 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 6370 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6378 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2249 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6393 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 6399 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2237 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6405 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3890 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 6430 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : (Asttypes.direction_flag) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Extensions.comprehension_clause) = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6500 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 6506 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2550 "src/ocaml/preprocess/parser_raw.mly"
      ( Extensions.From_to(_2, _4, _6, _5) )
# 6512 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Extensions.comprehension_clause) = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 6568 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 6574 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2551 "src/ocaml/preprocess/parser_raw.mly"
                                  ( Extensions.In(_2, _4) )
# 6580 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6620 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6625 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2556 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 6631 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6685 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6690 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2558 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 6696 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6736 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6741 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2560 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 6747 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6801 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6806 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2562 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 6812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6852 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6857 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2556 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 6863 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6917 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6922 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2558 "src/ocaml/preprocess/parser_raw.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 6928 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 6968 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 6973 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2560 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 6979 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Extensions.comprehension list) = let _2 =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 7033 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7038 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2562 "src/ocaml/preprocess/parser_raw.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 7044 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 7065 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3770 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 7073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 748 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 7094 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3771 "src/ocaml/preprocess/parser_raw.mly"
                 ( Pconst_char _1 )
# 7102 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 7123 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3772 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (s, strloc, d) = _1 in Pconst_string (s, strloc, d) )
# 7131 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 768 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 7152 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3773 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 7160 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3845 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "[]" )
# 7192 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3846 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "()" )
# 7224 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3847 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "false" )
# 7249 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3848 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "true" )
# 7274 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 7295 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3851 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7303 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7342 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3852 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7347 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3853 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3856 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 7397 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _3 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7450 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3857 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Ldot(_1,_3) )
# 7455 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 7494 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3858 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 7499 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3859 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Lident _1 )
# 7524 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 2193 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3 )
# 7563 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let xs =
            let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 7590 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 253 "<standard.mly>"
    ( List.rev xs )
# 7595 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1128 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7601 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3375 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7607 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.constructor_arguments) = let tys =
          let xs =
            let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 7648 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 253 "<standard.mly>"
    ( List.rev xs )
# 7653 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1128 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7659 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3375 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_tuple tys )
# 7665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 3377 "src/ocaml/preprocess/parser_raw.mly"
      ( Pcstr_record _2 )
# 7704 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 3296 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 7729 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.constructor_declaration list) = let cs = 
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 7754 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3298 "src/ocaml/preprocess/parser_raw.mly"
      ( cs )
# 7759 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 = 
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7784 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 7789 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 3527 "src/ocaml/preprocess/parser_raw.mly"
      ( Typ.attr _1 _2 )
# 7821 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3951 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Upto )
# 7846 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3952 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Downto )
# 7871 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4167 "src/ocaml/preprocess/parser_raw.mly"
    ( expr_of_lwt_bindings ~loc:_loc _1 (merloc _endpos__2_ _3) )
# 7913 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 7975 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7980 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 7986 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 7997 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8003 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4169 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
          (Pexp_match(Fake.app Fake.Lwt.un_lwt _3, List.rev _5)) _2 in
      Fake.app Fake.Lwt.in_lwt expr )
# 8014 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8064 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8070 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4173 "src/ocaml/preprocess/parser_raw.mly"
    ( reloc_exp ~loc:_loc (Fake.app Fake.Lwt.in_lwt _3) )
# 8079 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 8141 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8146 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8152 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos_xs_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8163 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8169 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4175 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
        (Pexp_try(Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 )
# 8179 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8243 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8249 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 4178 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.app (Fake.app Fake.Lwt.finally_ _3) _5 )
# 8255 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _5 =
          let xs =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 8331 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8336 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 8342 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8352 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8358 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4180 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = mkexp_attrs ~loc:_loc
        (Pexp_try (Fake.app Fake.Lwt.in_lwt _3, List.rev _5)) _2 in
      Fake.app (Fake.app Fake.Lwt.finally_ expr) _7 )
# 8369 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8440 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8446 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4184 "src/ocaml/preprocess/parser_raw.mly"
  ( let expr = Pexp_while (_3, Fake.(app Lwt.un_lwt _5)) in
    Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8456 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8555 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8561 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__10_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4187 "src/ocaml/preprocess/parser_raw.mly"
    ( let expr = Pexp_for (_3, _5, _7, _6, Fake.(app Lwt.un_lwt _9)) in
      Fake.(app Lwt.to_lwt (mkexp_attrs ~loc:_loc expr _2)) )
# 8571 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.expression) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8656 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8662 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4190 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp_attrs ~loc:_loc
          (Pexp_let (Nonrecursive, [Vb.mk _3 (Fake.(app Lwt.un_stream _5))],
             Fake.(app Lwt.unit_lwt _7)))
          _2
    )
# 8675 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2344 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 8700 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8780 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8790 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8796 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2396 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letmodule(_4, _5, (merloc _endpos__6_ _7)), _3 )
# 8802 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8813 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _2_inlined1 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2_inlined1 in
        let _1_inlined3 : (string) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_endpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _2, _1) = (_endpos__1_inlined4_, _endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined4, _2_inlined1, _1_inlined3) in
            let _3 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8899 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__1_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 8910 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3360 "src/ocaml/preprocess/parser_raw.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 8920 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 8930 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 8936 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2398 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 8942 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__6_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8953 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9025 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9031 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 9037 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 2400 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9044 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9055 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (string Location.loc option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 =
            let (_1_inlined1, _1) = (_1_inlined3, _1_inlined2) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9134 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9140 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 9146 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 2400 "src/ocaml/preprocess/parser_raw.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, (merloc _endpos__6_ _7)), _4 )
# 9153 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9164 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 9213 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9218 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9224 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9234 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9240 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2404 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_function _3, _2 )
# 9246 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9257 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9315 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9321 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2406 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 9328 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__4_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9339 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9414 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9423 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9429 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2409 "src/ocaml/preprocess/parser_raw.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 9438 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 9512 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9517 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9523 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9533 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9539 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2411 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_match(_3, _5), _2 )
# 9545 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9556 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 =
            let xs =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 9619 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1185 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9624 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2839 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 9630 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9640 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9646 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2413 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_try(_3, _5), _2 )
# 9652 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos_xs_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9663 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9742 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9748 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2419 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), Some (merloc _endpos__6_ _7)), _2 )
# 9754 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9765 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9830 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9836 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2421 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ifthenelse(_3, (merloc _endpos__4_ _5), None), _2 )
# 9842 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9853 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 9925 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 9931 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2423 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_while(_3, (merloc _endpos__4_ _5)), _2 )
# 9937 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__6_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9948 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10048 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10054 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2426 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_for(_3, (merloc _endpos__4_ _5), (merloc _endpos__6_ _7), _6, (merloc _endpos__8_ _9)), _2 )
# 10060 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10071 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10122 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10128 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2428 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_assert _3, _2 )
# 10134 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10145 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10196 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10202 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2430 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_lazy _3, _2 )
# 10208 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10219 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let _1 = _1_inlined3 in
            let _2 =
              let _1 =
                let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 10284 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 2024 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10289 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 984 "src/ocaml/preprocess/parser_raw.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10298 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2011 "src/ocaml/preprocess/parser_raw.mly"
       ( Cstr.mk _1 _2 )
# 10304 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 10314 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 10320 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2432 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_object _3, _2 )
# 10326 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__4_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "src/ocaml/preprocess/parser_raw.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10337 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 10372 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10377 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2440 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, _2) )
# 10383 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10393 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10399 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let es =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 10428 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 10433 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2867 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 10439 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2442 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_tuple(_1) )
# 10445 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10455 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10461 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 10499 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2444 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, Some _2) )
# 10505 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10515 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10521 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2446 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, Some _2) )
# 10554 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10563 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10569 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 780 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10603 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10615 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10624 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10630 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10640 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10646 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 781 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10680 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10692 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10701 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10707 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10717 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 782 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10757 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3818 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10769 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10778 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10784 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10794 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10800 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 783 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10834 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3819 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10846 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10855 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10861 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10871 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10877 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 10911 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3820 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 10923 "src/ocaml/preprocess/parser_raw.ml"
               in
              let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10932 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 10938 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 10948 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 10954 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3821 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 10996 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11004 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11010 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11020 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11026 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3822 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 11068 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11076 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11082 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11092 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11098 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3823 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 11140 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11148 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11154 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11164 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11170 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3824 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 11212 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11220 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11226 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11236 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11242 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3825 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 11284 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11292 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11298 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11308 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11314 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3826 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 11356 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11364 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11370 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11380 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11386 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3827 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 11428 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11436 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11442 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11452 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11458 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 11500 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11508 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11514 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11524 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11530 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3829 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 11572 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11580 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11586 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11596 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11602 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3830 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 11644 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11652 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11658 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11668 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11674 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3831 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 11716 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11724 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11730 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11740 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11746 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3832 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 11788 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11796 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11802 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11812 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11818 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3833 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 11860 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11868 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11874 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11884 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11890 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3834 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 11932 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11940 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 11946 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 11956 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 11962 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let op =
              let _1 = 
# 3835 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 12004 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 12012 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2448 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix e1 op e2 )
# 12018 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12028 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12034 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2450 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 12069 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12079 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12085 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2452 "src/ocaml/preprocess/parser_raw.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 12120 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 12130 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2349 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 12136 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2351 "src/ocaml/preprocess/parser_raw.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 (merloc _endpos__2_ _3) )
# 12178 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _1 : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12220 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.expression) = let pbop_op =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12232 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_pbop_op_ = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_pbop_op_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2353 "src/ocaml/preprocess/parser_raw.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 12246 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2359 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;(merloc _endpos__2_ _3)])) )
# 12289 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12324 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 12333 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12341 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2361 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 12350 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 12408 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2363 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 12417 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2365 "src/ocaml/preprocess/parser_raw.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 12487 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2367 "src/ocaml/preprocess/parser_raw.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 12557 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2369 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 12627 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12689 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12698 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2371 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident bracket _2 _1 _4 _7 )
# 12706 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12768 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12777 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2373 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident paren _2 _1 _4 _7 )
# 12785 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12847 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12856 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2375 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc lident brace _2 _1 _4 _7 )
# 12864 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 12938 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 12949 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2378 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) bracket _4 _1 _6 _9 )
# 12957 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13031 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13042 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2381 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) paren _4 _1 _6 _9  )
# 13050 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 13124 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 13135 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2384 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_set ~loc:_sloc (ldot _3) brace _4 _1 _6 _9 )
# 13143 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2386 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.attr _1 _2 )
# 13175 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2392 "src/ocaml/preprocess/parser_raw.mly"
     ( mkexp_stack ~loc:_sloc _2 )
# 13210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 4115 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 13228 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Location.loc option) = 
# 4116 "src/ocaml/preprocess/parser_raw.mly"
                    ( Some _2 )
# 13260 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4126 "src/ocaml/preprocess/parser_raw.mly"
                                             ( (_2, _3) )
# 13306 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 846 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 13327 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 4128 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 13338 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _1_inlined3 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13393 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined3_ in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13405 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13416 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3449 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13426 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.extension_constructor) = let attrs =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 13474 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined2_ in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13486 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let cid =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 13496 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__1_ in
        let _1 = 
# 3927 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 13503 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3449 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13512 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 4103 "src/ocaml/preprocess/parser_raw.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 13562 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = let params = 
# 2133 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 13580 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1950 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13585 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = let params =
          let params =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 13626 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13631 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2135 "src/ocaml/preprocess/parser_raw.mly"
      ( params )
# 13637 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1950 "src/ocaml/preprocess/parser_raw.mly"
    ( params )
# 13643 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2811 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13668 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2813 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 13710 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2852 "src/ocaml/preprocess/parser_raw.mly"
      ( (merloc _endpos__1_ _2) )
# 13742 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2854 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint ((merloc _endpos__3_ _4), _2) )
# 13789 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 13798 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2855 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 13804 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2858 "src/ocaml/preprocess/parser_raw.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 13842 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 13895 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2863 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 13903 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3561 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 13928 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3563 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 13953 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Lexing.position * Parsetree.functor_parameter) = let _startpos = _startpos__1_ in
        
# 1364 "src/ocaml/preprocess/parser_raw.mly"
      ( _startpos, Unit )
# 13986 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Lexing.position * Parsetree.functor_parameter) = let x =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14044 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos = _startpos__1_ in
        
# 1367 "src/ocaml/preprocess/parser_raw.mly"
      ( _startpos, Named (x, mty) )
# 14051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1356 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14076 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3364 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],None) )
# 14094 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3365 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,None) )
# 14126 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3367 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (_2,Some _4) )
# 14172 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3369 "src/ocaml/preprocess/parser_raw.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 14204 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14254 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined2_ in
        let cid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14266 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3312 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14280 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14323 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined1_ in
        let cid =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14334 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_cid_ = _startpos__1_ in
        let _1 = 
# 3927 "src/ocaml/preprocess/parser_raw.mly"
    ( () )
# 14341 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos_cid_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3312 "src/ocaml/preprocess/parser_raw.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14354 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14427 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14442 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14451 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14456 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14462 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest = 
# 3250 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14468 "src/ocaml/preprocess/parser_raw.ml"
         in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14478 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag = 
# 3947 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 14484 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14491 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3187 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14507 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined4;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
        let _1_inlined3 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14586 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined5 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14602 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined5_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14611 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14616 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14622 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let kind_priv_manifest = 
# 3250 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 14628 "src/ocaml/preprocess/parser_raw.ml"
         in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14638 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag =
          let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 3948 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 14649 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14657 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3187 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14739 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14754 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14763 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14768 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14774 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14785 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag = 
# 3943 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 14791 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14798 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3187 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14814 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined3 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14886 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14902 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let cstrs =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 14911 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 14916 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14922 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 14933 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let flag = 
# 3944 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 14939 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 14946 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3187 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14962 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 14983 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3786 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 14991 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15012 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3787 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 15020 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure) = 
# 1245 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15052 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string) = 
# 3838 "src/ocaml/preprocess/parser_raw.mly"
  ( "" )
# 15070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3839 "src/ocaml/preprocess/parser_raw.mly"
              ( ";.." )
# 15102 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature) = 
# 1251 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15134 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4131 "src/ocaml/preprocess/parser_raw.mly"
                                                    ( (_2, _3) )
# 15180 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 849 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 15201 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 4133 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 15212 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15260 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * Asttypes.global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.label_declaration) = let _5 =
          let _1 = _1_inlined3 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3514 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15280 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15288 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15296 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3386 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let mut, gbl = _1 in
        mkld_global_maybe gbl
          (Type.field _2 _4 ~mut ~attrs:_5 ~loc:(make_loc _sloc) ~info) )
# 15312 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15374 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * Asttypes.global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.label_declaration) = let _7 =
          let _1 = _1_inlined4 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15385 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__7_ = _endpos__1_inlined4_ in
        let _5 =
          let _1 = _1_inlined3 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15394 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _4 =
          let _1 = _1_inlined2 in
          
# 3514 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15403 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 15411 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15419 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3394 "src/ocaml/preprocess/parser_raw.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       let mut, gbl = _1 in
       mkld_global_maybe gbl
         (Type.field _2 _4 ~mut ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info) )
# 15439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3380 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15464 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3381 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_1] )
# 15489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 3382 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 :: _2 )
# 15521 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15542 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15555 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2332 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15564 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2324 "src/ocaml/preprocess/parser_raw.mly"
      ( x )
# 15570 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15605 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _v : (string * Parsetree.pattern) = let x =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 15618 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2332 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15627 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos_x_ = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _symbolstartpos = _startpos_x_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2326 "src/ocaml/preprocess/parser_raw.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 15639 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3869 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 15664 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2691 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, _1) )
# 15689 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15717 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2693 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, _2) )
# 15725 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15752 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2695 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 15763 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = label;
              MenhirLib.EngineTypes.startp = _startpos_label_;
              MenhirLib.EngineTypes.endp = _endpos_label_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ty : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic ty in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15810 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _endpos = _endpos__5_ in
        let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2698 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled label, mkexp_constraint ~loc:(_startpos__2_, _endpos)
                           (mkexpvar ~loc:_loc_label_ label) ty) )
# 15823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15850 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = let _loc_label_ = (_startpos_label_, _endpos_label_) in
        
# 2701 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 15861 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 15889 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2704 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _2) )
# 15897 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _5 =
          let _1 = _1_inlined1 in
          
# 2320 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 15952 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 15958 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2290 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _4), _5, mkpat_local_if _3 (snd _4)) )
# 15963 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _5 =
          let _1 = _1_inlined2 in
          
# 2320 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16025 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16031 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2290 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _4), _5, mkpat_local_if _3 (snd _4)) )
# 16036 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16063 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16078 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2332 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16087 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2292 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional (fst _2), None, snd _2) )
# 16093 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16142 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _5 =
          let _1 = _1_inlined1 in
          
# 2320 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16152 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16158 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2294 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _5, mkpat_local_if _3 _4) )
# 16163 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16219 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _5 =
          let _1 = _1_inlined2 in
          
# 2320 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16229 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16235 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2294 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, _5, mkpat_local_if _3 _4) )
# 16240 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16268 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2296 "src/ocaml/preprocess/parser_raw.mly"
      ( (Optional _1, None, _2) )
# 16276 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _3 = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16322 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2298 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _4), None, mkpat_local_if _3 (snd _4)) )
# 16327 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _3 = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16380 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2298 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _4), None, mkpat_local_if _3 (snd _4)) )
# 16385 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16412 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 16427 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2332 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16436 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2300 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 16442 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16470 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2302 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, _2) )
# 16478 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 16527 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2304 "src/ocaml/preprocess/parser_raw.mly"
      ( (Labelled _1, None, mkpat_stack _4) )
# 16535 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2306 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, _1) )
# 16560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2308 "src/ocaml/preprocess/parser_raw.mly"
      ( (Nolabel, None, mkpat_stack _3) )
# 16606 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16642 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2715 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _2) )
# 16648 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _2 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16698 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_ in
        let _1 = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16705 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2717 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_local_if _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_local_if _1 ~loc:_sloc
            (wrap_exp_local_if _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 16734 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16792 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _1 = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 16799 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2717 "src/ocaml/preprocess/parser_raw.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_local_if _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_local_if _1 ~loc:_sloc
            (wrap_exp_local_if _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 16827 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 16896 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 16901 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3496 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 16907 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos_xs_ in
        let _2 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 16918 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_ in
        let _1 = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 16925 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2739 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_local_if _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_local_if _1 ~loc:_sloc _8 in
        (pat, exp) )
# 16945 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 17021 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17026 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3496 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17032 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos_xs_ in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17044 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__2_ = _startpos__1_inlined1_ in
        let _1 = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 17051 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2739 "src/ocaml/preprocess/parser_raw.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_local_if _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_local_if _1 ~loc:_sloc _8 in
        (pat, exp) )
# 17070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _4 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 17144 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17153 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2749 "src/ocaml/preprocess/parser_raw.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 17165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2754 "src/ocaml/preprocess/parser_raw.mly"
      ( (_1, _3) )
# 17204 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2756 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 17258 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17302 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2759 "src/ocaml/preprocess/parser_raw.mly"
      ( (_2, mkexp_stack ~loc:_sloc _3) )
# 17311 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17374 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17383 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2774 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17395 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2765 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 17433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17489 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17498 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext = 
# 4119 "src/ocaml/preprocess/parser_raw.mly"
                    ( None )
# 17504 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2774 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17515 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17521 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Ast_helper.let_bindings) = let _1 =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17591 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 17600 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let ext =
            let _startpos__1_ = _startpos__1_inlined1_ in
            let _endpos = _endpos__2_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 4120 "src/ocaml/preprocess/parser_raw.mly"
                    ( not_expecting _loc "extension"; None )
# 17611 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2774 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 17623 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 17629 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 2765 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 17661 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2336 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17686 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2338 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_1, _3) )
# 17726 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 17735 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2339 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 17741 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let pat =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2711 "src/ocaml/preprocess/parser_raw.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 17777 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2791 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 17783 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2793 "src/ocaml/preprocess/parser_raw.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 17837 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2796 "src/ocaml/preprocess/parser_raw.mly"
      ( (pat, exp) )
# 17876 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2800 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 17902 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1 : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 17936 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = let pbop_op =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 17949 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_body_ in
        let _symbolstartpos = _startpos_bindings_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2803 "src/ocaml/preprocess/parser_raw.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 17962 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 17980 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18046 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18061 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18073 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18081 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1928 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 18096 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18102 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 211 "<standard.mly>"
    ( [] )
# 18120 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18193 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_description list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18208 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18220 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18228 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2227 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18243 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18249 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 18267 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18340 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18355 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18367 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18375 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2266 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 18390 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18396 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 211 "<standard.mly>"
    ( [] )
# 18414 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_binding list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18477 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let name =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18489 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18497 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1603 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk name body ~attrs ~loc ~text ~docs
  )
# 18512 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18518 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 18536 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_declaration list) = let x =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18606 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let name =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18618 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18626 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1886 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk name mty ~attrs ~loc ~text ~docs
  )
# 18641 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18647 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "<standard.mly>"
    ( [] )
# 18665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 18697 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 18715 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = kind_priv_manifest;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18782 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let xs = xs_inlined1 in
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18797 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let cstrs =
            let _1 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 18806 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 18811 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18817 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 18828 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18836 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3204 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 18852 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 18858 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 211 "<standard.mly>"
    ( [] )
# 18876 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = params;
                      MenhirLib.EngineTypes.startp = _startpos_params_;
                      MenhirLib.EngineTypes.endp = _endpos_params_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs_inlined1 in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 18950 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.type_declaration list) = let x =
          let xs = xs_inlined1 in
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18965 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 18974 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 18979 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 18985 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let kind_priv_manifest = 
# 3250 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 18991 "src/ocaml/preprocess/parser_raw.ml"
           in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19001 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19009 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3204 "src/ocaml/preprocess/parser_raw.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 19025 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19031 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 211 "<standard.mly>"
    ( [] )
# 19049 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 19081 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19099 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 1000 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos )
# 19134 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1745 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19140 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19146 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.signature_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 998 "src/ocaml/preprocess/parser_raw.mly"
  ( text_sig _startpos @ [_1] )
# 19181 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1745 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19187 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19211 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let ys =
              let items = 
# 1060 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 19246 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1486 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19251 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos = _startpos__1_ in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19259 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 19265 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19277 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let ys =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              let items =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19331 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 19336 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 994 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19344 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 1013 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19354 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 19360 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1486 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 19366 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let xs =
              let _startpos = _startpos__1_ in
              
# 996 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos )
# 19374 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 19380 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19386 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19392 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _1 =
            let _startpos = _startpos__1_ in
            
# 994 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19427 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1502 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19433 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19439 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19457 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_type_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_type_field list list) = let x =
          let _startpos = _startpos__1_ in
          
# 1008 "src/ocaml/preprocess/parser_raw.mly"
  ( text_csig _startpos @ [_1] )
# 19491 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19515 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.class_field list list) = let x =
          let _startpos = _startpos__1_ in
          
# 1006 "src/ocaml/preprocess/parser_raw.mly"
  ( text_cstr _startpos @ [_1] )
# 19549 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19555 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19573 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.structure_item list list) = let x =
          let _startpos = _startpos__1_ in
          
# 994 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 19607 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19613 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 211 "<standard.mly>"
    ( [] )
# 19631 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let x =
              let _1 = 
# 1060 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 19666 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1290 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19671 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "<standard.mly>"
    ( x )
# 19677 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1302 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19683 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19689 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let x =
              let _1 = _1_inlined1 in
              let _1 =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19743 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 19748 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 1004 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 19754 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _startpos = _startpos__1_ in
                  
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19762 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 19768 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1290 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 19774 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 183 "<standard.mly>"
    ( x )
# 19780 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1302 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19786 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19792 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let _1 = 
# 1004 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 19826 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _startpos = _startpos__1_ in
            
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19832 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1302 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19838 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19844 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.toplevel_phrase list list) = let x =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 1013 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 19882 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos = _startpos__1_ in
            
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 19889 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 1302 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 19895 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 213 "<standard.mly>"
    ( x :: xs )
# 19901 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = opat;
          MenhirLib.EngineTypes.startp = _startpos_opat_;
          MenhirLib.EngineTypes.endp = _endpos_opat_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = octy;
            MenhirLib.EngineTypes.startp = _startpos_octy_;
            MenhirLib.EngineTypes.endp = _endpos_octy_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_opat_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 19940 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 19950 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3090 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 19972 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1229 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 19978 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = opat;
            MenhirLib.EngineTypes.startp = _startpos_opat_;
            MenhirLib.EngineTypes.endp = _endpos_opat_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = octy;
              MenhirLib.EngineTypes.startp = _startpos_octy_;
              MenhirLib.EngineTypes.endp = _endpos_octy_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 20024 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20034 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3090 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20056 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1229 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], None )
# 20062 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = opat;
                MenhirLib.EngineTypes.startp = _startpos_opat_;
                MenhirLib.EngineTypes.endp = _endpos_opat_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = octy;
                  MenhirLib.EngineTypes.startp = _startpos_octy_;
                  MenhirLib.EngineTypes.endp = _endpos_octy_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20127 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3090 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20149 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1231 "src/ocaml/preprocess/parser_raw.mly"
    ( [x], Some y )
# 20155 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = opat;
              MenhirLib.EngineTypes.startp = _startpos_opat_;
              MenhirLib.EngineTypes.endp = _endpos_opat_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = octy;
                MenhirLib.EngineTypes.startp = _startpos_octy_;
                MenhirLib.EngineTypes.endp = _endpos_octy_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20213 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_opat_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3090 "src/ocaml/preprocess/parser_raw.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 20235 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1235 "src/ocaml/preprocess/parser_raw.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 20242 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2825 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 20267 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2827 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_exp_stack (mkexp_constraint ~loc:_sloc _3 _1) )
# 20309 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2831 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 20341 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2833 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 20376 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 20429 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2835 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 20437 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Ast_helper.let_bindings) = let _5 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20499 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined3_ in
        let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20510 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 20516 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _startpos = _startpos__1_ in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc = (_startpos, _endpos) in
        
# 4157 "src/ocaml/preprocess/parser_raw.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_loc ext _3 (mklb ~loc:_loc__4_ true _4 (attr@_5)) )
# 20527 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Ast_helper.let_bindings) = 
# 4161 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20552 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Ast_helper.let_binding) = Obj.magic _2 in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Ast_helper.let_bindings) = 
# 4162 "src/ocaml/preprocess/parser_raw.mly"
                                                ( addlb _1 _2 )
# 20584 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2843 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_ _3) )
# 20623 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2845 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 ~guard:(merloc _endpos__2_ _3) (merloc _endpos__4_ _5) )
# 20676 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2847 "src/ocaml/preprocess/parser_raw.mly"
      ( Exp.case _1 (merloc _endpos__2_
                       (Exp.unreachable ~loc:(make_loc _loc__3_) ())) )
# 20717 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20780 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _6 =
            let _1 = _1_inlined3 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20791 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20800 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3514 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20809 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20816 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20824 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3749 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 20839 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3730 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 20845 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tail_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3760 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 20888 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3730 "src/ocaml/preprocess/parser_raw.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 20894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 20950 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _6 =
            let _1 = _1_inlined3 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20961 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20970 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3514 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 20979 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 20986 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 20994 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3749 "src/ocaml/preprocess/parser_raw.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21009 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3733 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21015 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3760 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21051 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3733 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21057 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21099 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21110 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 3514 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21119 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _1 =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21126 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21134 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3742 "src/ocaml/preprocess/parser_raw.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 21145 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3736 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21151 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let head =
          let _endpos = _endpos_ty_ in
          let _symbolstartpos = _startpos_ty_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3760 "src/ocaml/preprocess/parser_raw.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 21180 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3736 "src/ocaml/preprocess/parser_raw.mly"
      ( [head], Closed )
# 21186 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3738 "src/ocaml/preprocess/parser_raw.mly"
      ( [], Open )
# 21211 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21258 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let ty =
          let _1 = _1_inlined2 in
          
# 3510 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let label =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21279 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21287 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21293 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 4009 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21298 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2072 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 21303 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21343 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21356 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21364 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21370 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21375 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2074 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21429 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21443 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21451 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21459 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21465 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2074 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 21473 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21534 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _1_inlined2 in
          
# 3510 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21547 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__1_inlined2_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21556 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21564 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21570 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21575 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2080 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21583 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21650 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _6 =
          let _1 = _1_inlined3 in
          
# 3510 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21664 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__6_ = _startpos__1_inlined3_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21673 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21681 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21689 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21695 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2080 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 21703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21785 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 21796 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _startpos__7_ = _startpos_xs_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21804 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21812 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined1_ in
        let _2 = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21819 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
        let _1 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 21825 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2086 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 21852 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined2;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 21940 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _7 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 21952 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _startpos__7_ = _startpos_xs_ in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 21960 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 21968 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 21977 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
        let _1 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 21984 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2086 "src/ocaml/preprocess/parser_raw.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 22010 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22031 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22039 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22072 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22082 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22103 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22111 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22144 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22154 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = let _1 = 
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22179 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22184 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _1 =
          let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 22224 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22229 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22235 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = let _1 = 
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22260 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22265 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Longident.t) = let _3 =
          let _1 = _1_inlined1 in
          
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22306 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22312 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = let _3 =
          let _1 = 
# 3842 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "::" )
# 22366 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22371 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Longident.t) = let _3 =
          let _1 = _1_inlined1 in
          
# 3901 "src/ocaml/preprocess/parser_raw.mly"
                                                  ( _1 )
# 22418 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22424 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22449 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22488 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22509 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22517 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22550 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22581 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22589 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 22622 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22632 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3862 "src/ocaml/preprocess/parser_raw.mly"
                      ( Lident _1 )
# 22657 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3863 "src/ocaml/preprocess/parser_raw.mly"
                      ( Ldot(_1,_3) )
# 22696 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3878 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 22721 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3880 "src/ocaml/preprocess/parser_raw.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 22770 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3875 "src/ocaml/preprocess/parser_raw.mly"
                                        ( _1 )
# 22795 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1562 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 22827 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _3 : unit = Obj.magic _3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1565 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_constraint(me, mty) )
# 22874 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_me_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22883 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1569 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22889 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1567 "src/ocaml/preprocess/parser_raw.mly"
        ( let (_, arg) = arg_and_pos in
          Pmod_functor(arg, body) )
# 22923 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 22932 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1569 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 22938 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1810 "src/ocaml/preprocess/parser_raw.mly"
      ( mty )
# 22970 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_type) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1813 "src/ocaml/preprocess/parser_raw.mly"
        ( let (_, arg) = arg_and_pos in
          Pmty_functor(arg, body) )
# 23004 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23013 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1816 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23019 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23067 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1390 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 23076 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let args : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23131 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_me_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1396 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmod ~loc:(startpos, _endpos) (Pmod_functor (arg, acc))
          ) me args
        ) )
# 23144 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1402 "src/ocaml/preprocess/parser_raw.mly"
      ( me )
# 23169 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1404 "src/ocaml/preprocess/parser_raw.mly"
      ( Mod.attr me attr )
# 23201 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 =
            let x =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23232 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1408 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_ident x )
# 23238 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23247 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23253 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me2;
          MenhirLib.EngineTypes.startp = _startpos_me2_;
          MenhirLib.EngineTypes.endp = _endpos_me2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me1;
            MenhirLib.EngineTypes.startp = _startpos_me1_;
            MenhirLib.EngineTypes.endp = _endpos_me1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me2 : (Parsetree.module_expr) = Obj.magic me2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos_me2_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1411 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_apply(me1, me2) )
# 23286 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_me2_, _startpos_me1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23295 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23301 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me1;
              MenhirLib.EngineTypes.startp = _startpos_me1_;
              MenhirLib.EngineTypes.endp = _endpos_me1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos_me1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1414 "src/ocaml/preprocess/parser_raw.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 23346 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_me1_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23356 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23362 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex;
          MenhirLib.EngineTypes.startp = _startpos_ex_;
          MenhirLib.EngineTypes.endp = _endpos_ex_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex : (Parsetree.extension) = Obj.magic ex in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex_ in
        let _endpos = _endpos_ex_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1418 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_extension ex )
# 23388 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_ex_, _startpos_ex_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23397 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23403 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _1 = 
# 1421 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmod_hole )
# 23429 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1033 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmod ~loc:_sloc _1 )
# 23437 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1423 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23443 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23464 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string option) = 
# 1373 "src/ocaml/preprocess/parser_raw.mly"
      ( Some x )
# 23472 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string option) = 
# 1376 "src/ocaml/preprocess/parser_raw.mly"
      ( None )
# 23497 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 23557 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.module_substitution * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23570 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let body =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23582 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let uid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23593 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23601 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1846 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 23615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23663 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1694 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 23672 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let args : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic args in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23727 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_mty_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1702 "src/ocaml/preprocess/parser_raw.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmty ~loc:(startpos, _endpos) (Pmty_functor (arg, acc))
          ) mty args
        ) )
# 23740 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _4 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23795 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1708 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 23804 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1710 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 23843 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1716 "src/ocaml/preprocess/parser_raw.mly"
      ( Mty.attr _1 _2 )
# 23875 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 23906 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1719 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_ident _1 )
# 23912 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23921 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1730 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23927 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.module_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1722 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_functor(Named (mknoloc None, _1), _3) )
# 23967 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 23976 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1730 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 23982 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 =
            let _3 =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 24024 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 24029 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1724 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_with(_1, _3) )
# 24035 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24045 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1730 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _1 = 
# 1728 "src/ocaml/preprocess/parser_raw.mly"
        ( Pmty_extension _1 )
# 24077 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1035 "src/ocaml/preprocess/parser_raw.mly"
    ( mkmty ~loc:_sloc _1 )
# 24085 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1730 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24091 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.module_type_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24160 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24172 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24180 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1640 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 24194 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3887 "src/ocaml/preprocess/parser_raw.mly"
                                          ( _1 )
# 24219 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3963 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable )
# 24237 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3964 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable )
# 24262 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3967 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Nothing )
# 24280 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3968 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Mutable, Nothing )
# 24305 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3969 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Global )
# 24330 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.global_flag) = 
# 3970 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Immutable, Nonlocal )
# 24355 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3978 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Concrete )
# 24373 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3980 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Concrete )
# 24398 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3982 "src/ocaml/preprocess/parser_raw.mly"
      ( Immutable, Virtual )
# 24423 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3985 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 24455 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3985 "src/ocaml/preprocess/parser_raw.mly"
      ( Mutable, Virtual )
# 24487 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3936 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 24519 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24540 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string Location.loc list) = let x =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24552 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 221 "<standard.mly>"
    ( [ x ] )
# 24558 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 24586 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Location.loc list) = let x =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 24598 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 223 "<standard.mly>"
    ( x :: xs )
# 24604 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 24625 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (string list) = let x = 
# 3932 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 24633 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 221 "<standard.mly>"
    ( [ x ] )
# 24638 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s : (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 24666 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v : (string list) = let x = 
# 3932 "src/ocaml/preprocess/parser_raw.mly"
    ( let body, _, _ = s in body )
# 24674 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 223 "<standard.mly>"
    ( x :: xs )
# 24679 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24704 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3224 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 24709 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24741 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3224 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 24746 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24771 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 24777 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24782 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24788 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24820 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 24826 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24831 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24837 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24876 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 24883 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 24888 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24894 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24900 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 24946 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 24953 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 24958 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 24964 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3228 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_variant cs, priv, oty) )
# 24970 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 24995 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 25001 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25006 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25012 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25044 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 25050 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25055 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25061 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25100 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 25107 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 25112 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25118 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25124 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25170 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 25177 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 25182 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25188 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3232 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_open, priv, oty) )
# 25194 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25233 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 25239 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25244 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25250 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25296 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 = 
# 124 "<standard.mly>"
    ( None )
# 25302 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25307 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25313 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 25366 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 25373 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 25378 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25384 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25390 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = let priv = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 25450 "src/ocaml/preprocess/parser_raw.ml"
         in
        let oty =
          let _1 =
            let x = 
# 191 "<standard.mly>"
    ( x )
# 25457 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 126 "<standard.mly>"
    ( Some x )
# 25462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3240 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25468 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3236 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_record ls, priv, oty) )
# 25474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined2 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25529 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined2_ in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25538 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 25544 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1659 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 25557 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.open_declaration * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25619 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let attrs1 =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25628 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 25634 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1659 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 25647 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25702 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25714 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25722 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 25728 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1674 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 25741 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.open_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25803 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined4_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 25815 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined2 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 25823 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let override = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 25829 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1674 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 25842 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 830 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25863 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3802 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25871 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25892 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3803 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25900 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25921 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3804 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 25929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 25971 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3805 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"(" ^ _3 ^ ")" )
# 25979 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26028 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3806 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "(" ^ _3 ^ ")<-" )
# 26036 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26078 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3807 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"[" ^ _3 ^ "]" )
# 26086 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26135 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3808 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "[" ^ _3 ^ "]<-" )
# 26143 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26185 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 3809 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^"{" ^ _3 ^ "}" )
# 26193 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26242 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string) = 
# 3810 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "."^ _1 ^ "{" ^ _3 ^ "}<-" )
# 26250 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 841 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26271 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3811 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26279 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3812 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "!" )
# 26304 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 780 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26325 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3816 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26333 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26338 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 781 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26359 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3817 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26367 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26372 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 782 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26393 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3818 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26401 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 783 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26427 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3819 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26435 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26440 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 26461 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : (string) = let _1 = 
# 3820 "src/ocaml/preprocess/parser_raw.mly"
                  ( op )
# 26469 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3821 "src/ocaml/preprocess/parser_raw.mly"
                   ("+")
# 26499 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26504 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3822 "src/ocaml/preprocess/parser_raw.mly"
                  ("+.")
# 26529 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26534 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3823 "src/ocaml/preprocess/parser_raw.mly"
                  ("+=")
# 26559 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26564 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3824 "src/ocaml/preprocess/parser_raw.mly"
                   ("-")
# 26589 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26594 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3825 "src/ocaml/preprocess/parser_raw.mly"
                  ("-.")
# 26619 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26624 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3826 "src/ocaml/preprocess/parser_raw.mly"
                   ("*")
# 26649 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26654 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3827 "src/ocaml/preprocess/parser_raw.mly"
                   ("%")
# 26679 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26684 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3828 "src/ocaml/preprocess/parser_raw.mly"
                   ("=")
# 26709 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26714 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3829 "src/ocaml/preprocess/parser_raw.mly"
                   ("<")
# 26739 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3830 "src/ocaml/preprocess/parser_raw.mly"
                   (">")
# 26769 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26774 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3831 "src/ocaml/preprocess/parser_raw.mly"
                  ("or")
# 26799 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26804 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3832 "src/ocaml/preprocess/parser_raw.mly"
                  ("||")
# 26829 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26834 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3833 "src/ocaml/preprocess/parser_raw.mly"
                   ("&")
# 26859 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26864 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3834 "src/ocaml/preprocess/parser_raw.mly"
                  ("&&")
# 26889 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = let _1 = 
# 3835 "src/ocaml/preprocess/parser_raw.mly"
                  (":=")
# 26919 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3813 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 26924 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3715 "src/ocaml/preprocess/parser_raw.mly"
                                                ( true )
# 26949 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3716 "src/ocaml/preprocess/parser_raw.mly"
                                                ( false )
# 26967 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( None )
# 26985 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "<standard.mly>"
    ( Some x )
# 27010 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( None )
# 27028 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 116 "<standard.mly>"
    ( Some x )
# 27053 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Location.loc option) = 
# 114 "<standard.mly>"
    ( None )
# 27071 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27098 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc option) = let x =
          let x =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 27113 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "<standard.mly>"
    ( x )
# 27119 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 116 "<standard.mly>"
    ( Some x )
# 27125 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 114 "<standard.mly>"
    ( None )
# 27143 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 27175 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 27180 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "<standard.mly>"
    ( None )
# 27198 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 27230 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 27235 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 114 "<standard.mly>"
    ( None )
# 27253 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.module_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.module_type option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 27285 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 27290 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 114 "<standard.mly>"
    ( None )
# 27308 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 27340 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 27345 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 114 "<standard.mly>"
    ( None )
# 27363 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression option) = let x = 
# 183 "<standard.mly>"
    ( x )
# 27395 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 116 "<standard.mly>"
    ( Some x )
# 27400 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 114 "<standard.mly>"
    ( None )
# 27418 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 116 "<standard.mly>"
    ( Some x )
# 27443 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27464 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4024 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 27472 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 27506 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 4025 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _2 )
# 27515 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1432 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 27571 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1439 "src/ocaml/preprocess/parser_raw.mly"
      ( me (* TODO consider reloc *) )
# 27610 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e = 
# 1462 "src/ocaml/preprocess/parser_raw.mly"
      ( e )
# 27663 "src/ocaml/preprocess/parser_raw.ml"
         in
        let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27670 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1447 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27679 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let ty =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 27754 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty_ = _endpos__1_ in
          let _endpos = _endpos_ty_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1464 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 27764 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27772 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1447 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27781 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_inlined1_, _startpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined3, _1_inlined2) in
          let ty2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 27871 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1_inlined1_ in
          let ty1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 27884 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1466 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 27893 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 27901 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1447 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 27910 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let e =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let ty2 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 27985 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos_ty2_ = _endpos__1_ in
          let _endpos = _endpos_ty2_ in
          let _startpos = _startpos_e_ in
          let _loc = (_startpos, _endpos) in
          
# 1468 "src/ocaml/preprocess/parser_raw.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 27995 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28003 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1447 "src/ocaml/preprocess/parser_raw.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 28012 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1347 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28044 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1332 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28076 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 1307 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28108 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1312 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28140 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1337 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28172 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1342 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28204 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1322 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28236 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 1317 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28268 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1327 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28300 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2952 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 28344 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28350 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2954 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 28382 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28387 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2956 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28412 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28417 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28464 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2959 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 28470 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28480 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28486 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28492 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2963 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 28519 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28527 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28533 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28539 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2967 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 28580 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28589 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28595 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2940 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28601 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 28651 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 28657 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2942 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 28666 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3070 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 28705 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3071 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 28744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3070 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _3 :: _1 )
# 28783 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 3071 "src/ocaml/preprocess/parser_raw.mly"
                                                ( [_3; _1] )
# 28822 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2975 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28847 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 28885 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2978 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_construct(_1, Some _2) )
# 28891 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28901 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2981 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28907 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2980 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_variant(_1, Some _2) )
# 28940 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 28949 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2981 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 28955 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _2 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29005 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 29011 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2983 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 29020 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2952 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 29064 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29070 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2954 "src/ocaml/preprocess/parser_raw.mly"
      ( Pat.attr _1 _2 )
# 29102 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29107 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 = 
# 2956 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29132 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29137 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29184 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2959 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_alias(_1, _3) )
# 29190 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29200 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29206 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29212 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2963 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_tuple(List.rev _1) )
# 29239 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29247 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29253 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29259 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 = 
# 2967 "src/ocaml/preprocess/parser_raw.mly"
        ( Ppat_or(_1, _3) )
# 29300 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29309 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2970 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29315 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2947 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 29321 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 29342 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29356 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2313 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_var _1 )
# 29362 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29371 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2315 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29377 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 2314 "src/ocaml/preprocess/parser_raw.mly"
                        ( Ppat_any )
# 29403 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 29411 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2315 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29417 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 4136 "src/ocaml/preprocess/parser_raw.mly"
              ( PStr _1 )
# 29442 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4137 "src/ocaml/preprocess/parser_raw.mly"
                    ( PSig _2 )
# 29474 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4138 "src/ocaml/preprocess/parser_raw.mly"
                    ( PTyp _2 )
# 29506 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4139 "src/ocaml/preprocess/parser_raw.mly"
                     ( PPat (_2, None) )
# 29538 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 4140 "src/ocaml/preprocess/parser_raw.mly"
                                   ( PPat (_2, Some _4) )
# 29584 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3504 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29609 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 29652 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29657 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3496 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29663 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3500 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 29669 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 29679 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29685 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 = 
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29710 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3504 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29715 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let _3 = 
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29756 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _1 =
              let _1 =
                let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 29763 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 1092 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 29768 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3496 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29774 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3500 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptyp_poly(_1, _3) )
# 29780 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 29790 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3506 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29796 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Location.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 4099 "src/ocaml/preprocess/parser_raw.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 29845 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29928 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 29940 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29948 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3134 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 29961 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag) = let _1 = 
# 3959 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Public )
# 29979 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3956 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 29984 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = let _1 = 
# 3960 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Private )
# 30009 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 3956 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 30014 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3988 "src/ocaml/preprocess/parser_raw.mly"
                 ( Public, Concrete )
# 30032 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3989 "src/ocaml/preprocess/parser_raw.mly"
            ( Private, Concrete )
# 30057 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3990 "src/ocaml/preprocess/parser_raw.mly"
            ( Public, Virtual )
# 30082 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3991 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 30114 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3992 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private, Virtual )
# 30146 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3939 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Nonrecursive )
# 30164 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3940 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Recursive )
# 30189 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo = 
# 124 "<standard.mly>"
    ( None )
# 30215 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2872 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 30220 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic fields in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_fields_ in
        let _v : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = let eo =
          let x = 
# 191 "<standard.mly>"
    ( x )
# 30261 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 126 "<standard.mly>"
    ( Some x )
# 30266 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2872 "src/ocaml/preprocess/parser_raw.mly"
    ( eo, fields )
# 30272 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3321 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 30302 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1202 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30307 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3321 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 30337 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1205 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30342 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.constructor_declaration list) = let x = 
# 3321 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 30379 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1209 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 30384 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30415 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3432 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30420 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1202 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30426 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3434 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30451 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1202 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30456 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30487 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3432 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30492 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1205 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3434 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30523 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1205 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30528 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x =
          let _1 = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30566 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 3432 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30571 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1209 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 30577 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3434 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 30609 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1209 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 30614 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30644 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1202 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30649 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30679 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1205 "src/ocaml/preprocess/parser_raw.mly"
      ( [x] )
# 30684 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : (Parsetree.extension_constructor list) = let x = 
# 3438 "src/ocaml/preprocess/parser_raw.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 30721 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1209 "src/ocaml/preprocess/parser_raw.mly"
      ( x :: xs )
# 30726 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = 
# 1068 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 30744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = let x =
          let x =
            let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2189 "src/ocaml/preprocess/parser_raw.mly"
    ( _1, _3, make_loc _sloc )
# 30803 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 183 "<standard.mly>"
    ( x )
# 30809 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1070 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30815 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1082 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30840 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let xs : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30872 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1082 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30897 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1082 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 30954 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (string) = Obj.magic x in
        let xs : (string list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (string list) = 
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 30986 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc list) = let x =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31024 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3492 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 31030 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1082 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31036 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (string Location.loc list) = let x =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 31081 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3492 "src/ocaml/preprocess/parser_raw.mly"
    ( _2 )
# 31087 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1084 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31093 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 = 
# 124 "<standard.mly>"
    ( None )
# 31118 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1173 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31123 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_inlined1_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = let _1 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 31157 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1173 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 31163 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 1177 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31202 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = 
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31228 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31233 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31239 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = 
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 31279 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31284 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31290 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Extensions.comprehension_clause list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31315 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31320 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Extensions.comprehension_clause list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31359 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31364 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.with_constraint list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31389 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31394 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.with_constraint list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31433 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31438 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.row_field list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31463 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31468 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.row_field list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31507 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31512 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31537 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31542 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31581 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31586 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31611 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31616 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31655 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31660 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1108 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x ] )
# 31685 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31690 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = let xs = 
# 1112 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31729 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1116 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 31734 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1139 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31773 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1143 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31812 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 1139 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31851 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 1143 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31890 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1139 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 31929 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1143 "src/ocaml/preprocess/parser_raw.mly"
    ( [ x2; x1 ] )
# 31968 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3700 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 31993 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3702 "src/ocaml/preprocess/parser_raw.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 32021 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 32046 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32051 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : (Parsetree.expression list) = let _2 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 32085 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32091 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 1164 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32130 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = oe;
          MenhirLib.EngineTypes.startp = _startpos_oe_;
          MenhirLib.EngineTypes.endp = _endpos_oe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 32158 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_oe_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 32166 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 32173 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32181 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2895 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 32199 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32205 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = oe;
            MenhirLib.EngineTypes.startp = _startpos_oe_;
            MenhirLib.EngineTypes.endp = _endpos_oe_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 32240 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 32248 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 32255 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32263 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2895 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 32281 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32287 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = oe;
              MenhirLib.EngineTypes.startp = _startpos_oe_;
              MenhirLib.EngineTypes.endp = _endpos_oe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 32329 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : ((string Location.loc * Parsetree.expression) list) = let x =
          let label =
            let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 32339 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32347 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_oe_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2895 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 32365 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1164 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32371 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.pattern list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 32396 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32401 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : (Parsetree.pattern list) = let _2 =
          let x = x_inlined1 in
          
# 126 "<standard.mly>"
    ( Some x )
# 32435 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32441 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 1164 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32480 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eo;
          MenhirLib.EngineTypes.startp = _startpos_eo_;
          MenhirLib.EngineTypes.endp = _endpos_eo_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_eo_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
# 124 "<standard.mly>"
    ( None )
# 32519 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32529 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2878 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 32547 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32553 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = eo;
            MenhirLib.EngineTypes.startp = _startpos_eo_;
            MenhirLib.EngineTypes.endp = _endpos_eo_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = c;
              MenhirLib.EngineTypes.startp = _startpos_c_;
              MenhirLib.EngineTypes.endp = _endpos_c_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let _2 = 
# 126 "<standard.mly>"
    ( Some x )
# 32599 "src/ocaml/preprocess/parser_raw.ml"
         in
        let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32609 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2878 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 32627 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1160 "src/ocaml/preprocess/parser_raw.mly"
    ( [x] )
# 32633 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = eo;
              MenhirLib.EngineTypes.startp = _startpos_eo_;
              MenhirLib.EngineTypes.endp = _endpos_eo_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = c;
                MenhirLib.EngineTypes.startp = _startpos_c_;
                MenhirLib.EngineTypes.endp = _endpos_c_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Longident.t Location.loc * Parsetree.expression) list) = let x =
          let label =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32691 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos_label_ = _startpos__1_ in
          let _endpos = _endpos_eo_ in
          let _symbolstartpos = _startpos_label_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2878 "src/ocaml/preprocess/parser_raw.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 32709 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1164 "src/ocaml/preprocess/parser_raw.mly"
    ( x :: xs )
# 32715 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2278 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 32740 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2279 "src/ocaml/preprocess/parser_raw.mly"
                                  ( _1 )
# 32772 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2281 "src/ocaml/preprocess/parser_raw.mly"
    ( Pexp_sequence(_1, _3) )
# 32812 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 32821 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2282 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32827 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Location.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2284 "src/ocaml/preprocess/parser_raw.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 32885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _1_inlined4 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32954 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined4_ in
        let attrs2 =
          let _1 = _1_inlined3 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32963 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 32975 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 32983 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _startpos = _startpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3351 "src/ocaml/preprocess/parser_raw.mly"
    ( let args, res = args_res in
      let loc = make_loc (_startpos, _endpos_attrs2_) in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 32998 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.signature_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.signature) = let _1 =
          let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 33024 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 983 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_sig _startpos _endpos _1 )
# 33032 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1736 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33038 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.signature_item) = let _2 =
          let _1 = _1_inlined1 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33072 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1751 "src/ocaml/preprocess/parser_raw.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 33083 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1755 "src/ocaml/preprocess/parser_raw.mly"
        ( Psig_attribute _1 )
# 33109 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1031 "src/ocaml/preprocess/parser_raw.mly"
    ( mksig ~loc:_sloc _1 )
# 33117 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1757 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33123 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1760 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 33149 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33157 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33163 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1762 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_value _1 )
# 33189 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33197 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33203 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 33240 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3170 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 33245 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3153 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33251 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1764 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_type _1 )
# 33257 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33267 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33273 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 33310 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3170 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 33315 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3158 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33321 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1766 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typesubst _1 )
# 33327 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33337 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33343 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33430 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let cs = 
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 33437 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33447 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 = 
# 3947 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 33453 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33460 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3425 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 33472 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3412 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33478 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1768 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 33484 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33494 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33594 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let cs = 
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 33601 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33611 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3948 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 33622 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33630 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3425 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 33642 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3412 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33648 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1768 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_typext _1 )
# 33654 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33664 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33670 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1770 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_exception _1 )
# 33696 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33704 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33710 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_type) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33775 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33787 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33795 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1799 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 33809 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1772 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 33815 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33825 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33831 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined4 in
                
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33903 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined4_ in
              let body =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                let id =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33916 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let (_endpos_id_, _startpos_id_) = (_endpos__1_, _startpos__1_) in
                let _endpos = _endpos_id_ in
                let _symbolstartpos = _startpos_id_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1836 "src/ocaml/preprocess/parser_raw.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 33926 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 33937 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33945 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1827 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 33959 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1774 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 33965 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 33975 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 33981 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_substitution * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1776 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 34007 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34015 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34021 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34109 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let name =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34121 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34129 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1872 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk name mty ~attrs ~loc ~docs
  )
# 34143 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34149 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1861 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34155 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1778 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 34161 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34171 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34177 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1780 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 34203 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34211 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34217 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1782 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 34243 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34251 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34257 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_type) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined2 in
                
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34315 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined2_ in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34324 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1624 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 34338 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1784 "src/ocaml/preprocess/parser_raw.mly"
        ( psig_include _1 )
# 34344 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34354 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34360 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_description list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 34439 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34459 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let id =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 34471 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34479 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 2210 "src/ocaml/preprocess/parser_raw.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 34494 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 34500 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 2198 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34506 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1786 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 34512 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34522 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34528 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _1 = 
# 1788 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 34554 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1048 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 34562 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1790 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34568 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3776 "src/ocaml/preprocess/parser_raw.mly"
                 ( _1 )
# 34593 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34620 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3777 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 34629 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 768 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34656 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3778 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 34665 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34692 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3779 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 34701 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 768 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 34728 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3780 "src/ocaml/preprocess/parser_raw.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 34737 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 3082 "src/ocaml/preprocess/parser_raw.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 34782 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3053 "src/ocaml/preprocess/parser_raw.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 34789 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34799 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34805 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 = 
# 3076 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 34846 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 3058 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 34852 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34862 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34868 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 = 
# 3076 "src/ocaml/preprocess/parser_raw.mly"
    ( ps )
# 34909 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3062 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array _2 )
# 34914 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34924 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34930 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3064 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_array [] )
# 34963 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 34972 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3067 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 34978 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _startpos = _startpos__1_ in
        
# 4145 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.code _startpos _endpos _2 )
# 35019 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _startpos = _startpos__1_ in
        
# 4147 "src/ocaml/preprocess/parser_raw.mly"
    ( Fake.Meta.uncode _startpos _endpos _2 )
# 35053 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2457 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 35095 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2463 "src/ocaml/preprocess/parser_raw.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 35144 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2465 "src/ocaml/preprocess/parser_raw.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 35200 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2471 "src/ocaml/preprocess/parser_raw.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 35256 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35304 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35313 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2477 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident bracket _2 _1 _4 )
# 35321 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35369 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35378 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2483 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident paren _2 _1 _4  )
# 35386 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35434 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35443 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2489 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc lident brace _2 _1 _4 )
# 35451 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35511 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35522 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2495 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) bracket _4 _1 _6  )
# 35530 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35590 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35601 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2502 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) paren _4 _1 _6 )
# 35609 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 35669 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _6 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 35680 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2509 "src/ocaml/preprocess/parser_raw.mly"
      ( dotop_get ~loc:_sloc (ldot _3) brace _4 _1 _6  )
# 35688 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2516 "src/ocaml/preprocess/parser_raw.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 35744 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35800 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2529 "src/ocaml/preprocess/parser_raw.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 35806 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35817 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35868 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35874 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2531 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 35883 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35894 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 35946 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 35956 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 35962 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2537 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_new(_3), _2 )
# 35968 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__1_inlined3_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 35979 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36044 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36050 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 2539 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_pack _4, _3 )
# 36056 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__5_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36067 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 36149 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 36159 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 36165 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 2541 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 36174 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__1_ = _endpos__7_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2522 "src/ocaml/preprocess/parser_raw.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 36185 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36216 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2578 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_ident (_1) )
# 36222 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36231 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36237 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2580 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_constant _1 )
# 36263 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36271 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36277 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36308 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2582 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_construct(_1, None) )
# 36314 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36323 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36329 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2584 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_variant(_1, None) )
# 36355 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36363 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36369 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 830 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36397 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36411 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2586 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 36417 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36427 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _1 = 
# 2587 "src/ocaml/preprocess/parser_raw.mly"
            ("!")
# 36468 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36476 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2588 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 36482 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36492 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2890 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 36539 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2590 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override _2 )
# 36544 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36554 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36560 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2596 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_override [] )
# 36593 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36602 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36608 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36654 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2598 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_field(_1, _3) )
# 36660 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36670 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36676 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36736 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36745 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2600 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, _4) )
# 36751 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36761 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36767 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : ((string Location.loc * Parsetree.expression) list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2890 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 36822 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36832 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 36841 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2602 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 36852 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36862 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36868 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36901 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 36915 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 36923 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2609 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_send(_1, _3) )
# 36929 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 36939 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 36945 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (
# 841 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 36979 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1017 "src/ocaml/preprocess/parser_raw.mly"
   ( mkoperator ~loc:_sloc _1 )
# 36995 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2611 "src/ocaml/preprocess/parser_raw.mly"
      ( mkinfix _1 _2 _3 )
# 37001 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37011 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37017 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2613 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension _1 )
# 37043 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37051 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37057 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2615 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_hole )
# 37083 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37091 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37097 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let _1 = 
# 2616 "src/ocaml/preprocess/parser_raw.mly"
                                                    (Lident "()")
# 37147 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37156 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37168 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37177 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2617 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) (Pexp_construct(_3, None))) )
# 37184 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37194 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37200 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2623 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 37242 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37251 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37257 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37318 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37327 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__5_ in
            
# 2630 "src/ocaml/preprocess/parser_raw.mly"
      ( let (exten, fields) = _4 in
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos)
                        (Pexp_record(fields, exten))) )
# 37336 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37346 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37352 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37393 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 2638 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array(_2) )
# 37398 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37408 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37414 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 = 
# 2644 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_array [] )
# 37447 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37456 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37462 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37517 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37527 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37536 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__5_ in
            
# 2646 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array(_4))) )
# 37543 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37553 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37559 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37612 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37621 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__4_ in
            
# 2648 "src/ocaml/preprocess/parser_raw.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array [])) )
# 37629 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37639 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37645 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _2 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 37686 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2656 "src/ocaml/preprocess/parser_raw.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 37692 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37702 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37708 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2567 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr 
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 37755 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2661 "src/ocaml/preprocess/parser_raw.mly"
                       ( _1 )
# 37761 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37771 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37777 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2571 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr 
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 37824 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2661 "src/ocaml/preprocess/parser_raw.mly"
                       ( _1 )
# 37830 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37840 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37846 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2567 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr 
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 37908 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__3_ = _startpos__1_inlined1_ in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 37920 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 37929 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2663 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 37936 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 37946 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 37952 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2571 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr 
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 38014 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__3_ = _startpos__1_inlined1_ in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38026 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38035 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2663 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 38042 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38052 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38058 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _4 = 
# 2907 "src/ocaml/preprocess/parser_raw.mly"
    ( es )
# 38113 "src/ocaml/preprocess/parser_raw.ml"
             in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38123 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38132 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__5_ in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            
# 2665 "src/ocaml/preprocess/parser_raw.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:(_startpos__3_, _endpos) tail_exp in
        Pexp_open(od, list_exp) )
# 38144 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38154 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38160 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let _1 = 
# 2670 "src/ocaml/preprocess/parser_raw.mly"
                                                        (Lident "[]")
# 38210 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38219 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38231 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38240 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2671 "src/ocaml/preprocess/parser_raw.mly"
      ( Pexp_open(od, mkexp ~loc:_loc__3_ (Pexp_construct(_3, None))) )
# 38247 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38257 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38263 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _1 =
          let _1 =
            let _8 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 38360 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _5 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38370 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38376 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let od =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38387 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1683 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 38396 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos_od_ = _startpos__1_ in
            let _endpos = _endpos__9_ in
            let _symbolstartpos = _startpos_od_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2679 "src/ocaml/preprocess/parser_raw.mly"
      ( let modexp =
          mkexp_attrs ~loc:(_startpos__3_, _endpos)
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 38409 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__9_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1023 "src/ocaml/preprocess/parser_raw.mly"
    ( mkexp ~loc:_sloc _1 )
# 38419 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2525 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38425 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38456 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 2987 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_var (_1) )
# 38462 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38471 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 2988 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38477 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2989 "src/ocaml/preprocess/parser_raw.mly"
                             ( _1 )
# 38502 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2994 "src/ocaml/preprocess/parser_raw.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 38544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2996 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38569 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38634 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38644 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38650 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2998 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 38659 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined4 : (Parsetree.module_type) = Obj.magic _1_inlined4 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Location.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern) = let _6 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 3690 "src/ocaml/preprocess/parser_raw.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 38740 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38751 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let (_endpos__4_, _startpos__4_) = (_endpos__1_inlined3_, _startpos__1_inlined3_) in
        let _3 =
          let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 38762 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 4123 "src/ocaml/preprocess/parser_raw.mly"
                    ( _1, _2 )
# 38768 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3000 "src/ocaml/preprocess/parser_raw.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_loc__4_ (Ppat_unpack _4), _6))
          _3 )
# 38780 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3008 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_any )
# 38806 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38814 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38820 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3010 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constant _1 )
# 38846 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38854 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38860 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.constant) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3012 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_interval (_1, _3) )
# 38900 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38909 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38915 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 38946 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3014 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_construct(_1, None) )
# 38952 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 38961 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 38967 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3016 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_variant(_1, None) )
# 38993 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39001 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39007 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39046 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3018 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_type (_2) )
# 39052 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39062 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39068 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39113 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3020 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open(_1, _3) )
# 39119 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39129 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39135 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let _1 = 
# 3021 "src/ocaml/preprocess/parser_raw.mly"
                                                     (Lident "[]")
# 39185 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39194 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39205 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3022 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 39214 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39224 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39230 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _3 =
              let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let _1 = 
# 3023 "src/ocaml/preprocess/parser_raw.mly"
                                                 (Lident "()")
# 39280 "src/ocaml/preprocess/parser_raw.ml"
               in
              let _endpos__1_ = _endpos__2_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39289 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__3_ = _endpos__2_inlined1_ in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39300 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3024 "src/ocaml/preprocess/parser_raw.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 39309 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39319 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39325 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 39384 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3026 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_open (_1, _4) )
# 39390 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39400 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39406 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3036 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_constraint(_2, _4) )
# 39460 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39469 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39475 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _1 = 
# 3047 "src/ocaml/preprocess/parser_raw.mly"
      ( Ppat_extension _1 )
# 39501 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1025 "src/ocaml/preprocess/parser_raw.mly"
    ( mkpat ~loc:_sloc _1 )
# 39509 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3004 "src/ocaml/preprocess/parser_raw.mly"
      ( _1 )
# 39515 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 39536 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4031 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 39544 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 39565 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4032 "src/ocaml/preprocess/parser_raw.mly"
           ( _1 )
# 39573 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4033 "src/ocaml/preprocess/parser_raw.mly"
        ( "and" )
# 39598 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4034 "src/ocaml/preprocess/parser_raw.mly"
       ( "as" )
# 39623 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4035 "src/ocaml/preprocess/parser_raw.mly"
           ( "assert" )
# 39648 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4036 "src/ocaml/preprocess/parser_raw.mly"
          ( "begin" )
# 39673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4037 "src/ocaml/preprocess/parser_raw.mly"
          ( "class" )
# 39698 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4038 "src/ocaml/preprocess/parser_raw.mly"
               ( "constraint" )
# 39723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4039 "src/ocaml/preprocess/parser_raw.mly"
       ( "do" )
# 39748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4040 "src/ocaml/preprocess/parser_raw.mly"
         ( "done" )
# 39773 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4041 "src/ocaml/preprocess/parser_raw.mly"
           ( "downto" )
# 39798 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4042 "src/ocaml/preprocess/parser_raw.mly"
         ( "else" )
# 39823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4043 "src/ocaml/preprocess/parser_raw.mly"
        ( "end" )
# 39848 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4044 "src/ocaml/preprocess/parser_raw.mly"
              ( "exception" )
# 39873 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4045 "src/ocaml/preprocess/parser_raw.mly"
             ( "external" )
# 39898 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4046 "src/ocaml/preprocess/parser_raw.mly"
          ( "false" )
# 39923 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4047 "src/ocaml/preprocess/parser_raw.mly"
        ( "for" )
# 39948 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4048 "src/ocaml/preprocess/parser_raw.mly"
        ( "fun" )
# 39973 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4049 "src/ocaml/preprocess/parser_raw.mly"
             ( "function" )
# 39998 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4050 "src/ocaml/preprocess/parser_raw.mly"
            ( "functor" )
# 40023 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4051 "src/ocaml/preprocess/parser_raw.mly"
             ( "nonlocal_" )
# 40048 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4052 "src/ocaml/preprocess/parser_raw.mly"
       ( "if" )
# 40073 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4053 "src/ocaml/preprocess/parser_raw.mly"
       ( "in" )
# 40098 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4054 "src/ocaml/preprocess/parser_raw.mly"
            ( "include" )
# 40123 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4055 "src/ocaml/preprocess/parser_raw.mly"
            ( "inherit" )
# 40148 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4056 "src/ocaml/preprocess/parser_raw.mly"
                ( "initializer" )
# 40173 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4057 "src/ocaml/preprocess/parser_raw.mly"
         ( "lazy" )
# 40198 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4058 "src/ocaml/preprocess/parser_raw.mly"
        ( "let" )
# 40223 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4059 "src/ocaml/preprocess/parser_raw.mly"
          ( "local_" )
# 40248 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4060 "src/ocaml/preprocess/parser_raw.mly"
          ( "match" )
# 40273 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4061 "src/ocaml/preprocess/parser_raw.mly"
           ( "method" )
# 40298 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4062 "src/ocaml/preprocess/parser_raw.mly"
           ( "module" )
# 40323 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4063 "src/ocaml/preprocess/parser_raw.mly"
            ( "mutable" )
# 40348 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4064 "src/ocaml/preprocess/parser_raw.mly"
        ( "new" )
# 40373 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4065 "src/ocaml/preprocess/parser_raw.mly"
           ( "nonrec" )
# 40398 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4066 "src/ocaml/preprocess/parser_raw.mly"
           ( "object" )
# 40423 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4067 "src/ocaml/preprocess/parser_raw.mly"
       ( "of" )
# 40448 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4068 "src/ocaml/preprocess/parser_raw.mly"
         ( "open" )
# 40473 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4069 "src/ocaml/preprocess/parser_raw.mly"
       ( "or" )
# 40498 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4070 "src/ocaml/preprocess/parser_raw.mly"
            ( "private" )
# 40523 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4071 "src/ocaml/preprocess/parser_raw.mly"
        ( "rec" )
# 40548 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4072 "src/ocaml/preprocess/parser_raw.mly"
        ( "sig" )
# 40573 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4073 "src/ocaml/preprocess/parser_raw.mly"
           ( "struct" )
# 40598 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4074 "src/ocaml/preprocess/parser_raw.mly"
         ( "then" )
# 40623 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4075 "src/ocaml/preprocess/parser_raw.mly"
       ( "to" )
# 40648 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4076 "src/ocaml/preprocess/parser_raw.mly"
         ( "true" )
# 40673 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4077 "src/ocaml/preprocess/parser_raw.mly"
        ( "try" )
# 40698 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4078 "src/ocaml/preprocess/parser_raw.mly"
         ( "type" )
# 40723 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4079 "src/ocaml/preprocess/parser_raw.mly"
        ( "val" )
# 40748 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4080 "src/ocaml/preprocess/parser_raw.mly"
            ( "virtual" )
# 40773 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4081 "src/ocaml/preprocess/parser_raw.mly"
         ( "when" )
# 40798 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4082 "src/ocaml/preprocess/parser_raw.mly"
          ( "while" )
# 40823 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4083 "src/ocaml/preprocess/parser_raw.mly"
         ( "with" )
# 40848 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = 
# 3328 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40873 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v : (Parsetree.type_exception * string Location.loc option) = let attrs =
          let _1 = _1_inlined5 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40949 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs_ = _endpos__1_inlined5_ in
        let attrs2 =
          let _1 = _1_inlined4 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40958 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let lid =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40969 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 40980 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 40988 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3337 "src/ocaml/preprocess/parser_raw.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 41001 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2817 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 41033 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2819 "src/ocaml/preprocess/parser_raw.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 41068 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Location.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 = 
# 2708 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 41121 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2821 "src/ocaml/preprocess/parser_raw.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 41129 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41177 "src/ocaml/preprocess/parser_raw.ml"
             in
            let local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41182 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41187 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41192 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41202 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41208 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41265 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41271 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41276 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41281 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41291 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41297 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 41346 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41356 "src/ocaml/preprocess/parser_raw.ml"
             in
            let local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41361 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 41366 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41371 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41381 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41387 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 41443 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41455 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41461 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 41466 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41471 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41481 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41487 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41528 "src/ocaml/preprocess/parser_raw.ml"
             in
            let local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41533 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 41538 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41543 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41553 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41559 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41609 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41615 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 41620 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3573 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label, mktyp_local_if local domain, codomain) )
# 41625 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41635 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41641 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41689 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41694 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41699 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41704 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 41711 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41721 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41727 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41782 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41787 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41792 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41797 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 41804 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41814 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41820 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 41875 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41882 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41888 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41893 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 41900 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 41910 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 41916 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41978 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 41985 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 41991 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3592 "src/ocaml/preprocess/parser_raw.mly"
      ( Optional label )
# 41996 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42003 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42013 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42019 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42068 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42078 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42083 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42088 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42093 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42100 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42110 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42116 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42172 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42182 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42187 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42192 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42197 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42204 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42214 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42220 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42276 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42286 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42293 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42299 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42304 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42311 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42321 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42327 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 42390 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42400 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42407 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42413 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3594 "src/ocaml/preprocess/parser_raw.mly"
      ( Labelled label )
# 42418 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42425 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42435 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42441 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42482 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42487 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42492 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42497 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42504 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42514 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42520 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42568 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain = 
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42573 "src/ocaml/preprocess/parser_raw.ml"
             in
            let arg_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42578 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42583 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42590 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42600 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42606 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3600 "src/ocaml/preprocess/parser_raw.mly"
    ( false )
# 42654 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42661 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42667 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42672 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42679 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42689 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42695 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let ret_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42750 "src/ocaml/preprocess/parser_raw.ml"
             in
            let domain =
              let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
              
# 988 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 42757 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let arg_local = 
# 3602 "src/ocaml/preprocess/parser_raw.mly"
    ( true )
# 42763 "src/ocaml/preprocess/parser_raw.ml"
             in
            let label = 
# 3596 "src/ocaml/preprocess/parser_raw.mly"
      ( Nolabel )
# 42768 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 3584 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_arrow(label,
            mktyp_local_if arg_local domain,
            mktyp_local_if ret_local (maybe_curry_typ codomain)) )
# 42775 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_codomain_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 42785 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3588 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42791 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.structure) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 42818 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let items = 
# 1060 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 42824 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1486 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 42829 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 42835 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 982 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 42844 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1479 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 42850 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_xss_ in
        let _v : (Parsetree.structure) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 42891 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let items =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 42901 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 42906 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 994 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 42914 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 1013 "src/ocaml/preprocess/parser_raw.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 42924 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 42930 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1486 "src/ocaml/preprocess/parser_raw.mly"
    ( items )
# 42936 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 42942 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 982 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 42951 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1479 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 42957 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 4153 "src/ocaml/preprocess/parser_raw.mly"
    ( val_of_lwt_bindings ~loc:_loc _1 )
# 42985 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Ast_helper.let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1508 "src/ocaml/preprocess/parser_raw.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 43013 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43049 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _endpos__2_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1511 "src/ocaml/preprocess/parser_raw.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 43060 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 43070 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43076 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1514 "src/ocaml/preprocess/parser_raw.mly"
        ( Pstr_attribute _1 )
# 43102 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1029 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstr ~loc:_sloc _1 )
# 43110 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43116 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1518 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 43142 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43150 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43156 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1520 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_primitive _1 )
# 43182 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43190 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43196 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 43233 "src/ocaml/preprocess/parser_raw.ml"
                 in
                
# 3170 "src/ocaml/preprocess/parser_raw.mly"
  ( _1 )
# 43238 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3153 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43244 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1522 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_type _1 )
# 43250 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43260 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43266 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43353 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let cs = 
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 43360 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43370 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 = 
# 3947 "src/ocaml/preprocess/parser_raw.mly"
                ( Recursive )
# 43376 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43383 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3425 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 43395 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3408 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43401 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1524 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 43407 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43417 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43423 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43517 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let cs = 
# 1213 "src/ocaml/preprocess/parser_raw.mly"
    ( List.rev xs )
# 43524 "src/ocaml/preprocess/parser_raw.ml"
                 in
                let tid =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43534 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _4 =
                  let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  let _loc = (_startpos, _endpos) in
                  
# 3948 "src/ocaml/preprocess/parser_raw.mly"
                ( not_expecting _loc "nonrec flag"; Recursive )
# 43545 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43553 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3425 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 43565 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 3408 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43571 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1524 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_typext _1 )
# 43577 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43587 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43593 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1526 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_exception _1 )
# 43619 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43627 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43633 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43698 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let name =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43710 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43718 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1552 "src/ocaml/preprocess/parser_raw.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk name body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 43731 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1528 "src/ocaml/preprocess/parser_raw.mly"
        ( _1 )
# 43737 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43747 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43753 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_binding list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43834 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let name =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 43846 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43854 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1587 "src/ocaml/preprocess/parser_raw.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk name body ~attrs ~loc ~docs
  )
# 43869 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 43875 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1575 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43881 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1530 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_recmodule _1 )
# 43887 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43897 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43903 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1532 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 43929 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43937 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43943 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_declaration * string Location.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1534 "src/ocaml/preprocess/parser_raw.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 43969 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 43977 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 43983 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 44055 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let _1 =
                let a =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44075 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let id =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44087 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44095 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1912 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 44110 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1221 "src/ocaml/preprocess/parser_raw.mly"
    ( let (x, b) = a in x, b :: bs )
# 44116 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1901 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44122 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1536 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 44128 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos_bs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44138 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44144 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Location.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 = 
# 1538 "src/ocaml/preprocess/parser_raw.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 44170 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44178 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44184 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_expr) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.structure_item) = let _1 =
          let _1 =
            let _1 =
              let attrs2 =
                let _1 = _1_inlined2 in
                
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44242 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined2_ in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44251 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1624 "src/ocaml/preprocess/parser_raw.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 44265 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 1540 "src/ocaml/preprocess/parser_raw.mly"
        ( pstr_include _1 )
# 44271 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined2_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1046 "src/ocaml/preprocess/parser_raw.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 44281 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1542 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44287 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4016 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-" )
# 44312 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4017 "src/ocaml/preprocess/parser_raw.mly"
                                                ( "-." )
# 44337 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.row_field) = let _5 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44392 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined1_ in
        let _4 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 44401 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 44406 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3720 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44412 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44422 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3706 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 44433 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.row_field) = let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 44467 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__2_ = _endpos__1_inlined1_ in
        let _1 =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44478 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3710 "src/ocaml/preprocess/parser_raw.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 44489 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : (Parsetree.toplevel_phrase) = let arg = 
# 124 "<standard.mly>"
    ( None )
# 44521 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos_arg_ = _endpos__1_inlined1_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44532 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44541 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 44574 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3914 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (s, _, _) = _1 in Pdir_string s )
# 44587 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44595 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44601 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44613 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44622 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 44655 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3915 "src/ocaml/preprocess/parser_raw.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 44668 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44676 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44682 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44694 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44703 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3916 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 44745 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44753 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44759 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44771 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44780 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let x =
            let _1 = 
# 3917 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_ident _1 )
# 44822 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44830 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44836 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44848 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44857 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
          let x =
            let _1 = 
# 3918 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool false )
# 44899 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44907 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44913 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 44925 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 44934 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.toplevel_phrase) = let arg =
          let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
          let x =
            let _1 = 
# 3919 "src/ocaml/preprocess/parser_raw.mly"
                  ( Pdir_bool true )
# 44976 "src/ocaml/preprocess/parser_raw.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1051 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 44984 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 126 "<standard.mly>"
    ( Some x )
# 44990 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_arg_ = _endpos__1_inlined2_ in
        let dir =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 45002 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_arg_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3910 "src/ocaml/preprocess/parser_raw.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 45011 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = let _1 =
          let _1 =
            let _1 =
              let attrs = 
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45053 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 45058 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            let _startpos__1_ = _startpos_e_ in
            let _startpos = _startpos__1_ in
            
# 994 "src/ocaml/preprocess/parser_raw.mly"
  ( text_str _startpos @ [_1] )
# 45066 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let _startpos__1_ = _startpos_e_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 982 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 45075 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1259 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 45081 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = let _1 =
          let _1 = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 45114 "src/ocaml/preprocess/parser_raw.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 982 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_str _startpos _endpos _1 )
# 45122 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1263 "src/ocaml/preprocess/parser_raw.mly"
    ( Ptop_def _1 )
# 45128 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1267 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45160 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1270 "src/ocaml/preprocess/parser_raw.mly"
    ( raise End_of_file )
# 45185 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3612 "src/ocaml/preprocess/parser_raw.mly"
      ( ty )
# 45210 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            let tys =
              let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 45238 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1152 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 45243 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 3615 "src/ocaml/preprocess/parser_raw.mly"
        ( Ptyp_tuple tys )
# 45249 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 45259 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3617 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45265 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2910 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, None) )
# 45297 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2911 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (Some _2, Some _4) )
# 45343 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2912 "src/ocaml/preprocess/parser_raw.mly"
                                                ( (None, Some _2) )
# 45375 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3244 "src/ocaml/preprocess/parser_raw.mly"
      ( (Ptype_abstract, Public, None) )
# 45393 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3246 "src/ocaml/preprocess/parser_raw.mly"
      ( _2 )
# 45425 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3872 "src/ocaml/preprocess/parser_raw.mly"
                                            ( _1 )
# 45450 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance * Asttypes.injectivity) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = 
# 3261 "src/ocaml/preprocess/parser_raw.mly"
                                       ( _2, _1 )
# 45482 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3254 "src/ocaml/preprocess/parser_raw.mly"
      ( [] )
# 45500 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3256 "src/ocaml/preprocess/parser_raw.mly"
      ( [p] )
# 45525 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = let ps =
          let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 45565 "src/ocaml/preprocess/parser_raw.ml"
           in
          
# 1124 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 45570 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3258 "src/ocaml/preprocess/parser_raw.mly"
      ( ps )
# 45576 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar : (string) = Obj.magic tyvar in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tyvar_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3266 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_var tyvar )
# 45609 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos__1_ = _endpos_tyvar_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 45618 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3269 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45624 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 = 
# 3268 "src/ocaml/preprocess/parser_raw.mly"
      ( Ptyp_any )
# 45650 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1027 "src/ocaml/preprocess/parser_raw.mly"
    ( mktyp ~loc:_sloc _1 )
# 45658 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3269 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45664 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3273 "src/ocaml/preprocess/parser_raw.mly"
                                            ( NoVariance, NoInjectivity )
# 45682 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3274 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, NoInjectivity )
# 45707 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3275 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, NoInjectivity )
# 45732 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3276 "src/ocaml/preprocess/parser_raw.mly"
                                            ( NoVariance, Injective )
# 45757 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3277 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, Injective )
# 45789 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3277 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Covariant, Injective )
# 45821 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3278 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, Injective )
# 45853 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3278 "src/ocaml/preprocess/parser_raw.mly"
                                            ( Contravariant, Injective )
# 45885 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 782 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45906 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 3280 "src/ocaml/preprocess/parser_raw.mly"
      ( if _1 = "+!" then Covariant, Injective else
        if _1 = "-!" then Contravariant, Injective else
        (expecting _loc__1_ "type_variance";
         NoVariance, NoInjectivity) )
# 45918 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 830 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 45939 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 3285 "src/ocaml/preprocess/parser_raw.mly"
      ( if _1 = "!+" then Covariant, Injective else
        if _1 = "!-" then Contravariant, Injective else
        (expecting _loc__1_ "type_variance";
         NoVariance, NoInjectivity) )
# 45951 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 45985 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let _1 = 
# 1060 "src/ocaml/preprocess/parser_raw.mly"
    ( [] )
# 45991 "src/ocaml/preprocess/parser_raw.ml"
               in
              
# 1290 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 45996 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 46002 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 986 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 46011 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1283 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46017 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = let _1 =
          let _1 =
            let ys = 
# 260 "<standard.mly>"
    ( List.flatten xss )
# 46065 "src/ocaml/preprocess/parser_raw.ml"
             in
            let xs =
              let _1 =
                let x =
                  let _1 =
                    let _1 =
                      let attrs = 
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46075 "src/ocaml/preprocess/parser_raw.ml"
                       in
                      
# 1493 "src/ocaml/preprocess/parser_raw.mly"
    ( mkstrexp e attrs )
# 46080 "src/ocaml/preprocess/parser_raw.ml"
                      
                    in
                    
# 1004 "src/ocaml/preprocess/parser_raw.mly"
  ( Ptop_def [_1] )
# 46086 "src/ocaml/preprocess/parser_raw.ml"
                    
                  in
                  let _startpos__1_ = _startpos_e_ in
                  let _startpos = _startpos__1_ in
                  
# 1002 "src/ocaml/preprocess/parser_raw.mly"
  ( text_def _startpos @ [_1] )
# 46094 "src/ocaml/preprocess/parser_raw.ml"
                  
                in
                
# 1062 "src/ocaml/preprocess/parser_raw.mly"
    ( x )
# 46100 "src/ocaml/preprocess/parser_raw.ml"
                
              in
              
# 1290 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46106 "src/ocaml/preprocess/parser_raw.ml"
              
            in
            
# 267 "<standard.mly>"
    ( xs @ ys )
# 46112 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 986 "src/ocaml/preprocess/parser_raw.mly"
                              ( extra_def _startpos _endpos _1 )
# 46121 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 1283 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46127 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3790 "src/ocaml/preprocess/parser_raw.mly"
                              ( _2 )
# 46166 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46187 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3798 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 46195 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3799 "src/ocaml/preprocess/parser_raw.mly"
                              ( _1 )
# 46220 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3866 "src/ocaml/preprocess/parser_raw.mly"
                                           ( _1 )
# 46245 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46292 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let label =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 46305 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46313 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46319 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 4009 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 46324 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2058 "src/ocaml/preprocess/parser_raw.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 46329 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46376 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 46389 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46397 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46403 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _1 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 46408 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2060 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 46413 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46466 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 46480 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46488 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46496 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _1 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 46502 "src/ocaml/preprocess/parser_raw.ml"
         in
        
# 2060 "src/ocaml/preprocess/parser_raw.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 46507 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined1 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46561 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 46574 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46582 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined1_ in
        let _2 = 
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46589 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
        let _1 = 
# 4012 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Fresh )
# 46595 "src/ocaml/preprocess/parser_raw.ml"
         in
        let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2063 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 46615 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined2 : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 46675 "src/ocaml/preprocess/parser_raw.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _1 = 
# 3764 "src/ocaml/preprocess/parser_raw.mly"
                                                ( _1 )
# 46689 "src/ocaml/preprocess/parser_raw.ml"
           in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46697 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _startpos__4_ = _startpos__1_inlined2_ in
        let _2 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46706 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
        let _1 = 
# 4013 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Override )
# 46713 "src/ocaml/preprocess/parser_raw.ml"
         in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
          _startpos__1_
        else
          if _startpos__2_ != _endpos__2_ then
            _startpos__2_
          else
            if _startpos__3_ != _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2063 "src/ocaml/preprocess/parser_raw.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 46732 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Location.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : (Parsetree.value_description * string Location.loc option) = let attrs2 =
          let _1 = _1_inlined3 in
          
# 4108 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46801 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos_attrs2_ = _endpos__1_inlined3_ in
        let id =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 46813 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let attrs1 =
          let _1 = _1_inlined1 in
          
# 4112 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 46821 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos_attrs2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3115 "src/ocaml/preprocess/parser_raw.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 46834 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3973 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Concrete )
# 46852 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3974 "src/ocaml/preprocess/parser_raw.mly"
                                                ( Virtual )
# 46877 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3997 "src/ocaml/preprocess/parser_raw.mly"
            ( Immutable )
# 46902 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3998 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 46934 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3999 "src/ocaml/preprocess/parser_raw.mly"
                    ( Mutable )
# 46966 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 4004 "src/ocaml/preprocess/parser_raw.mly"
            ( Public )
# 46991 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 4005 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 47023 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 4006 "src/ocaml/preprocess/parser_raw.mly"
                    ( Private )
# 47055 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.with_constraint) = let _6 =
          let _1 =
            let xs = 
# 253 "<standard.mly>"
    ( List.rev xs )
# 47117 "src/ocaml/preprocess/parser_raw.ml"
             in
            
# 1074 "src/ocaml/preprocess/parser_raw.mly"
    ( xs )
# 47122 "src/ocaml/preprocess/parser_raw.ml"
            
          in
          
# 3215 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47128 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__6_ = _endpos_xs_ in
        let _5 =
          let _1 = _1_inlined2 in
          
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47137 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47148 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3458 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 47165 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _5 =
          let _1 = _1_inlined2 in
          
# 3535 "src/ocaml/preprocess/parser_raw.mly"
    ( _1 )
# 47220 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos__5_ = _endpos__1_inlined2_ in
        let _3 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47232 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 3471 "src/ocaml/preprocess/parser_raw.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 47247 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47298 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47309 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3479 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_module (_2, _4) )
# 47315 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47366 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        let _2 =
          let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 990 "src/ocaml/preprocess/parser_raw.mly"
    ( mkrhs _1 _sloc )
# 47377 "src/ocaml/preprocess/parser_raw.ml"
          
        in
        
# 3481 "src/ocaml/preprocess/parser_raw.mly"
      ( Pwith_modsubst (_2, _4) )
# 47383 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3484 "src/ocaml/preprocess/parser_raw.mly"
                   ( Public )
# 47408 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3485 "src/ocaml/preprocess/parser_raw.mly"
                   ( Private )
# 47440 "src/ocaml/preprocess/parser_raw.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
  module Symbols = struct
    
    type _ terminal = 
      | T_error : unit terminal
      | T_WITH : unit terminal
      | T_WHILE_LWT : unit terminal
      | T_WHILE : unit terminal
      | T_WHEN : unit terminal
      | T_VIRTUAL : unit terminal
      | T_VAL : unit terminal
      | T_UNDERSCORE : unit terminal
      | T_UIDENT : (
# 858 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47478 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_TYPE : unit terminal
      | T_TRY_LWT : unit terminal
      | T_TRY : unit terminal
      | T_TRUE : unit terminal
      | T_TO : unit terminal
      | T_TILDE : unit terminal
      | T_THEN : unit terminal
      | T_STRUCT : unit terminal
      | T_STRING : (
# 844 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t * string option)
# 47491 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_STAR : unit terminal
      | T_SIG : unit terminal
      | T_SEMISEMI : unit terminal
      | T_SEMI : unit terminal
      | T_RPAREN : unit terminal
      | T_REC : unit terminal
      | T_RBRACKET : unit terminal
      | T_RBRACE : unit terminal
      | T_QUOTED_STRING_ITEM : (
# 849 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 47504 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTED_STRING_EXPR : (
# 846 "src/ocaml/preprocess/parser_raw.mly"
  (string * Location.t * string * Location.t * string option)
# 47509 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_QUOTE : unit terminal
      | T_QUESTIONQUESTION : unit terminal
      | T_QUESTION : unit terminal
      | T_PRIVATE : unit terminal
      | T_PREFIXOP : (
# 830 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47518 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_PLUSEQ : unit terminal
      | T_PLUSDOT : unit terminal
      | T_PLUS : unit terminal
      | T_PERCENT : unit terminal
      | T_OR : unit terminal
      | T_OPTLABEL : (
# 823 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47528 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_OPEN : unit terminal
      | T_OF : unit terminal
      | T_OBJECT : unit terminal
      | T_NONREC : unit terminal
      | T_NONLOCAL : unit terminal
      | T_NEW : unit terminal
      | T_MUTABLE : unit terminal
      | T_MODULE : unit terminal
      | T_MINUSGREATER : unit terminal
      | T_MINUSDOT : unit terminal
      | T_MINUS : unit terminal
      | T_METHOD : unit terminal
      | T_MATCH_LWT : unit terminal
      | T_MATCH : unit terminal
      | T_LPAREN : unit terminal
      | T_LOCAL : unit terminal
      | T_LIDENT : (
# 804 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47549 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET_LWT : unit terminal
      | T_LETOP : (
# 786 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47555 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_LET : unit terminal
      | T_LESSMINUS : unit terminal
      | T_LESS : unit terminal
      | T_LBRACKETPERCENTPERCENT : unit terminal
      | T_LBRACKETPERCENT : unit terminal
      | T_LBRACKETLESS : unit terminal
      | T_LBRACKETGREATER : unit terminal
      | T_LBRACKETBAR : unit terminal
      | T_LBRACKETATATAT : unit terminal
      | T_LBRACKETATAT : unit terminal
      | T_LBRACKETAT : unit terminal
      | T_LBRACKET : unit terminal
      | T_LBRACELESS : unit terminal
      | T_LBRACE : unit terminal
      | T_LAZY : unit terminal
      | T_LABEL : (
# 791 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47575 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INT : (
# 790 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 47580 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INITIALIZER : unit terminal
      | T_INHERIT : unit terminal
      | T_INFIXOP4 : (
# 784 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47587 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP3 : (
# 783 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47592 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP2 : (
# 782 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47597 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP1 : (
# 781 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47602 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INFIXOP0 : (
# 780 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47607 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_INCLUDE : unit terminal
      | T_IN : unit terminal
      | T_IF : unit terminal
      | T_HASHOP : (
# 841 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47615 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_HASH : unit terminal
      | T_GREATERRBRACKET : unit terminal
      | T_GREATERRBRACE : unit terminal
      | T_GREATERDOT : unit terminal
      | T_GREATER : unit terminal
      | T_GLOBAL : unit terminal
      | T_FUNCTOR : unit terminal
      | T_FUNCTION : unit terminal
      | T_FUN : unit terminal
      | T_FOR_LWT : unit terminal
      | T_FOR : unit terminal
      | T_FLOAT : (
# 768 "src/ocaml/preprocess/parser_raw.mly"
       (string * char option)
# 47631 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_FINALLY_LWT : unit terminal
      | T_FALSE : unit terminal
      | T_EXTERNAL : unit terminal
      | T_EXCEPTION : unit terminal
      | T_EQUAL : unit terminal
      | T_EOL : unit terminal
      | T_EOF : unit terminal
      | T_END : unit terminal
      | T_ELSE : unit terminal
      | T_DOWNTO : unit terminal
      | T_DOTTILDE : unit terminal
      | T_DOTOP : (
# 785 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47647 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DOTLESS : unit terminal
      | T_DOTDOT : unit terminal
      | T_DOT : unit terminal
      | T_DONE : unit terminal
      | T_DOCSTRING : (
# 866 "src/ocaml/preprocess/parser_raw.mly"
       (Docstrings.docstring)
# 47656 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_DO : unit terminal
      | T_CONSTRAINT : unit terminal
      | T_COMMENT : (
# 865 "src/ocaml/preprocess/parser_raw.mly"
       (string * Location.t)
# 47663 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_COMMA : unit terminal
      | T_COLONGREATER : unit terminal
      | T_COLONEQUAL : unit terminal
      | T_COLONCOLON : unit terminal
      | T_COLON : unit terminal
      | T_CLASS : unit terminal
      | T_CHAR : (
# 748 "src/ocaml/preprocess/parser_raw.mly"
       (char)
# 47674 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_BEGIN : unit terminal
      | T_BARRBRACKET : unit terminal
      | T_BARBAR : unit terminal
      | T_BAR : unit terminal
      | T_BANG : unit terminal
      | T_BACKQUOTE : unit terminal
      | T_ASSERT : unit terminal
      | T_AS : unit terminal
      | T_ANDOP : (
# 787 "src/ocaml/preprocess/parser_raw.mly"
       (string)
# 47687 "src/ocaml/preprocess/parser_raw.ml"
    ) terminal
      | T_AND : unit terminal
      | T_AMPERSAND : unit terminal
      | T_AMPERAMPER : unit terminal
    
    type _ nonterminal = 
      | N_with_type_binder : (Asttypes.private_flag) nonterminal
      | N_with_constraint : (Parsetree.with_constraint) nonterminal
      | N_virtual_with_private_flag : (Asttypes.private_flag) nonterminal
      | N_virtual_with_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_virtual_flag : (Asttypes.virtual_flag) nonterminal
      | N_value_description : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_value : ((string Location.loc * Asttypes.mutable_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_val_longident : (Longident.t) nonterminal
      | N_val_ident : (string) nonterminal
      | N_val_extra_ident : (string) nonterminal
      | N_use_file : (Parsetree.toplevel_phrase list) nonterminal
      | N_type_variance : (Asttypes.variance * Asttypes.injectivity) nonterminal
      | N_type_variable : (Parsetree.core_type) nonterminal
      | N_type_parameters : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_type_parameter : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) nonterminal
      | N_type_longident : (Longident.t) nonterminal
      | N_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_type_constraint : (Parsetree.core_type option * Parsetree.core_type option) nonterminal
      | N_tuple_type : (Parsetree.core_type) nonterminal
      | N_toplevel_phrase : (Parsetree.toplevel_phrase) nonterminal
      | N_toplevel_directive : (Parsetree.toplevel_phrase) nonterminal
      | N_tag_field : (Parsetree.row_field) nonterminal
      | N_subtractive : (string) nonterminal
      | N_structure_item : (Parsetree.structure_item) nonterminal
      | N_structure : (Parsetree.structure) nonterminal
      | N_strict_function_type : (Parsetree.core_type) nonterminal
      | N_strict_binding : (Parsetree.expression) nonterminal
      | N_str_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_single_attr_id : (string) nonterminal
      | N_simple_pattern_not_ident : (Parsetree.pattern) nonterminal
      | N_simple_pattern : (Parsetree.pattern) nonterminal
      | N_simple_expr : (Parsetree.expression) nonterminal
      | N_simple_delimited_pattern : (Parsetree.pattern) nonterminal
      | N_signed_constant : (Parsetree.constant) nonterminal
      | N_signature_item : (Parsetree.signature_item) nonterminal
      | N_signature : (Parsetree.signature) nonterminal
      | N_sig_exception_declaration : (Parsetree.type_exception * string Location.loc option) nonterminal
      | N_seq_expr : (Parsetree.expression) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_ : ((Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_pattern_ : (Parsetree.pattern list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_ : ((string Location.loc * Parsetree.expression) list) nonterminal
      | N_separated_or_terminated_nonempty_list_SEMI_expr_ : (Parsetree.expression list) nonterminal
      | N_row_field : (Parsetree.row_field) nonterminal
      | N_reversed_separated_nontrivial_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_expr_ : (Parsetree.expression list) nonterminal
      | N_reversed_separated_nontrivial_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_STAR_atomic_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_type_parameter_ : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_reversed_separated_nonempty_llist_COMMA_core_type_ : (Parsetree.core_type list) nonterminal
      | N_reversed_separated_nonempty_llist_BAR_row_field_ : (Parsetree.row_field list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_with_constraint_ : (Parsetree.with_constraint list) nonterminal
      | N_reversed_separated_nonempty_llist_AND_comprehension_clause_ : (Extensions.comprehension_clause list) nonterminal
      | N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_ : (Parsetree.core_type list) nonterminal
      | N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_ : (Parsetree.case list) nonterminal
      | N_reversed_nonempty_llist_typevar_ : (string Location.loc list) nonterminal
      | N_reversed_nonempty_llist_name_tag_ : (string list) nonterminal
      | N_reversed_nonempty_llist_labeled_simple_expr_ : ((Asttypes.arg_label * Parsetree.expression) list) nonterminal
      | N_reversed_nonempty_llist_functor_arg_ : ((Lexing.position * Parsetree.functor_parameter) list) nonterminal
      | N_reversed_llist_preceded_CONSTRAINT_constrain__ : ((Parsetree.core_type * Parsetree.core_type * Warnings.loc) list) nonterminal
      | N_reversed_bar_llist_extension_constructor_declaration_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_extension_constructor_ : (Parsetree.extension_constructor list) nonterminal
      | N_reversed_bar_llist_constructor_declaration_ : (Parsetree.constructor_declaration list) nonterminal
      | N_record_expr_content : (Parsetree.expression option *
  (Longident.t Location.loc * Parsetree.expression) list) nonterminal
      | N_rec_flag : (Asttypes.rec_flag) nonterminal
      | N_private_virtual_flags : (Asttypes.private_flag * Asttypes.virtual_flag) nonterminal
      | N_private_flag : (Asttypes.private_flag) nonterminal
      | N_primitive_declaration : (Parsetree.value_description * string Location.loc option) nonterminal
      | N_post_item_attribute : (Parsetree.attribute) nonterminal
      | N_possibly_poly_core_type_no_attr_ : (Parsetree.core_type) nonterminal
      | N_possibly_poly_core_type_ : (Parsetree.core_type) nonterminal
      | N_payload : (Parsetree.payload) nonterminal
      | N_pattern_var : (Parsetree.pattern) nonterminal
      | N_pattern_no_exn : (Parsetree.pattern) nonterminal
      | N_pattern_gen : (Parsetree.pattern) nonterminal
      | N_pattern_comma_list_pattern_no_exn_ : (Parsetree.pattern list) nonterminal
      | N_pattern_comma_list_pattern_ : (Parsetree.pattern list) nonterminal
      | N_pattern : (Parsetree.pattern) nonterminal
      | N_parse_val_longident : (Longident.t) nonterminal
      | N_parse_pattern : (Parsetree.pattern) nonterminal
      | N_parse_mty_longident : (Longident.t) nonterminal
      | N_parse_mod_longident : (Longident.t) nonterminal
      | N_parse_mod_ext_longident : (Longident.t) nonterminal
      | N_parse_expression : (Parsetree.expression) nonterminal
      | N_parse_core_type : (Parsetree.core_type) nonterminal
      | N_parse_constr_longident : (Longident.t) nonterminal
      | N_parse_any_longident : (Longident.t) nonterminal
      | N_paren_module_expr : (Parsetree.module_expr) nonterminal
      | N_optlabel : (string) nonterminal
      | N_option_type_constraint_ : ((Parsetree.core_type option * Parsetree.core_type option) option) nonterminal
      | N_option_preceded_EQUAL_seq_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_EQUAL_pattern__ : (Parsetree.pattern option) nonterminal
      | N_option_preceded_EQUAL_module_type__ : (Parsetree.module_type option) nonterminal
      | N_option_preceded_EQUAL_expr__ : (Parsetree.expression option) nonterminal
      | N_option_preceded_COLON_core_type__ : (Parsetree.core_type option) nonterminal
      | N_option_preceded_AS_mkrhs_LIDENT___ : (string Location.loc option) nonterminal
      | N_option_SEMI_ : (unit option) nonterminal
      | N_option_BAR_ : (unit option) nonterminal
      | N_opt_ampersand : (bool) nonterminal
      | N_operator : (string) nonterminal
      | N_open_description : (Parsetree.open_description * string Location.loc option) nonterminal
      | N_open_declaration : (Parsetree.open_declaration * string Location.loc option) nonterminal
      | N_nonempty_type_kind : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) nonterminal
      | N_nonempty_list_raw_string_ : (string list) nonterminal
      | N_nonempty_list_mkrhs_LIDENT__ : (string Location.loc list) nonterminal
      | N_name_tag : (string) nonterminal
      | N_mutable_virtual_flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) nonterminal
      | N_mutable_or_global_flag : (Asttypes.mutable_flag * Asttypes.global_flag) nonterminal
      | N_mutable_flag : (Asttypes.mutable_flag) nonterminal
      | N_mty_longident : (Longident.t) nonterminal
      | N_module_type_declaration : (Parsetree.module_type_declaration * string Location.loc option) nonterminal
      | N_module_type : (Parsetree.module_type) nonterminal
      | N_module_subst : (Parsetree.module_substitution * string Location.loc option) nonterminal
      | N_module_name : (string option) nonterminal
      | N_module_expr : (Parsetree.module_expr) nonterminal
      | N_module_declaration_body : (Parsetree.module_type) nonterminal
      | N_module_binding_body : (Parsetree.module_expr) nonterminal
      | N_mod_longident : (Longident.t) nonterminal
      | N_mod_ext_longident : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_val_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_longident_LIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_ident_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident___anonymous_37_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_UIDENT_ : (Longident.t) nonterminal
      | N_mk_longident_mod_ext_longident_LIDENT_ : (Longident.t) nonterminal
      | N_method_ : ((string Location.loc * Asttypes.private_flag * Parsetree.class_field_kind) *
  Parsetree.attributes) nonterminal
      | N_meth_list : (Parsetree.object_field list * Asttypes.closed_flag) nonterminal
      | N_match_case : (Parsetree.case) nonterminal
      | N_lwt_bindings : (Ast_helper.let_bindings) nonterminal
      | N_lwt_binding : (Ast_helper.let_bindings) nonterminal
      | N_local_strict_binding : (Parsetree.expression) nonterminal
      | N_local_fun_binding : (Parsetree.expression) nonterminal
      | N_listx_SEMI_record_pat_field_UNDERSCORE_ : ((Longident.t Location.loc * Parsetree.pattern) list * unit option) nonterminal
      | N_list_use_file_element_ : (Parsetree.toplevel_phrase list list) nonterminal
      | N_list_text_str_structure_item__ : (Parsetree.structure_item list list) nonterminal
      | N_list_text_cstr_class_field__ : (Parsetree.class_field list list) nonterminal
      | N_list_text_csig_class_sig_field__ : (Parsetree.class_type_field list list) nonterminal
      | N_list_structure_element_ : (Parsetree.structure_item list list) nonterminal
      | N_list_signature_element_ : (Parsetree.signature_item list list) nonterminal
      | N_list_post_item_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_generic_and_type_declaration_type_subst_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_generic_and_type_declaration_type_kind__ : (Parsetree.type_declaration list) nonterminal
      | N_list_attribute_ : (Parsetree.attributes) nonterminal
      | N_list_and_module_declaration_ : (Parsetree.module_declaration list) nonterminal
      | N_list_and_module_binding_ : (Parsetree.module_binding list) nonterminal
      | N_list_and_class_type_declaration_ : (Parsetree.class_type_declaration list) nonterminal
      | N_list_and_class_description_ : (Parsetree.class_description list) nonterminal
      | N_list_and_class_declaration_ : (Parsetree.class_declaration list) nonterminal
      | N_letop_bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) nonterminal
      | N_letop_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_let_pattern : (Parsetree.pattern) nonterminal
      | N_let_bindings_no_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_bindings_ext_ : (Ast_helper.let_bindings) nonterminal
      | N_let_binding_body : (Parsetree.pattern * Parsetree.expression) nonterminal
      | N_labeled_simple_pattern : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) nonterminal
      | N_labeled_simple_expr : (Asttypes.arg_label * Parsetree.expression) nonterminal
      | N_label_longident : (Longident.t) nonterminal
      | N_label_let_pattern : (string * Parsetree.pattern) nonterminal
      | N_label_declarations : (Parsetree.label_declaration list) nonterminal
      | N_label_declaration_semi : (Parsetree.label_declaration) nonterminal
      | N_label_declaration : (Parsetree.label_declaration) nonterminal
      | N_item_extension : (Parsetree.extension) nonterminal
      | N_interface : (Parsetree.signature) nonterminal
      | N_index_mod : (string) nonterminal
      | N_implementation : (Parsetree.structure) nonterminal
      | N_ident : (string) nonterminal
      | N_generic_type_declaration_nonrec_flag_type_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_type_declaration_no_nonrec_flag_type_subst_kind_ : ((Asttypes.rec_flag * string Location.loc option) *
  Parsetree.type_declaration) nonterminal
      | N_generic_constructor_declaration_epsilon_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generic_constructor_declaration_BAR_ : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Warnings.loc *
  Docstrings.info) nonterminal
      | N_generalized_constructor_arguments : (Parsetree.constructor_arguments * Parsetree.core_type option) nonterminal
      | N_functor_args : ((Lexing.position * Parsetree.functor_parameter) list) nonterminal
      | N_functor_arg : (Lexing.position * Parsetree.functor_parameter) nonterminal
      | N_function_type : (Parsetree.core_type) nonterminal
      | N_fun_def : (Parsetree.expression) nonterminal
      | N_fun_binding : (Parsetree.expression) nonterminal
      | N_formal_class_parameters : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) nonterminal
      | N_floating_attribute : (Parsetree.attribute) nonterminal
      | N_extension_constructor_rebind_epsilon_ : (Parsetree.extension_constructor) nonterminal
      | N_extension_constructor_rebind_BAR_ : (Parsetree.extension_constructor) nonterminal
      | N_extension : (Parsetree.extension) nonterminal
      | N_ext : (string Location.loc option) nonterminal
      | N_expr : (Parsetree.expression) nonterminal
      | N_direction_flag : (Asttypes.direction_flag) nonterminal
      | N_core_type : (Parsetree.core_type) nonterminal
      | N_constructor_declarations : (Parsetree.constructor_declaration list) nonterminal
      | N_constructor_arguments : (Parsetree.constructor_arguments) nonterminal
      | N_constrain_field : (Parsetree.core_type * Parsetree.core_type) nonterminal
      | N_constr_longident : (Longident.t) nonterminal
      | N_constr_ident : (string) nonterminal
      | N_constr_extra_nonprefix_ident : (string) nonterminal
      | N_constant : (Parsetree.constant) nonterminal
      | N_comprehension_tail_RBRACKET_ : (Extensions.comprehension list) nonterminal
      | N_comprehension_tail_BARRBRACKET_ : (Extensions.comprehension list) nonterminal
      | N_comprehension_clause : (Extensions.comprehension_clause) nonterminal
      | N_clty_longident : (Longident.t) nonterminal
      | N_class_type_declarations : (string Location.loc option * Parsetree.class_type_declaration list) nonterminal
      | N_class_type : (Parsetree.class_type) nonterminal
      | N_class_simple_expr : (Parsetree.class_expr) nonterminal
      | N_class_signature : (Parsetree.class_type) nonterminal
      | N_class_sig_field : (Parsetree.class_type_field) nonterminal
      | N_class_self_type : (Parsetree.core_type) nonterminal
      | N_class_self_pattern : (Parsetree.pattern) nonterminal
      | N_class_longident : (Longident.t) nonterminal
      | N_class_fun_def : (Parsetree.class_expr) nonterminal
      | N_class_fun_binding : (Parsetree.class_expr) nonterminal
      | N_class_field : (Parsetree.class_field) nonterminal
      | N_class_expr : (Parsetree.class_expr) nonterminal
      | N_attribute : (Parsetree.attribute) nonterminal
      | N_attr_id : (string Location.loc) nonterminal
      | N_atomic_type : (Parsetree.core_type) nonterminal
      | N_any_longident : (Longident.t) nonterminal
      | N_and_let_binding : (Ast_helper.let_binding) nonterminal
      | N_alias_type : (Parsetree.core_type) nonterminal
      | N_additive : (string) nonterminal
    
  end
  
  include Symbols
  
  include MenhirLib.InspectionTableInterpreter.Make (Tables) (struct
    
    include TI
    
    include Symbols
    
    include MenhirLib.InspectionTableInterpreter.Symbols (Symbols)
    
    let terminal =
      fun t ->
        match t with
        | 0 ->
            X (T T_error)
        | 1 ->
            X (T T_WITH)
        | 2 ->
            X (T T_WHILE_LWT)
        | 3 ->
            X (T T_WHILE)
        | 4 ->
            X (T T_WHEN)
        | 5 ->
            X (T T_VIRTUAL)
        | 6 ->
            X (T T_VAL)
        | 7 ->
            X (T T_UNDERSCORE)
        | 8 ->
            X (T T_UIDENT)
        | 9 ->
            X (T T_TYPE)
        | 10 ->
            X (T T_TRY_LWT)
        | 11 ->
            X (T T_TRY)
        | 12 ->
            X (T T_TRUE)
        | 13 ->
            X (T T_TO)
        | 14 ->
            X (T T_TILDE)
        | 15 ->
            X (T T_THEN)
        | 16 ->
            X (T T_STRUCT)
        | 17 ->
            X (T T_STRING)
        | 18 ->
            X (T T_STAR)
        | 19 ->
            X (T T_SIG)
        | 20 ->
            X (T T_SEMISEMI)
        | 21 ->
            X (T T_SEMI)
        | 22 ->
            X (T T_RPAREN)
        | 23 ->
            X (T T_REC)
        | 24 ->
            X (T T_RBRACKET)
        | 25 ->
            X (T T_RBRACE)
        | 26 ->
            X (T T_QUOTED_STRING_ITEM)
        | 27 ->
            X (T T_QUOTED_STRING_EXPR)
        | 28 ->
            X (T T_QUOTE)
        | 29 ->
            X (T T_QUESTIONQUESTION)
        | 30 ->
            X (T T_QUESTION)
        | 31 ->
            X (T T_PRIVATE)
        | 32 ->
            X (T T_PREFIXOP)
        | 33 ->
            X (T T_PLUSEQ)
        | 34 ->
            X (T T_PLUSDOT)
        | 35 ->
            X (T T_PLUS)
        | 36 ->
            X (T T_PERCENT)
        | 37 ->
            X (T T_OR)
        | 38 ->
            X (T T_OPTLABEL)
        | 39 ->
            X (T T_OPEN)
        | 40 ->
            X (T T_OF)
        | 41 ->
            X (T T_OBJECT)
        | 42 ->
            X (T T_NONREC)
        | 43 ->
            X (T T_NONLOCAL)
        | 44 ->
            X (T T_NEW)
        | 45 ->
            X (T T_MUTABLE)
        | 46 ->
            X (T T_MODULE)
        | 47 ->
            X (T T_MINUSGREATER)
        | 48 ->
            X (T T_MINUSDOT)
        | 49 ->
            X (T T_MINUS)
        | 50 ->
            X (T T_METHOD)
        | 51 ->
            X (T T_MATCH_LWT)
        | 52 ->
            X (T T_MATCH)
        | 53 ->
            X (T T_LPAREN)
        | 54 ->
            X (T T_LOCAL)
        | 55 ->
            X (T T_LIDENT)
        | 56 ->
            X (T T_LET_LWT)
        | 57 ->
            X (T T_LETOP)
        | 58 ->
            X (T T_LET)
        | 59 ->
            X (T T_LESSMINUS)
        | 60 ->
            X (T T_LESS)
        | 61 ->
            X (T T_LBRACKETPERCENTPERCENT)
        | 62 ->
            X (T T_LBRACKETPERCENT)
        | 63 ->
            X (T T_LBRACKETLESS)
        | 64 ->
            X (T T_LBRACKETGREATER)
        | 65 ->
            X (T T_LBRACKETBAR)
        | 66 ->
            X (T T_LBRACKETATATAT)
        | 67 ->
            X (T T_LBRACKETATAT)
        | 68 ->
            X (T T_LBRACKETAT)
        | 69 ->
            X (T T_LBRACKET)
        | 70 ->
            X (T T_LBRACELESS)
        | 71 ->
            X (T T_LBRACE)
        | 72 ->
            X (T T_LAZY)
        | 73 ->
            X (T T_LABEL)
        | 74 ->
            X (T T_INT)
        | 75 ->
            X (T T_INITIALIZER)
        | 76 ->
            X (T T_INHERIT)
        | 77 ->
            X (T T_INFIXOP4)
        | 78 ->
            X (T T_INFIXOP3)
        | 79 ->
            X (T T_INFIXOP2)
        | 80 ->
            X (T T_INFIXOP1)
        | 81 ->
            X (T T_INFIXOP0)
        | 82 ->
            X (T T_INCLUDE)
        | 83 ->
            X (T T_IN)
        | 84 ->
            X (T T_IF)
        | 85 ->
            X (T T_HASHOP)
        | 86 ->
            X (T T_HASH)
        | 87 ->
            X (T T_GREATERRBRACKET)
        | 88 ->
            X (T T_GREATERRBRACE)
        | 89 ->
            X (T T_GREATERDOT)
        | 90 ->
            X (T T_GREATER)
        | 91 ->
            X (T T_GLOBAL)
        | 92 ->
            X (T T_FUNCTOR)
        | 93 ->
            X (T T_FUNCTION)
        | 94 ->
            X (T T_FUN)
        | 95 ->
            X (T T_FOR_LWT)
        | 96 ->
            X (T T_FOR)
        | 97 ->
            X (T T_FLOAT)
        | 98 ->
            X (T T_FINALLY_LWT)
        | 99 ->
            X (T T_FALSE)
        | 100 ->
            X (T T_EXTERNAL)
        | 101 ->
            X (T T_EXCEPTION)
        | 102 ->
            X (T T_EQUAL)
        | 103 ->
            X (T T_EOL)
        | 104 ->
            X (T T_EOF)
        | 105 ->
            X (T T_END)
        | 106 ->
            X (T T_ELSE)
        | 107 ->
            X (T T_DOWNTO)
        | 108 ->
            X (T T_DOTTILDE)
        | 109 ->
            X (T T_DOTOP)
        | 110 ->
            X (T T_DOTLESS)
        | 111 ->
            X (T T_DOTDOT)
        | 112 ->
            X (T T_DOT)
        | 113 ->
            X (T T_DONE)
        | 114 ->
            X (T T_DOCSTRING)
        | 115 ->
            X (T T_DO)
        | 116 ->
            X (T T_CONSTRAINT)
        | 117 ->
            X (T T_COMMENT)
        | 118 ->
            X (T T_COMMA)
        | 119 ->
            X (T T_COLONGREATER)
        | 120 ->
            X (T T_COLONEQUAL)
        | 121 ->
            X (T T_COLONCOLON)
        | 122 ->
            X (T T_COLON)
        | 123 ->
            X (T T_CLASS)
        | 124 ->
            X (T T_CHAR)
        | 125 ->
            X (T T_BEGIN)
        | 126 ->
            X (T T_BARRBRACKET)
        | 127 ->
            X (T T_BARBAR)
        | 128 ->
            X (T T_BAR)
        | 129 ->
            X (T T_BANG)
        | 130 ->
            X (T T_BACKQUOTE)
        | 131 ->
            X (T T_ASSERT)
        | 132 ->
            X (T T_AS)
        | 133 ->
            X (T T_ANDOP)
        | 134 ->
            X (T T_AND)
        | 135 ->
            X (T T_AMPERSAND)
        | 136 ->
            X (T T_AMPERAMPER)
        | _ ->
            assert false
    
    and nonterminal =
      fun nt ->
        match nt with
        | 227 ->
            X (N N_additive)
        | 226 ->
            X (N N_alias_type)
        | 225 ->
            X (N N_and_let_binding)
        | 224 ->
            X (N N_any_longident)
        | 223 ->
            X (N N_atomic_type)
        | 222 ->
            X (N N_attr_id)
        | 221 ->
            X (N N_attribute)
        | 220 ->
            X (N N_class_expr)
        | 219 ->
            X (N N_class_field)
        | 218 ->
            X (N N_class_fun_binding)
        | 217 ->
            X (N N_class_fun_def)
        | 216 ->
            X (N N_class_longident)
        | 215 ->
            X (N N_class_self_pattern)
        | 214 ->
            X (N N_class_self_type)
        | 213 ->
            X (N N_class_sig_field)
        | 212 ->
            X (N N_class_signature)
        | 211 ->
            X (N N_class_simple_expr)
        | 210 ->
            X (N N_class_type)
        | 209 ->
            X (N N_class_type_declarations)
        | 208 ->
            X (N N_clty_longident)
        | 207 ->
            X (N N_comprehension_clause)
        | 206 ->
            X (N N_comprehension_tail_BARRBRACKET_)
        | 205 ->
            X (N N_comprehension_tail_RBRACKET_)
        | 204 ->
            X (N N_constant)
        | 203 ->
            X (N N_constr_extra_nonprefix_ident)
        | 202 ->
            X (N N_constr_ident)
        | 201 ->
            X (N N_constr_longident)
        | 200 ->
            X (N N_constrain_field)
        | 199 ->
            X (N N_constructor_arguments)
        | 198 ->
            X (N N_constructor_declarations)
        | 197 ->
            X (N N_core_type)
        | 196 ->
            X (N N_direction_flag)
        | 195 ->
            X (N N_expr)
        | 194 ->
            X (N N_ext)
        | 193 ->
            X (N N_extension)
        | 192 ->
            X (N N_extension_constructor_rebind_BAR_)
        | 191 ->
            X (N N_extension_constructor_rebind_epsilon_)
        | 190 ->
            X (N N_floating_attribute)
        | 189 ->
            X (N N_formal_class_parameters)
        | 188 ->
            X (N N_fun_binding)
        | 187 ->
            X (N N_fun_def)
        | 186 ->
            X (N N_function_type)
        | 185 ->
            X (N N_functor_arg)
        | 184 ->
            X (N N_functor_args)
        | 183 ->
            X (N N_generalized_constructor_arguments)
        | 182 ->
            X (N N_generic_constructor_declaration_BAR_)
        | 181 ->
            X (N N_generic_constructor_declaration_epsilon_)
        | 180 ->
            X (N N_generic_type_declaration_no_nonrec_flag_type_subst_kind_)
        | 179 ->
            X (N N_generic_type_declaration_nonrec_flag_type_kind_)
        | 178 ->
            X (N N_ident)
        | 177 ->
            X (N N_implementation)
        | 176 ->
            X (N N_index_mod)
        | 175 ->
            X (N N_interface)
        | 174 ->
            X (N N_item_extension)
        | 173 ->
            X (N N_label_declaration)
        | 172 ->
            X (N N_label_declaration_semi)
        | 171 ->
            X (N N_label_declarations)
        | 170 ->
            X (N N_label_let_pattern)
        | 169 ->
            X (N N_label_longident)
        | 168 ->
            X (N N_labeled_simple_expr)
        | 167 ->
            X (N N_labeled_simple_pattern)
        | 166 ->
            X (N N_let_binding_body)
        | 165 ->
            X (N N_let_bindings_ext_)
        | 164 ->
            X (N N_let_bindings_no_ext_)
        | 163 ->
            X (N N_let_pattern)
        | 162 ->
            X (N N_letop_binding_body)
        | 161 ->
            X (N N_letop_bindings)
        | 160 ->
            X (N N_list_and_class_declaration_)
        | 159 ->
            X (N N_list_and_class_description_)
        | 158 ->
            X (N N_list_and_class_type_declaration_)
        | 157 ->
            X (N N_list_and_module_binding_)
        | 156 ->
            X (N N_list_and_module_declaration_)
        | 155 ->
            X (N N_list_attribute_)
        | 154 ->
            X (N N_list_generic_and_type_declaration_type_kind__)
        | 153 ->
            X (N N_list_generic_and_type_declaration_type_subst_kind__)
        | 152 ->
            X (N N_list_post_item_attribute_)
        | 151 ->
            X (N N_list_signature_element_)
        | 150 ->
            X (N N_list_structure_element_)
        | 149 ->
            X (N N_list_text_csig_class_sig_field__)
        | 148 ->
            X (N N_list_text_cstr_class_field__)
        | 147 ->
            X (N N_list_text_str_structure_item__)
        | 146 ->
            X (N N_list_use_file_element_)
        | 145 ->
            X (N N_listx_SEMI_record_pat_field_UNDERSCORE_)
        | 144 ->
            X (N N_local_fun_binding)
        | 143 ->
            X (N N_local_strict_binding)
        | 142 ->
            X (N N_lwt_binding)
        | 141 ->
            X (N N_lwt_bindings)
        | 140 ->
            X (N N_match_case)
        | 139 ->
            X (N N_meth_list)
        | 138 ->
            X (N N_method_)
        | 137 ->
            X (N N_mk_longident_mod_ext_longident_LIDENT_)
        | 136 ->
            X (N N_mk_longident_mod_ext_longident_UIDENT_)
        | 135 ->
            X (N N_mk_longident_mod_ext_longident___anonymous_37_)
        | 134 ->
            X (N N_mk_longident_mod_ext_longident_ident_)
        | 133 ->
            X (N N_mk_longident_mod_longident_LIDENT_)
        | 132 ->
            X (N N_mk_longident_mod_longident_UIDENT_)
        | 131 ->
            X (N N_mk_longident_mod_longident_val_ident_)
        | 130 ->
            X (N N_mod_ext_longident)
        | 129 ->
            X (N N_mod_longident)
        | 128 ->
            X (N N_module_binding_body)
        | 127 ->
            X (N N_module_declaration_body)
        | 126 ->
            X (N N_module_expr)
        | 125 ->
            X (N N_module_name)
        | 124 ->
            X (N N_module_subst)
        | 123 ->
            X (N N_module_type)
        | 122 ->
            X (N N_module_type_declaration)
        | 121 ->
            X (N N_mty_longident)
        | 120 ->
            X (N N_mutable_flag)
        | 119 ->
            X (N N_mutable_or_global_flag)
        | 118 ->
            X (N N_mutable_virtual_flags)
        | 117 ->
            X (N N_name_tag)
        | 116 ->
            X (N N_nonempty_list_mkrhs_LIDENT__)
        | 115 ->
            X (N N_nonempty_list_raw_string_)
        | 114 ->
            X (N N_nonempty_type_kind)
        | 113 ->
            X (N N_open_declaration)
        | 112 ->
            X (N N_open_description)
        | 111 ->
            X (N N_operator)
        | 110 ->
            X (N N_opt_ampersand)
        | 109 ->
            X (N N_option_BAR_)
        | 108 ->
            X (N N_option_SEMI_)
        | 107 ->
            X (N N_option_preceded_AS_mkrhs_LIDENT___)
        | 106 ->
            X (N N_option_preceded_COLON_core_type__)
        | 105 ->
            X (N N_option_preceded_EQUAL_expr__)
        | 104 ->
            X (N N_option_preceded_EQUAL_module_type__)
        | 103 ->
            X (N N_option_preceded_EQUAL_pattern__)
        | 102 ->
            X (N N_option_preceded_EQUAL_seq_expr__)
        | 101 ->
            X (N N_option_type_constraint_)
        | 100 ->
            X (N N_optlabel)
        | 99 ->
            X (N N_paren_module_expr)
        | 98 ->
            X (N N_parse_any_longident)
        | 97 ->
            X (N N_parse_constr_longident)
        | 96 ->
            X (N N_parse_core_type)
        | 95 ->
            X (N N_parse_expression)
        | 94 ->
            X (N N_parse_mod_ext_longident)
        | 93 ->
            X (N N_parse_mod_longident)
        | 92 ->
            X (N N_parse_mty_longident)
        | 91 ->
            X (N N_parse_pattern)
        | 90 ->
            X (N N_parse_val_longident)
        | 89 ->
            X (N N_pattern)
        | 88 ->
            X (N N_pattern_comma_list_pattern_)
        | 87 ->
            X (N N_pattern_comma_list_pattern_no_exn_)
        | 86 ->
            X (N N_pattern_gen)
        | 85 ->
            X (N N_pattern_no_exn)
        | 84 ->
            X (N N_pattern_var)
        | 83 ->
            X (N N_payload)
        | 82 ->
            X (N N_possibly_poly_core_type_)
        | 81 ->
            X (N N_possibly_poly_core_type_no_attr_)
        | 80 ->
            X (N N_post_item_attribute)
        | 79 ->
            X (N N_primitive_declaration)
        | 78 ->
            X (N N_private_flag)
        | 77 ->
            X (N N_private_virtual_flags)
        | 76 ->
            X (N N_rec_flag)
        | 75 ->
            X (N N_record_expr_content)
        | 74 ->
            X (N N_reversed_bar_llist_constructor_declaration_)
        | 73 ->
            X (N N_reversed_bar_llist_extension_constructor_)
        | 72 ->
            X (N N_reversed_bar_llist_extension_constructor_declaration_)
        | 71 ->
            X (N N_reversed_llist_preceded_CONSTRAINT_constrain__)
        | 70 ->
            X (N N_reversed_nonempty_llist_functor_arg_)
        | 69 ->
            X (N N_reversed_nonempty_llist_labeled_simple_expr_)
        | 68 ->
            X (N N_reversed_nonempty_llist_name_tag_)
        | 67 ->
            X (N N_reversed_nonempty_llist_typevar_)
        | 66 ->
            X (N N_reversed_preceded_or_separated_nonempty_llist_BAR_match_case_)
        | 65 ->
            X (N N_reversed_separated_nonempty_llist_AMPERSAND_core_type_no_attr_)
        | 64 ->
            X (N N_reversed_separated_nonempty_llist_AND_comprehension_clause_)
        | 63 ->
            X (N N_reversed_separated_nonempty_llist_AND_with_constraint_)
        | 62 ->
            X (N N_reversed_separated_nonempty_llist_BAR_row_field_)
        | 61 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_core_type_)
        | 60 ->
            X (N N_reversed_separated_nonempty_llist_COMMA_type_parameter_)
        | 59 ->
            X (N N_reversed_separated_nonempty_llist_STAR_atomic_type_)
        | 58 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_core_type_)
        | 57 ->
            X (N N_reversed_separated_nontrivial_llist_COMMA_expr_)
        | 56 ->
            X (N N_reversed_separated_nontrivial_llist_STAR_atomic_type_)
        | 55 ->
            X (N N_row_field)
        | 54 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_expr_)
        | 53 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_object_expr_field_)
        | 52 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_pattern_)
        | 51 ->
            X (N N_separated_or_terminated_nonempty_list_SEMI_record_expr_field_)
        | 50 ->
            X (N N_seq_expr)
        | 49 ->
            X (N N_sig_exception_declaration)
        | 48 ->
            X (N N_signature)
        | 47 ->
            X (N N_signature_item)
        | 46 ->
            X (N N_signed_constant)
        | 45 ->
            X (N N_simple_delimited_pattern)
        | 44 ->
            X (N N_simple_expr)
        | 43 ->
            X (N N_simple_pattern)
        | 42 ->
            X (N N_simple_pattern_not_ident)
        | 41 ->
            X (N N_single_attr_id)
        | 40 ->
            X (N N_str_exception_declaration)
        | 39 ->
            X (N N_strict_binding)
        | 38 ->
            X (N N_strict_function_type)
        | 37 ->
            X (N N_structure)
        | 36 ->
            X (N N_structure_item)
        | 35 ->
            X (N N_subtractive)
        | 34 ->
            X (N N_tag_field)
        | 33 ->
            X (N N_toplevel_directive)
        | 32 ->
            X (N N_toplevel_phrase)
        | 31 ->
            X (N N_tuple_type)
        | 30 ->
            X (N N_type_constraint)
        | 29 ->
            X (N N_type_kind)
        | 28 ->
            X (N N_type_longident)
        | 27 ->
            X (N N_type_parameter)
        | 26 ->
            X (N N_type_parameters)
        | 25 ->
            X (N N_type_variable)
        | 24 ->
            X (N N_type_variance)
        | 23 ->
            X (N N_use_file)
        | 22 ->
            X (N N_val_extra_ident)
        | 21 ->
            X (N N_val_ident)
        | 20 ->
            X (N N_val_longident)
        | 19 ->
            X (N N_value)
        | 18 ->
            X (N N_value_description)
        | 17 ->
            X (N N_virtual_flag)
        | 16 ->
            X (N N_virtual_with_mutable_flag)
        | 15 ->
            X (N N_virtual_with_private_flag)
        | 14 ->
            X (N N_with_constraint)
        | 13 ->
            X (N N_with_type_binder)
        | _ ->
            assert false
    
    and lr0_incoming =
      (16, "\000\000\000\006\000J\000\004\000\b\000\n\000\012\000\014\000\018\000\020\000\024\000\026\000\028\000 \000\"\000(\0000\000@\000L\000P\000R\000T\000V\000X\000Z\000\\\000^\000f\000j\000n\000p\000v\000\146\000\152\000\154\000\166\000\168\000\170\000\186\000\188\000\190\000\194\000\200\000\202\000\204\000\212\000\214\000\216\000\228\000\232\000\234\000\248\000\252\001\b\001\n\001\014\000S\000\226\001\189\001\189\001\133\000\138\001\189\000\b\001\133\0017\000\016\000\018\000\022\001\133\0017\000\024\001\133\0017\000\026\000$\0008\000B\000Z\001\133\0017\000p\001\003\000\226\000\018\000p\001\t\001\011\001\177\001\187\0017\000l\000&\000.\000B\000p\000~\001\189\000\014\001\133\0017\000l\000B\000D\000F\000H\000J\000L\000b\000d\000t\000z\000\156\000\158\000\160\000\162\000\164\000\172\000\182\000\206\000\220\000l\000,\000\224\001a\000.\000x\000\140\001a\0002\000x\000\144\001a\0004\000x\000\242\001\000\001\004\001\012\001\016\001\018\000\223\000.\000+\000\246\000\016\000\018\000:\000\018\000p\001e\000>\000p\000\246\000N\000l\000^\001\133\0017\000\018\000(\0017\000\020\001\133\0017\000B\000H\001\004\000V\000d\001\004\000l\000\160\001\004\000H\000d\0001\000\016\000:\001e\0003\0007\000y\000.\000\238\0007\0005\000p\000\206\000\018\000@\000l\000n\000p\000z\000p\000\246\000:\001e\000p\000\246\000n\000\128\001\002\000\219\000\130\0002\000\219\000\140\000\174\001\005\000l\001\005\000.\000\226\000\018\001\017\000\226\000p\001\019\001\161\001\002\001\006\001e\0009\000?\000`\000n\000?\000`\000n\000?\000q\000&\001\019\001\131\001\191\000\174\001\161\0009\001\191\000&\001\191\000?\000M\000\201\000n\000?\000`\000n\000?\000?\000M\000?\000`\000n\000?\000?\000M\000?\000M\000E\000M\000o\000}\0002\001\002\000o\000\235\000R\001\016\000\221\000\131\001\016\001u\001\197\001\n\000:\001e\0017\001\197\0017\001\139\001\187\001\197\000E\0002\000o\001\002\000}\0002\000}\0002\000}\0002\000\182\000\137\0002\000\235\000\235\000?\000`\000n\000?\000?\000M\000?\000`\000n\000?\000?\000M\000\135\000:\001e\000\226\001\197\000\163\0017\000,\0017\000\224\001\023\001\191\000,\001\023\001\197\000\182\001\023\000\182\000?\000\244\000.\000u\000.\000\174\001\161\0009\000\238\001\139\001\139\000.\000\238\001\139\000\140\0002\000\144\000X\000\\\000\184\000\239\000p\000\246\000\163\0017\000,\0017\001W\0004\001Y\001W\001[\000\200\000\224\001\002\000\018\000l\000\140\001\149\000R\000\144\001W\0004\000w\000&\001\191\001\143\001\191\000\246\001\143\000`\001\191\001\191\001o\0017\001\151\000\149\001\002\001m\001k\001m\001\139\001\141\001\149\001o\0017\000\144\001W\0004\000\224\000\229\001\139\000\206\000@\000\144\001W\0004\000\224\001\141\000\144\001W\0004\000\224\001\141\001\141\000\242\000\229\000\143\000\136\001\189\000\020\001\133\0017\000V\0005\000p\000;\000\143\000\234\001\139\000\206\001\139\000\161\0011\0011\0009\000D\000@\000\157\001\002\001\149\000\206\000l\000\244\000.\001\003\000\226\000l\000\244\000.\001\147\0017\001\151\000\147\0011\001m\001\129\001k\001m\001\127\001\129\001\149\000\206\001\147\0017\0007\0005\000p\000;\000\143\0011\0009\000D\000\157\000\147\0011\000*\0006\000F\000H\000P\001\004\001\133\0017\000\016\000\"\0017\000T\001\133\0017\000l\000\016\000H\000\150\000\196\000d\000\150\000\196\000l\000H\000^\001\133\0017\000\016\000\018\000\251\000.\000\246\000^\000\020\000R\0017\000l\000\014\0017\000b\000d\000h\001\133\0017\000j\001\133\0017\000n\000p\000x\000r\001\133\0017\0000\000\153\000n\000+\000\030\000l\000n\000p\000\246\001\139\001U\000.\001U\000.\000p\000>\000l\000n\001U\000\206\000t\000\132\000\140\000\144\001\011\001#\0004\001S\000\246\001\139\000\213\000\206\000\146\001\133\0017\000\150\000\174\0009\000\196\000\250\000+\000-\000U\000W\000[\000]\000\224\000]\001\153\000\235\001\003\000\226\000l\000.\000\204\001\133\0017\000W\000\173\000\177\000\238\000\179\000\238\000\179\000\244\000\179\001\002\000\179\001\n\000+\001\187\000\235\000\179\001\131\001\147\000\179\000\179\000\179\000.\000\140\0002\000i\0002\000\179\000,\000i\000[\001\147\000\179\000\207\000,\000\016\000,\000\217\001#\000\254\000i\000\254\000+\000N\000\016\000l\000n\000\179\000\246\001\139\001G\000\205\000.\001G\000\205\000.\000p\000\169\000l\000\020\000p\000\233\000\233\000.\000\148\000l\000d\000n\000\179\000.\000\179\000.\000\246\001\139\000.\000W\000\206\000v\000P\001\004\001\133\0017\000\186\0017\000l\000.\000\251\000\246\000l\000\186\0017\000\141\001s\001q\000`\000\243\000\247\000\004\000\020\0005\001S\000\206\000@\000\242\001\197\000\027\001\197\000\143\000^\001\003\000\206\001\005\000\226\000\242\001\005\000\029\000\127\001\014\000\029\000`\000\247\001\187\001\005\000\226\000\018\001e\001\r\001e\001\131\001s\000\247\000.\000\247\000.\001q\000`\000\199\000\253\000l\000.\000\253\000.\000\246\000\247\000.\000\199\001\187\001\003\001\131\000\253\000\168\000\132\000\140\000\142\000p\000\206\000\144\000p\000\218\000\222\000\146\001\133\0017\000\252\001\133\0017\000\170\001\133\0017\000\188\001\133\0017\001\002\000\179\000\n\000\190\001\133\0017\000l\000\020\000\233\000.\000`\000\192\001\133\0017\000\179\000\168\000\194\001\133\0017\000\179\000\206\001\004\000)\000+\000Y\000\172\000Y\000\174\000p\000\220\000l\001\b\001\133\0017\000Y\000\226\000l\000G\000Y\000\030\000l\000p\000\240\001\139\000\246\001\139\000\240\001\139\000=\000.\000p\000>\000p\000N\000Y\000\235\001\003\000\226\000l\000.\000F\000H\000^\001\133\0017\000\253\000\246\000\247\000.\000b\000d\000t\000W\000\246\001\139\000\206\000e\000s\000\238\000\235\000Y\001\007\001\131\001\147\001\153\001\027\000\168\000e\001\029\001K\000\168\000e\001\135\000&\001\135\000D\001\135\000F\001\135\000H\001\135\000J\001\135\000L\001\135\000b\001\135\000d\001\135\000z\001\135\000\156\001\135\000\158\001\135\000\160\001\135\000\162\001\135\000\164\001\135\000\182\001\135\000\206\001\135\000\238\001\135\000\242\001\135\000\244\001\135\001\000\001\135\001\016\001\135\001\018\001\135\001\187\001\147\000Y\001\199\001\135\000,\000J\001\189\000e\000e\001\014\0017\000+\000\246\000\020\000\233\000\226\001\139\000\206\000e\000\135\000\226\001\139\000\206\000e\000=\000\206\000e\000O\000W\001O\000=\000\206\000e\000O\001y\000U\000\246\001\139\000\206\000e\000\171\000\206\000e\000\238\000\179\000\244\000\179\001\002\000\179\001\n\000+\001\187\000\173\000\175\000\238\000\179\001M\0011\001\195\001\195\001\135\000\171\000\206\000e\001C\000\168\000e\001\012\001M\001E\001\004\000e\000.\000\132\000\254\000m\000\254\001\135\000,\000m\001\135\000\194\000\129\000\n\001\135\000\254\001\157\000\254\001\014\001\133\0017\000\179\000\168\001\135\000\206\001\135\000\028\000\216\001\137\001\135\001\159\001\157\001\159\001\157\000\140\0002\000m\0002\001\135\000\194\000\129\000\n\001\135\0002\001\155\0002\001\155\001\155\000\142\000k\000\178\000\144\000Y\000\004\000g\001S\000=\000\203\000\211\000,\000g\000g\000\151\0004\001\003\000\226\000p\000+\000\148\000Y\000\220\000l\000m\000.\000x\001\135\000\140\000m\0002\000x\001\135\000\144\000m\0004\000x\001\135\000\226\000l\000e\000.\000x\001\135\000\140\000e\0002\000x\001\135\000\144\001\135\0004\000x\001\135\001\003\000\220\000l\000m\000.\000x\001\135\000\140\000m\0002\000x\001\135\000\144\000m\0004\000x\001\135\001S\000x\001\135\000Y\000\139\001Q\001Q\001\135\000e\000.\000\140\000e\0002\000\144\001\135\0004\001\003\000\220\000l\000m\000.\000\140\000m\0002\000\144\000m\0004\001S\000m\000.\000\140\000m\0002\000\144\000m\0004\000e\001\137\000e\000\232\000e\000\228\000e\000\232\000e\000\228\000\206\000e\001\137\000e\000\232\000e\000\228\000e\000l\000\020\000\233\000.\000\246\001\191\000`\000e\001O\001w\001w\000n\001G\000.\001w\001O\001w\000e\000`\000e\000`\000\226\000e\001\025\000\133\001\002\001\025\001\025\000e\000 \001\135\000\214\001\135\000\212\000e\000\212\000Y\001\135\000\180\000Y\000\151\0004\001\135\000\211\000,\000k\000\178\000k\000\178\000m\0002\001\135\001\155\000\254\000m\000\254\001\135\001\157\000e\001\133\0017\000\253\000\168\000e\000^\001\133\0017\000\251\000\206\000\253\000\246\000\247\000\206\000\253\001\001\000\168\000e\001s\001\001\000\204\001\133\0017\001\149\001o\0017\000\168\000e\001\133\0017\000\153\001M\0011\000e\001y\000O\000e\000\205\000.\001U\000\205\000.\000p\000l\000\020\000\233\000.\000\206\000e\000=\000\206\000e\001\031\001!\001O\001!\000\246\000\135\000\226\001\139\000\206\000e\000=\000\206\000e\001\031\001M\0011\001\135\000e\000e\000\004\000\133\000e\000\004\000\133\001\135\000.\000\240\000\247\000.\000\246\000\247\000.\000\240\000\247\000.\000\253\000\247\000.\000\179\000.\000\246\001\139\000.\001\175\000\014\001\004\0017\000\\\000\241\000p\000\206\000e\000=\000\206\000e\000'\0011\0017\000\012\000\\\000\\\000\012\000!\000p\000\246\001\139\000\241\000p\000\206\000e\000=\000\206\000e\000f\001\004\0017\000\157\000p\000\246\000\020\000\233\000\226\001\139\000\206\000e\000\135\000\226\001\139\000\165\000\206\000e\001\139\000O\001\021\0011\0017\000\012\000@\000@\000\012\000\031\000p\000\246\000\165\000\157\000p\000\246\000\020\000\233\000\226\001\139\000\206\000e\000\165\000\206\000e\000O\000|\001\189\000>\000\179\000\n\000e\000^\000\020\001\133\0017\001e\000\206\000\247\000\209\0011\001\133\0017\0000\000\251\001\001\0011\001\014\0017\000\251\001\001\0011\001;\001;\000\251\001\001\0011\000\134\001\189\000\166\001\133\0017\000\253\0011\000\202\001\133\0017\000+\000\246\001\139\000\206\000$\000\231\000\231\0011\000\204\001\133\0017\001\149\000\206\001\147\0017\0011\001o\0017\0011\000\246\000*\000P\001\004\001\133\0017\001\005\0011\001\133\0017\001\005\0011\000^\001\133\0017\000\018\000\242\001\005\0011\0000\000\251\000\246\000\247\0011\001\014\0017\000\251\000\246\000\247\0011\0019\0019\000\251\000\206\001\003\0011\000\246\000\247\000\255\0011\001s\000\255\000\166\001\133\0017\000\247\0011\000\204\001\133\0017\001\149\000\248\000\020\001\133\0017\000\012\000#\000\140\000y\0002\001{\000p\000\206\000T\0017\000l\001\139\000.\001\173\000\014\0017\000\012\000\\\000\\\000\012\000\237\000p\000\246\001\139\0011\000f\0017\000\012\000@\000@\000\012\000\155\000p\000\246\000\165\0011\000\154\0017\000v\000P\001\004\0017\001\003\000\168\000\140\000{\0002\001\161\000\238\001\139\001\139\001\131\001\161\001\169\001\187\0017\001\003\000\168\001\169\001\169\0011\000\234\0017\001\139\000\206\001\139\001\145\0011\001+\000\212\001]\0011\001}\001\171\001+\001\169\0011\001\014\0017\000#\001{\000p\000\206\001\169\0011\001=\001=\001\133\0017\000#\001{\000p\000\246\000p\000\246\000?\000`\000\140\001\139\000?\000`\000\201\000?\000`\001\019\001\131\001\165\001\169\001\165\001\165\001\165\0011\001\014\0017\000#\001{\000p\000\246\001\165\0011\001?\001?\000%\000_\000c\000\159\000\225\000\245\000\249\001/\001]\0011\001g\001\014\0017\0005\000p\000;\000\143\0011\0015\0015\001i\001\014\0017\0005\000p\000\242\000\229\000\143\0011\0013\0013\001}\001\163\001/\000a\001/\001\139\000\248\001\133\0017\000#\001{\000p\000l\000\206\000T\0017\001\175\000\152\0017\000e\0011\000\154\001\004\0017\000l\000v\000J\001\189\0017\000\153\001M\0011\000P\001\004\0017\001\003\000\168\000\140\000{\0002\001\177\000\190\0017\001O\000`\001I\000\168\001\131\001\167\000\139\001\177\001\185\001\187\001\195\001\185\001\179\001\179\001\185\0017\001\003\000\168\001\185\0017\000\153\001M\0011\001\185\000.\000\246\001\165\000.\001\185\001\n\000p\000\215\0011\0017\001\185\000\215\0011\000\234\0017\001\145\0011\001)\000\212\001]\0011\001}\001\183\001)\001\185\000\246\001\165\000\206\001\185\001O\001\181\001\181\0011\001\014\0017\000#\001{\000p\001\181\0011\001A\001A\000%\000I\000v\000Q\000c\000\159\000\227\000\245\001\027\001-\001K\001]\0011\001g\0015\001}\001\163\000K\000e\0011\001-\000\167\0002\001\027\001-\001K\000\167\0002\001)\000\212\000K\000\212\000\253\0011\001\133\0017\000\253\0011\000e\0011\001-\001-\000\167\0002\0011\0009\000D\000\157\000\145\0011\001m\001k\001m\0005\000p\000\242\000\229\000\143\0011\0009\000D\000\157\000\145\0011\000a\000\212\000\247\000.\001\139\0011\000\167\0002\000Y\000^\001\133\0017\000\253\000.\000\246\000\247\000.\000e\000.\000=\000.\000e\000\004\000\133\000e\000\004\000\133\000\198\000e\000\198\000e\000e\000\232\000e\000\228\000\167\0002\0017\000e\000\232\000e\000\228\000K\000\210\001c\000\000\000a\000\210\001_\000\000\000l\000\244\000.\000-\000\197\001\005\000\226\000l\000\244\000.\000-\001e\001\015\001e\001\151\001\193\000\210\000\000\000\195\001\147\000\210\000\000\000\193\001\139\000\210\000\000\000e\000\210\000\191\000\000\000\189\001\005\000\210\000\000\000\187\001\003\000\210\000\000\000\185\000\243\000\210\000\000\000\179\000\210\000\183\000\000\000)\000\210\000\181\001\003\000\226\000\000\000\174\001e\000\026\000$\000\150\000\200\000)\001\003\000\210\000A\000C\000*\000I\001'\000e\0011\000*\001'\000*\000\000\000*\000C\000I\001%\001%\000e\0011\001%\001%\000/\000e\0011\001%\000\210\001%\000\210")
    
    and rhs =
      ((16, "\001c\001_\000\197\000\195\000\193\000\191\000\189\000\187\000\185\000\183\000\181\000A\000/\000H\000F\001u\001\197\001\n\000:\001e\001\014\0017\001M\0011\001\015\001\151\000l\001\139\000.\000l\000^\001\133\0017\000\247\000.\000:\001e\000\016\0009\001\191\0009\000l\000u\000.\0009\000z\001\023\000\182\000z\000\182\000\174\001\161\001\191\000\174\001\161\000l\000u\000.\000\174\001\161\000\140\000E\0002\000\140\001\002\000}\0002\000\140\000o\001\002\000}\0002\000\130\000\219\000}\0002\000\130\0002\000\128\000\219\000}\0002\000\128\000\219\000}\000\182\000\137\0002\001\131\000S\000S\000\226\001\189\000\138\001\189\000\167\0002\001\167\000\190\0017\001\179\001I\000\168\001\185\000v\000P\0017\001\003\000\168\001\185\000v\000P\001\004\0017\001\003\000\168\001\185\001\185\001\187\001\167\000\139\001\131\000\154\0017\001\185\000\215\0011\000\154\001\004\0017\001\185\000\215\0011\000\014\000'\0011\000f\001\021\0011\000\234\0017\001\145\0011\000\152\0017\000e\0011\001]\0011\001}\000\206\001\185\000\246\001\165\000\206\001\185\001O\001\181\001O\000`\001\185\001O\001\179\001\011\000l\000\179\000.\000l\000\179\000\246\001\139\000.\000l\001\139\000.\000\154\0017\001\169\0011\000\014\0017\000\237\000p\000\246\001\139\0011\000f\0017\000\155\000p\000\246\000\165\0011\000\234\0017\001\145\0011\001]\0011\001}\001\161\000\140\000{\0002\001\161\001\131\000T\0017\001\173\001+\000\212\001\169\001\187\000v\000P\0017\001\003\000\168\001\169\000v\000P\001\004\0017\001\003\000\168\001\169\000l\001\185\000.\001\177\000\140\000{\0002\001\177\000l\001\185\000\246\001\165\000.\000T\0017\001\175\001)\000\212\001\169\000\201\000?\000`\001\165\000p\000\246\000?\000`\001\165\000?\000`\001\165\000\248\000\020\001\133\0017\000#\001{\000p\000\206\001\169\0011\001=\001\019\001\133\0017\000\179\000\206\001\135\001\137\001\135\001\133\0017\000\179\000\168\001\135\000\194\000\129\000\254\000\194\000\129\000\n\001\135\000\254\000\194\000\129\001\157\000\194\000\129\000\n\001\135\001\157\000\194\000\129\0002\000\194\000\129\000\n\001\135\0002\000\194\000\129\001\155\000\194\000\129\000\n\001\135\001\155\000\150\000\250\000$\000\196\000\140\0002\000l\000.\000\200\000\026\000\018\000l\000\244\000.\001\151\001\003\001\003\000\226\000l\000\244\000.\000l\000\244\000.\001\151\001\139\000\206\001\139\001\191\000w\000&\001\191\000\144\001W\0004\001\002\000\149\001\197\001\139\001\187\000\028\000\216\001\027\000\168\000e\000h\001\133\0017\000e\000\004\000\133\000\022\001\133\0017\000e\000\022\001\133\0017\000e\000\004\000\133\000\022\001\133\0017\000e\000\198\000e\000\022\001\133\0017\000e\000\004\000\133\000\198\000e\000\006\001\133\0017\000e\000\232\000e\000\228\000\192\001\133\0017\000\179\000\206\000e\001\137\000e\000\232\000e\000\228\000\192\001\133\0017\000\179\000\168\000e\000\232\000e\000\228\000Y\000v\000^\001\133\0017\000\251\001\001\000\168\000e\000v\000\204\001\133\0017\001\149\001o\0017\000\168\000e\000v\000P\001\133\0017\000\253\000\168\000e\000v\000P\001\004\001\133\0017\000\253\000\168\000e\000\188\001\133\0017\000\133\000\190\001\133\0017\001O\001w\000\190\001\133\0017\000l\000\020\000\233\000.\001w\000j\001\133\0017\000e\000\004\000\133\000\024\001\133\0017\000e\000\004\000\133\000\170\001\133\0017\000e\000 \001\135\000\214\001\135\000\170\001\133\0017\000e\000 \001\135\000\b\001\133\0017\000e\000\232\000e\000\228\000\194\001\133\0017\000\179\000\206\000e\001\137\000e\000\232\000e\000\228\001\b\001\133\0017\000Y\000\146\001\133\0017\000Y\000T\001\133\0017\001\175\001)\000\212\000Y\000\139\000s\001\147\000Y\000\235\000Y\001\135\000\164\001\135\001\135\000\162\001\135\001\135\000\160\001\135\001\135\000\158\001\135\001\135\000\156\001\135\001\135\000H\001\135\001\135\000F\001\135\001\135\000D\001\135\001\135\000d\001\135\001\135\000b\001\135\001\135\000&\001\135\001\135\000J\001\135\001\135\000\206\001\135\001\135\000z\001\135\001\135\000\182\001\135\001\135\000L\001\135\001\135\001\000\001\135\001\135\001\016\001\135\001\135\001\018\001\135\001\135\000\242\001\135\000G\001\135\001\199\001\135\001K\000\168\000e\000t\001C\000\168\000e\001\135\000\244\001\135\000p\000x\001\135\000Y\000\226\001S\000x\001\135\000Y\000\226\000l\000e\000.\000x\001\135\000Y\000\226\000\140\000e\0002\000x\001\135\000Y\000\226\000\144\001\135\0004\000x\001\135\000Y\000\220\000\140\000m\0002\000x\001\135\000Y\000\220\000l\000m\000.\000x\001\135\000Y\000\220\000\144\000m\0004\000x\001\135\000Y\000\226\001\003\000\220\000\140\000m\0002\000x\001\135\000Y\000\226\001\003\000\220\000l\000m\000.\000x\001\135\000Y\000\226\001\003\000\220\000\144\000m\0004\000x\001\135\001\135\001\187\000n\000e\000J\001\189\000~\001\189\000\167\0002\0008\001\002\001\149\000\206\001\147\0017\001\149\000\206\001\147\0017\000\134\001\189\000\167\0002\000\140\000y\0002\000O\000=\000\206\000e\000`\000e\000\246\001\191\000`\000e\001O\001w\000l\000\020\000\233\000.\001w\000?\000M\000l\000.\000l\000\251\000\246\000\247\000.\000\141\000R\001\143\000\246\001\143\000`\001\191\000\246\001\191\001\002\001\149\001o\0017\001\149\001o\0017\000\020\001\133\0017\0005\000p\000\242\000\229\000\143\0011\000\020\001\133\0017\000V\0005\000p\000\242\000\229\000\143\0011\000\020\001\133\0017\0005\000p\000;\000\143\0011\000\020\001\133\0017\000V\0005\000p\000;\000\143\0011\000\018\000p\000K\000\210\000,\000\224\000a\000\210\000|\001\189\000\167\0002\0006\000\239\000p\000\246\000\163\0017\000\239\000p\000\246\000\163\0017\000,\0017\001[\001Y\001Y\001W\000p\000p\000\246\001\139\001\011\000Y\000\148\000Y\000\030\000p\000\030\000l\000p\000=\000.\000>\000p\000N\000Y\000>\000l\001U\000\205\000.\000>\000l\000n\001U\000\205\000.\000>\000p\000N\000l\001G\000\205\000.\000N\000l\000n\001G\000\205\000.\000N\000\169\000\030\000l\001U\000.\000\030\000l\000n\001U\000.\000\030\000p\000\148\000W\000\148\000l\000n\000\179\000.\000W\000l\000n\001G\000.\000+\000O\000+\000=\000\206\000e\000n\000+\000=\000\206\000e\000+\000\246\000\135\000\226\001\139\000\206\000e\000n\000+\000\246\000\135\000\226\001\139\000\206\000e\000+\000\246\000\020\000\233\000\226\001\139\000\206\000e\000\171\000\206\000e\000U\000\246\001\139\000\206\000e\000n\000+\001\031\000v\001\133\0017\000\153\001M\0011\001K\001\195\000v\0017\000\153\001M\0011\000v\000J\001\189\0017\000\153\001M\0011\001I\001\195\000\179\000\179\000\246\001\139\000+\000O\000W\000\246\001\139\000\206\000e\000\171\000\206\000e\001E\001C\001\012\001M\001\014\0017\000#\001{\000p\001\181\0011\001A\001\014\0017\000#\001{\000p\000\246\001\165\0011\001?\001\014\0017\000#\001{\000p\000\206\001\169\0011\001=\001\014\0017\000\251\001\001\0011\001;\001\014\0017\000\251\000\246\000\247\0011\0019\001\187\0017\001\014\0017\0005\000p\000;\000\143\0011\0015\001\014\0017\0005\000p\000\242\000\229\000\143\0011\0013\000\161\0011\000*\001/\000_\001/\000*\001-\000*\000e\0011\001-\000I\001-\001\171\001+\001\183\001)\000I\001'\000*\001%\000*\000e\0011\001%\000I\001%\000C\001%\001S\000\213\000\207\001S\000\213\000\207\000,\001S\000\213\000\207\000,\000\016\000\217\001S\000\213\000\207\000,\001#\001\031\000=\000\206\000e\000\206\000e\001O\001!\000l\000\020\000\233\000.\001!\000r\001\133\0017\000\153\001M\0011\001\029\001\027\001\195\000\179\000`\000e\000\179\000\n\000e\000`\000e\000\179\000`\000\226\000p\000\246\000\163\0017\000,\0017\001\023\001\191\000,\001\023\000p\000\246\000\163\0017\000,\0017\001\191\000,\000p\000\246\000\163\0017\001\191\000\224\0017\000\031\000p\000\246\000\165\0017\000\157\000p\000O\001\004\0017\000\157\000p\000O\0017\000\157\000p\000\246\000\165\000\206\000e\001\004\0017\000\157\000p\000\246\000\165\000\206\000e\0017\000\157\000p\000\246\000\020\000\233\000\226\001\139\000\206\000e\001\004\0017\000\157\000p\000\246\000\020\000\233\000\226\001\139\000\206\000e\000p\001\005\000\226\000p\000\018\001\005\000\226\000\018\001e\000l\000\244\000.\000-\001\005\000\226\001e\001\005\000\226\000l\000\244\000.\001\005\000\226\000-\001e\001\005\000\226\001e\000p\001\003\000\226\000p\000\018\001\003\000\226\000\018\000+\001\003\000\226\000+\001\017\001\005\000l\001\005\000.\001\t\000\206\000\253\000\246\000\247\000\206\000\253\001s\001\001\000\246\000\247\001s\000\255\000\"\0017\000K\000\212\000\186\0017\001q\000`\000\253\000\199\000\253\001\187\001\003\000\253\000\199\000\253\000l\000.\001\131\000\016\000\018\000\016\000^\001\133\0017\000\018\000\242\001\005\0011\000(\0017\000a\000\212\000\186\0017\001q\000`\000\247\000^\000\020\000R\0017\000\253\000l\000\247\000.\000\247\001\187\000\243\000\247\000`\000\247\000\247\000\004\000\127\001\131\000^\000\020\001\133\0017\001e\000\209\0011\001\r\000\\\000\\\000\184\000X\000\\\000\012\000\\\000\012\000\012\000\\\001\006\001e\000p\000p\000\233\000$\000$\000\231\001\139\000@\001\139\001\141\000@\001\141\001\139\000\206\001\141\001\139\000\206\000@\001\141\000\224\000@\000\224\001\139\000\206\000\224\001\139\000\206\000@\000\224\000\144\001W\0004\000@\000\144\001W\0004\001\139\000\206\000\144\001W\0004\001\139\000\206\000@\000\144\001W\0004\000P\001\133\0017\000\253\0011\000P\001\004\001\133\0017\000\253\0011\000P\001\133\0017\001\005\0011\000P\001\004\001\133\0017\001\005\0011\000B\000t\001\012\000\220\000l\001a\000.\000\220\000l\001a\000.\000x\000\220\000\140\001a\0002\000\220\000\140\001a\0002\000x\000\220\000\144\001a\0004\000\220\000\144\001a\0004\000x\000\172\001\004\000\164\000\162\000\160\000\158\000\156\000H\000F\000D\000d\000b\000&\000J\000\206\000z\000\182\000L\001\000\001\016\001\018\000\242\001\016\001\002\000,\001\n\000p\000\246\001\139\000\206\001\135\000\206\000\247\000\206\000\179\000\206\000e\000=\000N\000>\000p\000\246\000l\000\253\000\246\000\247\000.\000l\000\253\000.\000l\000\014\0017\001\135\000.\000l\000\014\0017\001\135\000\246\000\247\000.\000l\000\014\0017\001\135\000\246\000\247\000\240\000\247\000.\000l\000\014\0017\001\135\000\240\000\247\000.\001\193\000\210\001\147\000\210\001\139\000\210\000e\000\210\001\005\000\210\001\003\000\210\000\243\000\210\000\179\000\210\000)\000\210\000\179\000\244\000\179\000\179\001\187\000\173\000\179\001\n\000+\000\177\000\179\001\002\000\179\000\204\001\133\0017\000\179\000\177\000\238\000\179\000\179\000\238\000\179\000\175\000\238\000\179\000\171\000\238\000\179\000W\001\147\000\179\000\235\000\179\000\146\001\133\0017\000W\000\171\000\244\000\179\000\171\001\187\000\173\000\171\001\n\000+\000\175\000\171\001\002\000\179\000p\000\016\000K\000\246\000a\000\246\001\139\000>\000\179\000>\000\179\000\n\000e\001\139\000\135\000\226\001\139\001\197\000\135\000\226\001\197\000\136\001\189\000\167\0002\000\202\001\133\0017\000+\000\246\001\139\000\206\000\231\0011\000@\000@\000\012\000@\000\012\000\012\000@\0000\000g\000Y\000\004\000g\001k\001m\000\149\001m\001k\001\127\001m\001\129\000\147\001m\000\147\001\129\001k\001m\000\145\001m\000\143\000\234\001\139\000\206\001\139\001s\000\141\001s\001Q\000\139\001Q\000\235\000\137\000\235\000:\001e\000\135\000:\001e\001\025\001\002\001\025\000\133\001\002\001\025\001\197\000\131\001\016\001\197\001\159\000\129\001\014\001\159\000\029\000\127\001\014\000\029\000o\000}\001\002\000o\001\139\000{\000\238\001\139\0007\000y\000\238\0007\001\191\000w\000&\001\191\000u\000\238\001\139\001\139\000\238\001\139\000s\000\238\001\135\001\135\000\238\001\135\000q\000&\001\191\001\191\000&\001\191\000E\001\139\001\135\001\135\000,\001\135\000,\000m\000p\000\211\000p\000\211\000,\000p\000\211\000,\000k\000\179\000\179\000,\000\179\000,\000i\001S\000\203\000\211\001S\000\203\000\211\000,\001S\000\203\000\211\000,\000g\001\135\001\135\000,\001\135\000,\000e\001\135\000,\000J\001\189\000e\000\204\001\133\0017\001\149\001o\0017\0011\001/\001]\0011\001}\000%\000\159\001g\0015\001i\0013\000\020\001\133\0017\0005\0009\000D\000\157\000\145\0011\000\020\001\133\0017\000V\0005\0009\000D\000\157\000\145\0011\000c\000^\001\133\0017\000\251\000\255\0011\000^\001\133\0017\000\251\000\206\001\003\0011\000\249\000^\001\133\0017\0000\000\251\000\246\000\247\0011\0019\000\245\000\225\000\166\001\133\0017\000\247\0011\000\248\001\133\0017\000#\001{\000p\000\246\001\165\0011\001?\001\163\001\153\000d\000\150\000d\000\196\000H\000\150\000H\000\196\000\144\001#\0004\000\140\000i\0002\000\132\000i\000\254\000\132\000\254\000\222\001\135\000\180\000\218\000Y\000l\000e\000.\000l\000e\000=\000.\000Y\000\226\000l\000e\000.\000Y\000\226\000\140\000e\0002\000Y\000\220\000\140\000m\0002\000Y\000\220\000l\000m\000.\000Y\000\220\000\144\000m\0004\000Y\000\226\001\003\000\220\000\140\000m\0002\000Y\000\226\001\003\000\220\000l\000m\000.\000Y\000\226\001\003\000\220\000\144\000m\0004\000Y\000\226\000\144\001\135\0004\000\252\001\133\0017\000e\000\212\000\252\001\133\0017\000\212\000Z\001\133\0017\001\177\000l\000^\001\133\0017\000\253\000.\000l\000^\001\133\0017\000\253\000\246\000\247\000.\000)\001\153\001\147\000\235\000B\000Y\001\004\000Y\000\142\000k\000\178\000\142\000\178\000Y\000\226\001S\001\003\000\226\000l\000e\000.\001\003\000\226\000\142\000k\000\178\000Y\000\174\000p\000Y\000\172\000Y\001\131\000\016\001\003\000\226\000l\000.\000\144\000\151\0004\001\003\000\226\000\144\000\151\0004\000\132\000m\000\254\000\132\000\254\001\003\000\226\000\132\000m\000\254\001\003\000\226\000\132\000\254\000\140\000m\0002\000\140\001\135\001\155\000\132\001\135\001\157\001\003\000\226\000\140\001\135\001\155\001\003\000\226\000\132\001\135\001\157\001\003\000\226\000\140\000m\0002\001\003\000\226\000\140\0002\001\003\000\226\000l\000^\001\133\0017\000\253\000\246\000\247\000.\000+\000U\000l\000\179\000.\000[\000l\000^\001\133\0017\000\251\000.\000l\000^\001\133\0017\000\251\000\246\000\247\000.\000\016\000]\000]\000\224\000]\001\147\000\235\000\174\0009\001\003\000\226\000[\001\003\000\226\000\140\0002\001\003\000\226\000l\000.\001\003\000\226\000l\000\179\000.\000l\000\179\000\246\001\139\000.\001\131\000p\000\018\001\014\001\n\001\b\000\252\000\248\000\234\000\232\000\228\000\216\000\214\000\212\000\204\000\202\000\200\000\194\000\190\000\188\000\186\000X\000\170\000\168\000\166\000\154\000\152\000\146\000v\000n\000j\000f\000^\000\\\000Z\000V\000T\000R\000P\000L\000@\0000\000(\000\"\000 \000\028\000\026\000\024\000\020\000\014\000\012\000\n\000\b\000\004\000c\000\204\001\133\0017\001\149\000\206\001\147\0017\0011\000\206\000e\001O\001y\000l\000\020\000\233\000.\001y\000\201\000?\000`\000M\000\201\000n\000?\000`\000M\000p\000\246\000?\000`\000M\000p\000\246\000n\000?\000`\000M\000?\000`\000M\000n\000?\000`\000M\000\201\000?\000`\000?\000\201\000?\000`\000n\000?\000\201\000n\000?\000`\000?\000\201\000n\000?\000`\000n\000?\000p\000\246\000?\000`\000?\000p\000\246\000?\000`\000n\000?\000p\000\246\000n\000?\000`\000?\000p\000\246\000n\000?\000`\000n\000?\000?\000`\000?\000?\000`\000n\000?\000n\000?\000`\000?\000n\000?\000`\000n\000?\001-\000e\0011\001-\001\027\001K\001]\0011\001}\000\159\000%\001g\0015\000\020\001\133\0017\0005\0009\000D\000\157\000\147\0011\000\020\001\133\0017\000V\0005\0009\000D\000\157\000\147\0011\000Q\000^\001\133\0017\000\251\001\001\0011\000^\001\133\0017\0000\000\251\001\001\0011\001;\000\245\000\227\000\248\001\133\0017\000#\001{\000p\001\181\0011\001A\001\163\000\166\001\133\0017\000\253\0011\000d\000b\000\235\000R\000\221\000\131\0017\000\235\0017\000\174\001e\000\174\001e\000$\000\174\001e\000\150\000\174\001e\000)\000\174\001e\001\003\000\174\001e\000\200\000\174\001e\000\026\000e\0011\000*\001'\000*\000C\000*\000\210\001\191\000q\000\246\001\139\000\246\001\139\000\240\001\139\000\240\001\139\000\206\000\229\001\019\0001\0003\0007\000l\000y\000.\000:\001e\000\016\000H\000d\001\004\000H\001\004\001\004\000H\000d\001\004\001\004\000d\000\160\000B\001%\000\210\000e\0011\001%\000\210\000l\000\223\000.\000p\000-\001\007\0017\000!\000p\000\246\001\139\0017\000\241\000p\000\206\000e\001\004\0017\000\241\000p\000\206\000e\0017\000\241\000p\000=\000\206\000e\001\004\0017\000\241\000p\000=\000\206\000e\000\014\001\133\0017\000+\000\246\001\139\0011\000\012\000\012\000\\\000\012\000\012\000\\\000\012\000@\000\012\000\012\000@\000\020\0005\001S\000\027\001\197\000\143\000\020\0005\001S\000\242\001\197\000^\001\003\000\206\001\005\000^\001\003\000\242\001\005\000\206\000\206\000@"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\020\000\024\000\025\000\026\000\029\000#\000%\000&\000'\000)\000-\0000\0002\0004\0007\000<\000?\000C\000H\000L\000N\000R\000X\000Y\000Z\000]\000a\000b\000e\000h\000n\000u\000w\000y\000z\000\127\000\133\000\136\000\139\000\143\000\147\000\149\000\150\000\152\000\156\000\158\000\161\000\163\000\164\000\167\000\172\000\172\000\175\000\175\000\179\000\186\000\193\000\197\000\199\000\200\000\201\000\205\000\206\000\211\000\213\000\219\000\226\000\229\000\230\000\234\000\239\000\244\000\245\000\249\000\254\001\001\001\012\001\r\001\020\001\025\001\028\001!\001$\001)\001,\0011\0014\0019\001:\001;\001<\001=\001?\001A\001B\001C\001D\001G\001H\001I\001N\001Q\001R\001U\001V\001Y\001\\\001]\001^\001_\001a\001b\001c\001f\001l\001p\001v\001|\001\132\001\139\001\150\001\159\001\160\001\168\001\177\001\184\001\192\001\196\001\201\001\209\001\215\001\221\001\229\001\235\001\242\001\253\002\001\002\005\002\011\002\r\002\014\002\016\002\018\002\021\002\024\002\027\002\030\002!\002$\002'\002*\002-\0020\0023\0026\0029\002<\002?\002B\002E\002H\002K\002N\002P\002R\002U\002Y\002\\\002_\002d\002k\002r\002y\002\128\002\135\002\142\002\151\002\160\002\169\002\171\002\173\002\173\002\175\002\179\002\180\002\185\002\189\002\193\002\193\002\196\002\197\002\200\002\202\002\206\002\208\002\213\002\214\002\215\002\217\002\222\002\223\002\223\002\225\002\229\002\231\002\235\002\238\002\247\003\001\003\t\003\018\003\019\003\020\003\022\003\022\003\024\003\026\003\030\003\031\003$\003+\003,\003-\003/\0030\0033\0034\0035\0037\0039\003>\003@\003B\003G\003M\003O\003T\003Z\003\\\003`\003e\003g\003i\003n\003o\003s\003u\003y\003~\003\133\003\141\003\149\003\152\003\157\003\160\003\166\003\168\003\173\003\180\003\182\003\183\003\186\003\188\003\193\003\196\003\197\003\200\003\200\003\208\003\208\003\217\003\217\003\226\003\226\003\232\003\232\003\239\003\239\003\241\003\241\003\249\003\249\004\002\004\002\004\004\004\004\004\006\004\b\004\b\004\n\004\014\004\016\004\016\004\018\004\018\004\020\004\020\004\022\004\022\004\024\004\028\004\030\004 \004#\004'\004-\0042\0043\0046\0048\004:\004?\004E\004F\004H\004K\004P\004S\004Z\004]\004c\004e\004i\004j\004k\004p\004t\004y\004\128\004\136\004\146\004\157\004\158\004\161\004\162\004\165\004\166\004\169\004\170\004\173\004\178\004\181\004\182\004\185\004\186\004\189\004\190\004\193\004\194\004\197\004\198\004\202\004\203\004\205\004\209\004\211\004\213\004\215\004\219\004\224\004\225\004\227\004\228\004\230\004\233\004\234\004\235\004\236\004\237\004\244\004\248\004\253\005\002\005\005\005\007\005\b\005\011\005\014\005\015\005\022\005\023\005\023\005\024\005\024\005\025\005\026\005\027\005\027\005\028\005\029\005\031\005!\005#\005$\005&\005'\005)\005*\005,\005-\005/\0052\0056\0057\0059\005<\005@\005C\005G\005L\005R\005W\005]\005b\005h\005i\005j\005k\005o\005t\005x\005}b\006\012\006\015\006\017\006\018\006\021\006\022\006\025\006\026\006\027\006\028\006\030\006 \006\"\006&\006'\006*\006+\006.\0062\006;\006;\006<\006<\006=\006>\006@\006B\006B\006C\006D\006G\006H\006I\006K\006L\006M\006N\006O\006Q\006S\006T\006U\006W\006W\006\\\006]\006_\006`\006b\006c\006e\006g\006j\006k\006m\006p\006q\006t\006u\006x\006y\006|\006}\006\128\006\129\006\132\006\133\006\136\006\137\006\140\006\143\006\146\006\149\006\152\006\155\006\158\006\159\006\160\006\161\006\163\006\166\006\168\006\171\006\175\006\176\006\178\006\181\006\184\006\188\006\193\006\194\006\196\006\199\006\204\006\211\006\212\006\214\006\215\006\216\006\217\006\219\006\221\006\230\006\240\006\241\006\247\006\254\006\255\007\b\007\t\007\n\007\015\007\025\007\026\007\027\007\029\007\031\007!\007#\007&\007)\007,\007.\0071\0073\0076\007:\007?\007D\007I\007N\007S\007Z\007a\007h\007m\007r\007v\007z\007\128\007\136\007\137\007\138\007\139\007\140\007\142\007\144\007\147\007\149\007\152\007\157\007\162\007\165\007\168\007\169\007\170\007\174\007\177\007\182\007\185\007\187\007\192\007\196\007\199\007\202\007\205\007\210\007\215\007\220\007\224\007\234\007\235\007\236\007\239\007\240\007\246\007\254\007\255\b\000\b\003\b\004\b\005\b\007\b\n\b\014\b\018\b\023\b\028\b\029\b\030\b\031\b \b!\b\"\b#\b$\b%\b&\b'\b(\b)\b*\b+\b,\b-\b.\b/\b0\b1\b2\b3\b4\b5\b6\b7\b8\b9\b:\b;\b<\b=\b>\b?\b@\bA\bB\bC\bD\bE\bF\bG\bH\bI\bJ\bK\bL\bM\bN\bO\bP\bQ\bR\bS\b[\b]\b_\bd\bh\bm\br\bx\b{\b\127\b\131\b\136\b\141\b\147\b\152\b\158\b\164\b\171\b\174\b\178\b\182\b\187\b\188\b\191\b\192\b\193\b\195\b\196\b\197\b\198\b\200\b\209\b\219\b\220\b\226\b\234\b\235\b\236\b\245\b\246\b\251\b\252\b\253\t\002\t\004\t\006\t\t\t\012\t\015\t\018\t\021\t\024\t\027\t\029\t\031\t \t!\t\"\t$\t(\t*\t*\t,\t-\t/\t/\t0\t3\t5\t6\t6\t7\t8\t9\t;\t=\t?\tA\tB\tC\tE\tI\tL\tM\tN\tO\tT\tY\t_\te\tl\ts\ts\tt\tu\tw\ty\tz\t|\t~\t\132\t\137\t\141\t\145\t\146\t\148"))
    
    and lr0_core =
      (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\0009\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000F\000G\000H\000I\000J\000K\000L\000M\000N\000O\000P\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000]\000^\000_\000`\000a\000b\000c\000d\000e\000f\000g\000h\000i\000j\000k\000l\000m\000n\000o\000p\000q\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\t\001\n\001\011\001\012\001\r\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001 \001!\001\"\001#\001$\001%\001&\001'\001(\001)\001*\001+\001,\001-\001.\001/\0010\0011\0012\0013\0014\0015\0016\0017\0018\0019\001:\001;\001<\001=\001>\001?\001@\001A\001B\001C\001D\001E\001F\001G\001H\001I\001J\001K\001L\001M\001N\001O\001P\001Q\001R\001S\001T\001U\001V\001W\001X\001Y\001Z\001[\001\\\001]\001^\001_\001`\001a\001b\001c\001d\001e\001f\001g\001h\001i\001j\001k\001l\001m\001n\001o\001p\001q\001r\001s\001t\001u\001v\001w\001x\001y\001z\001{\001|\001}\001~b\002\t\002\n\002\011\002\012\002\r\002\014\002\015\002\016\002\017\002\018\002\019\002\020\002\021\002\022\002\023\002\024\002\025\002\026\002\027\002\028\002\029\002\030\002\031\002 \002!\002\"\002#\002$\002%\002&\002'\002(\002)\002*\002+\002,\002-\002.\002/\0020\0021\0022\0023\0024\0025\0026\0027\0028\0029\002:\002;\002<\002=\002>\002?\002@\002A\002B\002C\002D\002E\002F\002G\002H\002I\002J\002K\002L\002M\002N\002Q\002R\002W\002X\002Y\002Z\002[\002\\\002]\002^\002_\002O\002P\002S\002T\002U\002V\002`\002a\002b\002c\002d\002e\002f\002g\002h\002i\002j\002k\002l\002m\002n\002o\002p\002q\002r\002s\002t\002u\002v\002w\002x\002y\002z\002{\002|\002}\002~b\003\t\003\n\003\011\003\012\003\r\003,\003-\003.\003/\0030\0031\0032\0033\0034\0035\0036\0037\0038\0039\003:\003;\003<\003=\003>\003?\003@\003\020\003\021\003\022\003\023\003\014\003\015\003\018\003\019\003\026\003\027\003\028\003\029\003\030\003\031\003 \003!\003\"\003#\003$\003%\003&\003'\003(\003)\003*\003+\003\016\003\017\003\024\003\025\004D\004E\003B\003C\003D\003E\003F\003G\003H\003I\003J\003K\003L\003M\003N\003O\003P\003Q\003R\003S\003d\003e\003~\003\127\003\128\003\129\003\130\003\131\003\132\003\133\003\134\003\135\003T\003U\003Z\003[\003f\003g\003V\003W\003X\003Y\003\\\003]\003^\003_\003`\003a\003b\003c\003h\003i\003j\003k\003v\003w\003l\003m\003n\003o\003p\003q\003x\003y\003z\003{\003|\003}\003r\003s\003t\003u\003\136\003\137\003\138\003\139\003\140\003\141\003\142\003\143\003\144\003\145\003\146\003\147\003\148\003\149\003\150\003\151\003\152\003\153\003\154\003\155\003\156\003\157\003\158\003\159\003\160\003\161\003\162\003\163\003\164\003\165\003\166\003\167\003\168\003\169\003\170\003\171\003\172\003\173\003\174\003\175\003\176\003\177\003\178\003\179\003\180\003\181\003\182\003\183\003\184\003\185\003\186\003\187\004F\004G\004H\004I\004J\004K\004L\004M\004N\004O\004P\003\207\003\205\003\206\004Q\004R\004S\004T\004U\004V\004W\004\t\004\n\004\011\004\012\004\r\004\014\004\015\004\016\004\017\004\018\004\019\004\020\004\021\004\022\004\023\004\024\004\025\004\026\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004#\004$\004%\004&\004'\004(\004)\004*\004+\004,\004-\004.\004/\0040\0041\0042\0043\0044\0045\0046\0047\0048\0049\004:\004;\004<\004=\004>\004?\004@\004A\004B\004C\004X\004Y\004Z\004[\004\\\004]\004^\004_\003A\003\188\003\189\003\190\003\191\003\192\003\193\003\194\003\195\003\196\003\197\003\198\003\199\003\200\003\201\003\202\003\203\003\204\003\208\003\209\003\210\003\211\003\212\003\213\003\214\003\215\003\216\003\217\003\218\003\219\003\220\003\221\003\222\003\223\003\224\003\225\003\226\003\227\003\228\003\229\003\230\003\231\003\232\003\233\003\234\003\235\003\236\003\237\003\238\003\239\003\240\003\241\003\242\003\243\003\244\003\245\003\246\003\247\003\248\003\249\003\250\003\251\003\252\003\253\003\254\003\255\004\000\004\001\004\002\004\003\004\004\004\005\004\006\004\007\004\b\004`\004a\004b\004c\004d\004e\004f\004g\004h\004i\004j\004k\004l\004m\004n\004o\004p\004q\004r\004s\004t\004u\004v\004w\004x\004y\004z\004{\004|\004}\004~b\005\t\005\n\005\011\005\012\005\r\005\014\005\015\005\016\005\017\005\018\005\019\005\020\005\021\005\022\005\023\005\024\005\025\005\026\005\027\005\028\005\029\005\030\005\031\005 \005!\005\"\005#\005$\005%\005&\005'\005(\005)\005*\005+\005,\005-\005.\005/\0050\0051\0052\0053\0054\0055\0056\0057\0058\0059\005:\005;\005<\005=\005>\005?\005@\005A\005B\005C\005D\005E\005F\005G\005H\005I\005J\005K\005L\005M\005N\005O\005P\005Q\005R\005S\005T\005U\005V\005W\005X\005Y\005Z\005[\005\\\005]\005^\005_\005`\005a\005b\005c\005d\005e\005f\005g\005h\005i\005j\005k\005l\005m\005n\005o\005p\005q\005r\005s\005t\005u\005v\005w\005x\005y\005z\005{\005|\005}\005~b\006\t\006\n\006\011\006\012\006\r\006\014\006\015\006\016\006\017\006\018\006\019\006\020\006\021\006\022\006\023\006\024\006\025\006\026\006\027\006\028\006\029\006\030\006\031\006 \006!\006\"\006#\006$\006%\006&\006'\006(\006)\006*\006+\006,\006-\006.\006/\0060\0061\0062\0063\0064\0065\0066\0067\0068\0069\006:\006;\006<\006=\006>\006?\006@\006A\006B\006C\006D\006E\006F\006G\006H\006I\006J\006K\006L\006M\006N\006O\006P\006Q\006R\006S\006T\006U\006V\006W\006X\006Y\006Z\006[\006\\\006]\006^\006_\006`\006a\006b\006c\006d\006e\006f\006g\006h\006i\006j\006k\006l\006m\006n\006o\006p\006q\006r\006s\006t\006u\006v\006w\006x\006y\006z\006{\006|\006}\006~b\007\t\007\n\007\011\007\012\007\r\007\014\007\015\007\016\007\017\007\018\007\019\007\020\007\021\007\022\007\023\007\024\007\025\007\026\007\027\007\028\007\029\007\030\007\031\007 \007!\007\"\007#\007$\007%\007&\007'\007(\007)\007*\007+\007,\007-\007.\007/\0070\0071\0072\0073\0074\0075\0076\0077\0078\0079\007:\007;\007<\007=\007>\007?\007@\007A\007B\007C\007D\007E\007F\007G\007H\007I\007J\007K\007L\007M\007N\007O\007P\007Q\007R\007S\007T\007U\007V\007W\007X\007Y\007Z\007[\007\\\007]\007^\007_\007`\007a\007b\007c\007d\007e\007f\007g\007h\007i\007j\007k\007l\007m\007n\007o\007p\007q\007r\007s\007t\007u\007v\007w\007x\007y\007z\007{\007|\007}\007~\007\127\007\128\007\129\007\130\007\131\007\132\007\133\007\134\007\135\007\136\007\137\007\138\007\139\007\140\007\141\007\142\007\143\007\144\007\145\007\146\007\147\007\148\007\149\007\150\007\151\007\152")
    
    and lr0_items =
      ((32, "\000\000\000\000\000\002\028\001\000\003\024\001\000\011\200\001\000\011\196\001\000\011\192\001\000\011\188\001\000\011\184\001\000\n\252\001\000\011\180\001\000\011\176\001\000\011\172\001\000\011\168\001\000\011\164\001\000\011\160\001\000\011\156\001\000\011\152\001\000\011\148\001\000\011\144\001\000\011\140\001\000\011\136\001\000\011\132\001\000\011\128\001\000\011H\001\000\011|\001\000\011x\001\000\011t\001\000\011p\001\000\011l\001\000\011h\001\000\n\248\001\000\011d\001\000\011`\001\000\011\\\001\000\011X\001\000\011T\001\000\011P\001\000\011L\001\000\011D\001\000\011@\001\000\011<\001\000\0118\001\000\0114\001\000\0110\001\000\011,\001\000\011(\001\000\011$\001\000\011 \001\000\011\028\001\000\011\024\001\000\011\020\001\000\011\016\001\000\011\012\001\000\011\b\001\000\011\004\001\000\011\000\001\000\000\164\001\000\000\160\001\000\000\164\002\000\000\164\003\000\003\024\002\000\002\028\002\000\000\168\001\000\000\168\002\000\002X\001\000\002X\002\000\002X\003\000\np\001\000\005\168\001\000\002\024\001\000\002\020\001\000\002\016\001\000\002\012\001\000\002\024\002\000\002\020\002\000\002\016\002\000\002\012\002\000\002\024\003\000\002\020\003\000\002\016\003\000\002\012\003\000\002L\001\000\002L\002\000\002L\003\000\001\188\001\000\001\168\001\000\003 \001\000\nH\001\000\n,\001\000\n,\002\000\n,\003\000\005\160\001\000\005\172\001\000\005\164\001\000\005\172\002\000\005\164\002\000\005\172\003\000\005\164\003\000\005\192\001\000\001\000\001\000\n,\004\000\004\152\001\000\004\152\002\000\r\024\001\000\n4\001\000\n0\001\000\t\252\001\000\t\248\001\000\001\212\001\000\001\180\001\000\007\016\001\000\001\180\002\000\nH\001\000\006\188\001\000\r\028\001\000\003\028\001\000\003\028\002\000\r<\001\000\r<\002\000\r<\003\000\r\024\001\000\006\188\001\000\007\004\001\000\007\000\001\000\006\252\001\000\007\020\001\000\007$\001\000\007\012\001\000\007\br\024\002\000\r\024\003\000\r<\004\000\r<\005\000\000\\\001\000\005x\001\000\000X\001\000\003\140\001\000\003\144\001\000\000X\002\000\007\140\001\000\007\140\002\000\007\140\003\000\007\136\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\000T\002\000\000T\003\000\000T\004\000\005x\001\000\003\140\001\000\006\b\001\000\006\b\002\000\t\160\001\000\t\156\001\000\003\136\001\000\003\132\001\000\003\128\001\000\003|\001\000\t\160\002\000\t\156\002\000\003\136\002\000\003\132\002\000\003\128\002\000\003|\002\000\t\160\003\000\t\156\003\000\003\136\003\000\003\132\003\000\003\128\003\000\003|\003\000\r\012\001\000\012\248\001\000\012\236\001\000\012\248\002\000\t\160\004\000\003\136\004\000\003\128\004\000\r\000\001\000\012\240\001\000\r\000\002\000\012\220\001\000\r\b\001\000\r\004\001\000\012\252\001\000\012\244\001\000\012\252\002\000\r\004\002\000\012\208\001\000\012\228\001\000\012\224\001\000\012\224\002\000\012\208\002\000\t\012\001\000\012\220\002\000\t\016\001\000\012\220\003\000\t\016\002\000\t\016\003\000\t\160\005\000\003\136\005\000\003\128\005\000\005p\001\000\003\136\006\000\003\128\006\000\012\200\001\000\005x\001\000\001\192\001\000\006\160\001\000\006\144\001\000\006\128\001\000\006x\001\000\001\196\001\000\001\180\001\000\000|\001\000\000h\001\000\000T\001\000\000P\001\000\012$\001\000\012 \001\000\011\244\001\000\005p\001\000\000p\001\000\000l\001\000\005p\001\000\005H\001\000\005@\001\000\0058\001\000\005H\002\000\005@\002\000\0058\002\000\b\208\001\000\000X\001\000\b\208\002\000\000X\002\000\012\020\001\000\012\016\001\000\012\012\001\000\012\b\001\000\011\236\001\000\011\232\001\000\005p\001\000\012\020\002\000\012\016\002\000\012\012\002\000\012\b\002\000\011\236\002\000\011\232\002\000\012\020\003\000\012\016\003\000\011\236\003\000\000\152\001\000\000\148\001\000\007D\001\000\000\152\002\000\000\148\002\000\000\144\001\000\000\140\001\000\000\144\002\000\000\140\002\000\000\136\001\000\000\132\001\000\000\128\001\000\000t\001\000\005\188\001\000\005|\001\000\005t\001\000\005\188\002\000\005\188\003\000\005\188\001\000\005|\001\000\005\188\004\000\005|\002\000\005|\003\000\005\184\001\000\005|\002\000\005t\002\000\005t\003\000\001t\001\000\000t\002\000\000\132\002\000\006`\001\000\006`\002\000\000`\001\000\012\028\001\000\012\024\001\000\011\240\001\000\003P\001\000\012\028\002\000\012\024\002\000\011\240\002\000\012$\001\000\012 \001\000\012\028\003\000\011\244\001\000\012$\002\000\012 \002\000\012\028\004\000\011\244\002\000\012$\003\000\012 \003\000\011\244\003\000\012$\004\000\012$\001\000\012 \001\000\011\244\001\000\012$\005\000\012$\002\000\012 \002\000\011\244\002\000\012\180\001\000\t,\001\000\t,\002\000\012\204\001\000\000\156\001\000\t,\003\000\000x\001\000\000d\001\000\000x\002\000\000x\003\000\000d\002\000\012\176\001\000\t0\001\000\000x\001\000\000d\001\000\t0\002\000\t0\003\000\000x\001\000\000dt4\001\000\003T\001\000\b\252\001\000\t\000\001\000\000\132\003\000\000\132\004\000\t\000\002\000\t\000\003\000\012\128\001\000\012|\001\000\012|\002\000\0078\001\000\012|\003\000\012|\004\000\b\232\001\000\b\232\002\000\000<\001\000\b\232\003\000\000@\001\000\000@\002\000\000@\003\000\000@\004\000\012|\005\000\b\228\001\000\000@\001\000\012\128\002\000\t8\001\000\001\248\001\000\001\248\002\000\001\244\001\000\000@\001\000\t4\001\000\000\128\002\000\000\128\003\000\000\136\002\000\000\136\003\000\t\000\001\000\000\136\004\000\000\136\005\000\t\000\001\000\000\140\003\000\000\140\004\000\t\000\001\000\000\152\003\000\000\148\003\000\000\148\004\000\000\152\004\000\b\204\001\000\000\152\005\000\000\152\006\000\b\204\002\000\b\200\001\000\012\020\004\000\012\016\004\000\011\236\004\000\012\020\005\000\012\016\005\000\011\236\005\000\012$\001\000\012 \001\000\012\020\006\000\011\244\001\000\012$\002\000\012 \002\000\012\020\007\000\011\244\002\000\012\028\001\000\012\024\001\000\012\016\006\000\011\240\001\000\011\236\006\000\012\012\003\000\012\b\003\000\011\232\003\000\012\012\004\000\012\b\004\000\011\232\004\000\012$\001\000\012 \001\000\012\012\005\000\011\244\001\000\012$\002\000\012 \002\000\012\012\006\000\011\244\002\000\012\028\001\000\012\024\001\000\012\b\005\000\011\240\001\000\011\232\005\000\b\212\001\000\bH\001\000\b\212\002\000\b\212\003\000\bH\002\000\bH\003\000\000@\001\000\005H\003\000\005@\003\000\0058\003\000\005H\004\000\005@\004\000\0058\004\000\005@\005\000\0058\005\000\005@\006\000\0058\006\000\005P\001\000\0058\007\000\005L\001\000\005D\001\000\005<\001\000\000x\001\000\000d\001\000\005D\002\000\005<\002\000\005<\003\000\bD\001\000\000@\001\000\000p\002\000\000l\002\000\000l\003\000\012$\002\000\012 \002\000\011\244\002\000\001\196\002\000\001\196\003\000\t\028\001\000\000|\002\000\000h\002\000\000|\003\000\000h\003\000\000|\004\000\000|\005\000\000h\004\000\t\028\002\000\t\028\003\000\001\248\001\000\t \001\000\001\248\001\000\000P\002\000\000P\003\000\t \002\000\t \003\000\001\248\001\000\001\176\001\000\000\136\001\000\000\132\001\000\000\128\001\000\001\176\002\000\006\160\002\000\006H\001\000\006@\001\000\006D\001\000\003\176\001\000\003\172\001\000\003\176\002\000\003\172\002\000\003\176\003\000\003\172\003\000\003\176\004\000\003\172\004\000\003\176\005\000\003\172\005\000\003\176\006\000\003\176\007\000\006\160\003\000\006\160\004\000\003\188\001\000\003\184\001\000\003\188\002\000\003\180\001\000\001\184\001\000\006\144\002\000\003t\001\000\001\236\001\000\001\192\001\000\001\196\001\000\001\180\001\000\001\176\001\000\003t\002\000\003h\001\000\001\232\001\000\001\232\002\000\001\232\003\000\t\024\001\000\001\228\001\000\t\024\002\000\001\228\002\000\t\024\003\000\001\228\003\000\000x\001\000\000d\001\000\003h\002\000\t\020\001\000\001\224\001\000\000x\001\000\000d\001\000\003p\001\000\003l\001\000\003l\002\000\003l\003\000\003l\004\000\000x\001\000\000d\001\000\t\020\001\000\003p\002\000\001\224\001\000\000x\001\000\000d\001\000\003t\003\000\003t\004\000\001\200\001\000\b\136\001\000\001\240\001\000\003t\001\000\b\136\002\000\b\128\001\000\b\132\001\000\006x\002\000\001\248\001\000\006\128\002\000\003x\001\000\003x\002\000\003x\003\000\006\156\001\000\006\156\002\000\006\156\003\000\006\140\001\000\012\200\002\000\006\168\001\000\006\164\001\000\006\152\001\000\006\148\001\000\006\136\001\000\006\132\001\000\006t\001\000\001\248\001\000\006\168\002\000\006\164\002\000\006\152\002\000\006\148\002\000\006\136\002\000\006\132\002\000\006\168\003\000\006\152\003\000\006\136\003\000\006\168\004\000\006\168\005\000\006\168\006\000\006\152\004\000\006\136\004\000\006\164\003\000\006\164\004\000\006\164\005\000\006\148\003\000\006\132\003\000\006|\001\000\003\128\007\000\003\128\b\000\b\180\001\000\003\128\t\000\bL\001\000\bL\002\000\012P\001\000\012L\001\000\003\136\001\000\003\132\001\000\012P\002\000\012L\002\000\003\136\002\000\003\132\002\000\012P\003\000\012L\003\000\003\136\003\000\003\132\003\000\012P\004\000\003\136\004\000\012P\005\000\003\136\005\000\005p\001\000\003\136\006\000\003\136\007\000\b\180\001\000\003\136\b\000\b\180\002\000\b\180\003\000\001\248\001\000\b\180\004\000\b\180\005\000\001\248\001\000\004\176\001\000\004\176\002\000\003\136\t\000\012P\006\000\012P\007\000\bX\001\000\012P\b\000\003t\001\000\003$\001\000\003t\002\000\003$\002\000\003$\003\000\001\212\001\000\001\180\001\000\001\212\002\000\001\212\003\000\005\172\001\000\001\208\001\000\001\204\001\000\005\172\002\000\001\208\002\000\001\208\003\000\001\208\004\000\001\208\005\000\003$\004\000\003$\005\000\001\216\001\000\012P\t\000\b\160\001\000\b\156\001\000\012P\n\000\b\156\002\000\b\160\002\000\b\140\001\000\b\148\001\000\b\144\001\000\b\152\001\000\003x\001\000\003(\001\000\003(\002\000\003(\003\000\003(\004\000\012\216\001\000\012L\004\000\003\132\004\000\005p\001\000\003\132\005\000\003\132\006\000\b\180\001\000\003\132\007\000\003\132\b\000\012L\005\000\012L\006\000\012L\007\000\012L\b\000\b\160\001\000\b\156\001\000\012L\t\000\004\200\001\000\004\196\001\000\003\168\001\000\0008\001\000\0004\001\000\006\176\001\000\006\172\001\000\006\176\002\000\006\176\003\000\006\176\004\000\005\248\001\000\005\216\001\000\005\216\002\000\002h\001\000\002h\002\000\002h\003\000\001\b\001\000\001\004\001\000\n\200\001\000\t\220\001\000\t\216\001\000\t\216\002\000\t\220\002\000\t\212\001\000\t\208\001\000\t\208\002\000\t\212\002\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\001\212\001\000\001\180\001\000\t\220\001\000\t\216\001\000\006\252\001\000\n\196\002\000\n\192\002\000\n\196\003\000\n\192\003\000\n\196\004\000\n\192\004\000\006\000\001\000\005\252\001\000\n\196\005\000\n\192\005\000\n\192\006\000\n\196\006\000\006\016\001\000\006\016\002\000\006\016\003\000\006\016\004\000\007\164\001\000\007\160\001\000\007\156\001\000\007\152\001\000\007\148\001\000\007\144\001\000\007\164\002\000\007\160\002\000\007\156\002\000\007\152\002\000\007\164\003\000\007\160\003\000\007\156\003\000\007\152\003\000\012x\001\000\012t\001\000\002\b\001\000\002\b\002\000\002\b\003\000\002H\001\000\002H\002\000\002H\003\000\003\016\001\000\r\028\001\000\002\224\001\000\002\224\002\000\005 \001\000\005 \002\000\005 \003\000\bt\001\000\005 \004\000\0048\001\000\004(\001\000\004 \001\000\0048\002\000\004(\002\000\004 \002\000\004\004\001\000\004\000\001\000\003\252\001\000\004\000\002\000\003\252\002\000\004\000\003\000\003\196\001\000\003\192\001\000\003\196\002\000\003\196\003\000\001\248\001\000\004\000\004\000\004\000\005\000\003\252\003\000\003\252\004\000\004\004\002\000\003\236\001\000\003\232\001\000\003\228\001\000\003\232\002\000\003\228\002\000\003\232\003\000\003\232\004\000\007|\001\000\002\216\001\000\t\236\001\000\t\232\001\000\t\228\001\000\001\176\001\000\t\224\001\000\003\200\001\000\t\224\002\000\t\224\003\000\005\b\001\000\005\004\001\000\005\000\001\000\004\252\001\000\007\\\001\000\007\\\002\000\001\248\001\000\005\b\002\000\005\004\002\000\005\000\002\000\004\252\002\000\007t\001\000\b\004\001\000\b\004\002\000\b\004\003\000\001\160\001\000\n\220\001\000\n\220\002\000\001\172\001\000\001\164\001\000\n\176\001\000\r \001\000\n\180\001\000\b\004\004\000\n\188\001\000\n\208\001\000\n\204\001\000\n\208\002\000\n\208\003\000\t\204\001\000\n\216\001\000\n\236\001\000\n\232\001\000\n\228\001\000\n\224\001\000\005\172\001\000\001\208\001\000\001\204\001\000\n\236\002\000\n\232\002\000\n\228\002\000\n\224\002\000\005\172\002\000\001\208\002\000\n\236\003\000\n\232\003\000\001\208\003\000\nn\216\001\000\b\000\001\000\b\000\002\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\n\244\001\000\n\212\001\000\007\252\001\000\007\252\002\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\007\236\001\000\007\228\004\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\n\236\004\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\n\236\005\000\n\228\003\000\t\228\001\000\n\228\004\000\t\228\002\000\t\228\003\000\t\\\001\000\tX\001\000\tT\001\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\t\\\002\000\tX\002\000\t\\\003\000\n\224\003\000\n\212\001\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\007t\002\000\005\b\003\000\005\004\003\000\005\000\003\000\004\252\003\000\005\b\004\000\005\004\004\000\005\000\004\000\005\004\005\000\007L\001\000\005\004\006\000\005\b\005\000\t\236\002\000\t\232\002\000\t\232\003\000\n\176\001\000\004X\001\000\003\248\001\000\003\244\001\000\003\240\001\000\b$\001\000\003\244\002\000\003\240\002\000\003\244\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\004T\001\000\004P\001\000\004T\002\000\004T\003\000\001\248\001\000\003\244\004\000\003\244\005\000\003\244\006\000\003\240\003\000\003\240\004\000\003\240\005\000\b \001\000\003\248\002\000\r\024\001\000\011\220\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\004\020\001\000\001\212\001\000\001\180\001\000\011\220\002\000\006h\001\000\006d\001\000\006h\002\000\011\220\003\000\011\220\004\000\004\012\001\000\004\b\001\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\004\012\002\000\001\212\001\000\001\180\001\000\t\212\001\000\t\208\001\000\007\b\001\000\004\012\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\004\012\004\000\004\012\005\000\n\240\002\000\n\184\002\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\n\184\003\000\n\240\003\000\n\240\004\000\001\248\001\000\n\240\005\000\004\b\002\000\011\212\001\000\004<\001\000\0028\001\000\0024\001\000\0020\001\000\002,\001\000\0028\002\000\0024\002\000\0028\003\000\0028\004\000\0028\005\000\005\220\001\000\005\220\002\000\003\\\001\000\003X\001\000\003X\002\000\003\\\002\000\003\\\003\000\006\020\001\000\006\012\001\000\006\012\002\000\b\188\001\000\003`\001\000\b\188\002\000\006\012\003\000\006\012\004\000\006\028\001\000\006$\001\000\006 \001\000\006\024\001\000\006\012\005\000\006$\002\000\rd\001\000\r`\001\000\rd\002\000\r`\002\000\rd\003\000\r`\003\000\rt\001\000\rp\001\000\rt\002\000\rd\004\000\rd\005\000\000@\001\000\r`\004\000\r`\005\000\000@\001\000\r`\006\000\b\180\001\000\rl\001\000\rh\001\000\rl\002\000\rh\002\000\005\172\001\000\rh\003\000\rh\004\000\005\188\001\000\005|\001\000\005\172\002\000\rl\003\000\rl\004\000\005\188\001\000\005|\001\000\b\244\001\000\b\248\001\000\006$\003\000\b\248\002\000\b\248\003\000\006 \002\000\006$\001\000\006 \003\000\006 \001\000\006\024\001\000\006\024\002\000\005\188\001\000\005\156\001\000\005|\001\000\005\156\002\000\005|\002\000\005|\003\000\003\140\001\000\005\156\003\000\0060\001\000\005\152\001\000\006(\001\000\bn\152\001\000\n\132\001\000\n\128\001\000\n\148\001\000\n\144\001\000\001\176\001\000\nT\001\000\nP\001\000\tP\001\000\tL\001\000\tH\001\000\007d\001\000\nx\001\000\r\028\001\000\005\160\001\000\t\244\001\000\t\240\001\000\002d\001\000\002d\002\000\002d\003\000\n(\001\000\n$\001\000\n(\002\000\n$\002\000\n(\003\000\n$\003\000\002T\001\000\002P\001\000\002T\002\000\002P\002\000\002T\003\000\002P\003\000\002<\001\000\002<\002\000\002<\003\000\b\220\001\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\0054\001\000\0050\001\000\005,\001\000\0050\002\000\002D\001\000\002@\001\000\002D\002\000\002@\002\000\002D\003\000\002@\003\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\004\020\001\000\002D\004\000\001\212\001\000\001\180\001\000\002D\005\000\002D\006\000\002D\007\000\003@\001\000\002$\001\000\002 \001\000\002$\002\000\002 \002\000\002$\003\000\002 \003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\002$\004\000\002 \004\000\002$\005\000\002\\\001\000\002\\\002\000\002\\\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\002\\\004\000\002\\\005\000\nL\001\000\n8\001\000\005\176\001\000\nh\001\000\nd\001\000\nX\001\000\nL\002\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\nh\002\000\nh\003\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\nd\002\000\nd\003\000\n\016\002\000\n\012\002\000\n\b\002\000\n\012\003\000\002`\001\000\002`\002\000\002`\003\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\002`\004\000\nX\002\000\n \002\000\n\028\002\000\n\024\002\000\n\020\002\000\n\004\002\000\n\000\002\000\n\000\003\000\002\204\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\003\b\001\000\003\004\001\000\003\000\001\000\002\252\001\000\002\248\001\000\002\244\001\000\002\240\001\000\002\236\001\000\002\232\001\000\002\228\001\000\002l\001\000\002(\001\000\003\216\001\000\003\212\001\000\003\216\002\000\003\216\003\000\012\192\001\000\012\192\002\000\001\248\001\000\012\188\001\000\012\184\001\000\012\188\002\000\012\184\002\000\001\248\001\000\012\188\003\000\012\188\004\000\001\248\001\000\003\216\004\000\003\216\005\000\003\212\002\000\003\220\001\000\003\220\002\000\003\224\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\003\224\002\000\nD\001\000\n\172\001\000\n\168\001\000\n\164\001\000\n\160\001\000\n\156\001\000\n\140\001\000\n\136\001\000\n|\001\000\nt\001\000\n`\001\000\n\\\001\000\005\180\001\000\005\172\001\000\001\208\001\000\001\204\001\000\n\172\002\000\n\168\002\000\n\164\002\000\n\160\002\000\n\156\002\000\n\140\002\000\n\136\002\000\n|\002\000\nt\002\000\n`\002\000\n\\\002\000\005\180\002\000\005\172\002\000\001\208\002\000\r\024\001\000\n\172\003\000\nt\003\000\n\\\003\000\001\208\003\000\nt\004\000\007\000\001\000\0008\001\000\006\252\001\000\0004\001\000\n\172\004\000\n\172\005\000\n\172\006\000\n\172\007\000\005\240\001\000\005\236\001\000\005\228\001\000\n\172\b\000\n\172\t\000\006$\001\000\006 \001\000\006\024\001\000\n\172\n\000\012x\001\000\007\012\001\000\012t\001\000\007\b\001\000\006\192\001\000\002\216\001\000\007\248\001\000\004\\\001\000\004\\\002\000\004\\\003\000\001\248\001\000\004\\\004\000\004\\\005\000\t$\001\000\002p\001\000\t$\002\000\nD\001\000\002x\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\002x\002\000\r$\001\000\nl\001\000\n@\001\000\n<\001\000\005(\001\000\002\004\001\000\002\004\002\000\002\004\003\000\005$\001\000\004@\001\000\002\212\001\000\002\212\002\000\002\212\003\000\tx\001\000\tt\001\000\tp\001\000\tl\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\164\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\003\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\152\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\003\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\148\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\003\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\144\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\003\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\168\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\003\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\184\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\003\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\160\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\003\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\156\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\003\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\176\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\003\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\140\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\003\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\136\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\003\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\132\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\003\000\002\132\001\000\002\128\001\000\002|\001\000\002\128\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\003\000\002\128\001\000\002|\001\000\002|\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\003\000\002|\001\000\002\180\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\003\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\172\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\003\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\t(\002\000\t(\003\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\200\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\003\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\220\002\000\t(\001\000\003\012\001\000\002\220\003\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\188\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\003\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\192\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\003\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002\196\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\003\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\003\012\002\000\n@\001\000\002t\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\002t\002\000\002\208\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\208\002\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\tx\002\000\tt\002\000\tp\002\000\tx\003\000\tx\004\000\tx\005\000\tt\003\000\000D\001\000\000D\002\000\n\176\001\000\004,\001\000\004$\001\000\004\028\001\000\004\024\001\000\012\188\001\000\012\184\001\000\004,\002\000\004$\002\000\004,\003\000\004,\004\000\004,\005\000\004,\006\000\001\248\001\000\004,\007\000\004,\b\000\b\212\001\000\004$\003\000\004$\004\000\004$\005\000\001\248\001\000\004$\006\000\004$\007\000\004\028\002\000\004\028\003\000\004\028\004\000\004\024\002\000\004\016\001\000\011\216\001\000\003<\001\000\003<\002\000\003<\003\000\0038\001\000\011\216\002\000\n\180\001\000\0044\001\000\0044\002\000\0044\003\000\001\248\001\000\0044\004\000\0044\005\000\b\028\001\000\b\020\001\000\b\012\001\000\b\b\001\000\007\244\001\000\0040\001\000\0040\002\000\0040\003\000\007\244\002\000\007\244\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\b\b\002\000\b\b\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\b\028\002\000\b\028\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\b\020\002\000\b\020\003\000\b\012\002\000\b\016\001\000\b\024\001\000\007\240\001\000\007\240\002\000\007\240\003\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\000D\003\000\000D\004\000\004@\002\000\005(\002\000\t(\001\000\t$\003\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\b\028\001\000\b\020\001\000\b\012\001\000\b\b\001\000\007\244\001\000\004`\001\000\004`\002\000\004`\003\000\004h\001\000\002\216\002\000\002\216\003\000\002\216\004\000\004h\002\000\004h\003\000\004d\001\000\nL\001\000\006\228\001\000\n\\\004\000\n\\\005\000\n\160\003\000\n\140\003\000\n\136\003\000\n\140\004\000\n\136\004\000\n\136\005\000\n\160\004\000\tD\001\000\t@\001\000\t<\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\tD\002\000\t@\002\000\tD\003\000\tD\001\000\t@\001\000\t<\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\140\001\000\001\136\001\000\001\132\001\000\001\128\001\000\b\240\001\000\001\140\002\000\001\136\002\000\001\132\002\000\001\128\002\000\001\140\003\000\001\132\003\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\140\004\000\001\132\004\000\001\132\005\000\001\140\005\000\001\128\003\000\b\240\002\000\001|\001\000\001x\001\000\001|\002\000\001x\002\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\001|\003\000\001x\003\000\001|\004\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001|\005\000\001x\004\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001x\005\000\001\252\001\000\002\000\001\000\001x\006\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001x\007\000\b\240\003\000\001\136\003\000\b\236\001\000\n\160\005\000\n\168\003\000\n\164\003\000\n\156\003\000\n\168\004\000\n\164\004\000\n\164\005\000\n\156\004\000\tD\001\000\t@\001\000\t<\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\156\001\000\001\152\001\000\001\148\001\000\001\144\001\000\b\240\001\000\001\156\002\000\001\152\002\000\001\148\002\000\001\144\002\000\001\156\003\000\001\148\003\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\001\156\004\000\001\148\004\000\001\148\005\000\001\156\005\000\001\144\003\000\001\152\003\000\n\156\005\000\n`\003\000\n`\004\000\n`\005\000\n|\003\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\b|\001\000\b|\002\000\b|\003\000\th\001\000\td\001\000\t`\001\000\007\132\001\000\th\002\000\td\002\000\t`\002\000\th\003\000\td\003\000\t`\003\000\th\004\000\td\004\000\th\005\000\bx\001\000\n|\004\000\n|\005\000\n\172\001\000\n\168\001\000\n\164\001\000\n\160\001\000\n\156\001\000\n\140\001\000\n\136\001\000\n|\001\000\nt\001\000\n`\001\000\n\\\001\000\005\180\001\000\005\172\001\000\005\164\001\000\001\208\001\000\001\204\001\000\n\172\002\000\n\168\002\000\n\164\002\000\n\160\002\000\n\156\002\000\n\140\002\000\n\136\002\000\n|\002\000\nt\002\000\n`\002\000\n\\\002\000\005\180\002\000\005\172\002\000\005\164\002\000\001\208\002\000\r\028\001\000\005\164\003\000\005\180\003\000\003\208\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\003\208\002\000\n\016\002\000\n\012\002\000\n\b\002\000\002\252\002\000\002\248\002\000\002\244\002\000\n\012\003\000\002\248\003\000\n\012\004\000\002\248\004\000\n\012\005\000\002\248\005\000\002\248\006\000\t(\001\000\003\012\001\000\002\248\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\b\003\000\002\244\003\000\n\b\004\000\002\244\004\000\n\b\005\000\002\244\005\000\002\244\006\000\t(\001\000\003\012\001\000\002\244\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\016\003\000\002\252\003\000\n\016\004\000\002\252\004\000\n\016\005\000\002\252\005\000\002\252\006\000\t(\001\000\003\012\001\000\002\252\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\nX\002\000\n \002\000\n\028\002\000\n\024\002\000\n\020\002\000\n\004\002\000\n\000\002\000\003\b\002\000\003\004\002\000\003\000\002\000\002\240\002\000\002\236\002\000\002\232\002\000\002\228\002\000\n\000\003\000\002\232\003\000\n\000\004\000\002\232\004\000\n\000\005\000\002\232\005\000\002\232\006\000\t(\001\000\003\012\001\000\002\232\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\004\003\000\002\236\003\000\n\004\004\000\002\236\004\000\n\004\005\000\002\236\005\000\002\236\006\000\t(\001\000\003\012\001\000\002\236\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n \003\000\002\240\003\000\n \004\000\t(\001\000\003\012\001\000\002\240\004\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n \005\000\002\240\005\000\002\240\006\000\t(\001\000\003\012\001\000\002\240\007\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\028\003\000\n\024\003\000\n\020\003\000\005\172\001\000\005\164\001\000\003\b\003\000\003\004\003\000\003\000\003\000\n\028\004\000\n\024\004\000\n\020\004\000\003\b\004\000\003\004\004\000\003\000\004\000\n\024\005\000\003\004\005\000\n\024\006\000\003\004\006\000\n\024\007\000\003\004\007\000\003\004\b\000\t(\001\000\003\012\001\000\003\004\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\020\005\000\003\000\005\000\n\020\006\000\003\000\006\000\n\020\007\000\003\000\007\000\003\000\b\000\t(\001\000\003\012\001\000\003\000\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\028\005\000\003\b\005\000\n\028\006\000\003\b\006\000\n\028\007\000\003\b\007\000\003\b\b\000\t(\001\000\003\012\001\000\003\b\t\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\nX\003\000\002\228\003\000\002\228\004\000\t(\001\000\003\012\001\000\002\228\005\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\003\204\001\000\b\196\001\000\002l\002\000\b\196\002\000\b\192\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\204\002\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\000\004\000\n\000\005\000\n\004\003\000\n\004\004\000\n\004\005\000\n \003\000\n \004\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n \005\000\n\028\003\000\n\024\003\000\n\020\003\000\005\172\001\000\005\164\001\000\n\028\004\000\n\024\004\000\n\020\004\000\n\024\005\000\n\024\006\000\n\024\007\000\n\020\005\000\n\020\006\000\n\020\007\000\n\028\005\000\n\028\006\000\n\028\007\000\nX\003\000\n\012\004\000\n\012\005\000\n\b\003\000\n\b\004\000\n\b\005\000\n\016\003\000\n\016\004\000\n\016\005\000\002\\\006\000\002\\\007\000\002\\\b\000\002\\\t\000\002\\\n\000\002\\\011\000\002$\006\000\002$\007\000\002$\b\000\002$\t\000\002 \005\000\002 \006\000\002 \007\000\002 \b\000\002 \t\000\002 \n\000\002 \011\000\003@\002\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\004\020\001\000\003L\001\000\001\212\001\000\001\180\001\000\003L\002\000\003L\003\000\003L\004\000\003D\001\000\003D\002\000\000x\001\000\000d\001\000\003D\003\000\003D\004\000\003H\001\000\003H\002\000\003L\005\000\004\020\002\000\004\020\003\000\004\020\004\000\002D\b\000\002@\004\000\002@\005\000\0050\003\000\0050\004\000\0050\005\000\0054\002\000\005,\002\000\0054\003\000\005,\003\000\b\220\002\000\b\224\001\000\002<\004\000\b\224\002\000\b\224\003\000\b\216\001\000\002T\004\000\002P\004\000\002T\005\000\002P\005\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002T\006\000\002P\006\000\002P\007\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\002P\b\000\n(\004\000\n$\004\000\n$\005\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\002d\004\000\t\240\002\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\t\240\003\000\nh\001\000\nd\001\000\nX\001\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\t\244\002\000\nx\002\000\nx\003\000\t(\001\000\007d\002\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\tP\002\000\tL\002\000\tH\002\000\tP\003\000\tL\003\000\tP\004\000\nT\002\000\nP\002\000\nP\003\000\n\144\002\000\n\144\003\000\n\148\002\000\tD\001\000\t@\001\000\t<\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\148\003\000\n\132\002\000\n\128\002\000\n\128\003\000\n\152\002\000\tD\001\000\t@\001\000\t<\001\000\t(\001\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\n\152\003\000\0028\b\000\0024\003\000\0024\004\000\005\240\001\000\005\236\001\000\005\228\001\000\0024\005\000\0024\006\000\0024\007\000\002,\002\000\002,\003\000\002,\004\000\002,\005\000\005\196\001\000\005\240\001\000\005\236\001\000\005\228\001\000\005\196\002\000\005\200\001\000\006$\001\000\006 \001\000\006\024\001\000\005\200\002\000\005\200\003\000\005\240\001\000\005\236\001\000\005\228\001\000\005\200\004\000\002,\006\000\002,\007\000\002,\b\000\005\204\001\000\005\204\002\000\0020\002\000\0020\003\000\0020\004\000\0020\005\000\0020\006\000\0020\007\000\0020\b\000\0020\t\000\004<\002\000\004<\003\000\004<\004\000\004<\005\000\004<\006\000\011\212\002\000\011\220\005\000\004X\002\000\007|\002\000\003\232\005\000\003\232\006\000\003\228\003\000\003\228\004\000\003\228\005\000\003\236\002\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\005\028\001\000\004\020\001\000\001\212\001\000\001\180\001\000\005\028\002\000\005\028\003\000\005\028\004\000\005\020\001\000\005\020\002\000\005\016\001\000\005\016\002\000\005\016\003\000\005\012\001\000\005\028\005\000\005\024\001\000\005\024\002\000\012\188\001\000\012\184\001\000\004(\003\000\b\212\001\000\004(\004\000\004(\005\000\004(\006\000\001\248\001\000\004(\007\000\004(\b\000\004 \003\000\004 \004\000\004 \005\000\0048\003\000\005 \005\000\005 \006\000\t(\001\000\003\012\001\000\002\224\003\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\003\016\002\000\002H\004\000\002H\005\000\b\224\001\000\002H\006\000\002\b\004\000\002\b\005\000\b\224\001\000\002\b\006\000\t(\001\000\007\164\004\000\007\160\004\000\007\156\004\000\007\152\004\000\003\012\001\000\002\220\001\000\002\200\001\000\002\196\001\000\002\192\001\000\002\188\001\000\002\184\001\000\002\180\001\000\002\176\001\000\002\172\001\000\002\168\001\000\002\164\001\000\002\160\001\000\002\156\001\000\002\152\001\000\002\148\001\000\002\144\001\000\002\140\001\000\002\136\001\000\002\132\001\000\002\128\001\000\002|\001\000\007\152\005\000\007\164\005\000\007\164\006\000\006$\001\000\006 \001\000\006\024\001\000\007\164\007\000\007\160\005\000\007\156\005\000\007\160\006\000\007\156\006\000\006$\001\000\006 \001\000\006\024\001\000\007\156\007\000\007\160\007\000\007\160\b\000\006$\001\000\006 \001\000\006\024\001\000\007\160\t\000\006\016\005\000\005\240\001\000\005\236\001\000\005\228\001\000\n\196\007\000\006$\001\000\006 \001\000\006\024\001\000\n\196\b\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\001\b\002\000\001\004\002\000\001\004\003\000\001\b\003\000\001\248\001\000\001\b\004\000\001\b\005\000\002h\004\000\000\212\001\000\r8\001\000\r0\001\000\r8\002\000\r0\002\000\0068\001\000\r8\003\000\r0\003\000\r8\004\000\r0\004\000\r0\005\000\r0\006\000\r8\005\000\r8\006\000\r8\007\000\000\212\002\000\000\212\003\000\r4\001\000\r,\001\000\r(\001\000\rP\001\000\rH\001\000\rP\002\000\rL\001\000\0068\001\000\rL\002\000\r(\002\000\r(\003\000\r(\004\000\r(\005\000\001\248\001\000\r4\002\000\r,\002\000\r4\003\000\r,\003\000\r,\004\000\r,\005\000\r4\004\000\r4\005\000\r4\006\000\000\216\001\000\005l\001\000\005d\001\000\005\\\001\000\005l\002\000\005d\002\000\005\\\002\000\005l\003\000\005d\003\000\005\\\003\000\005l\004\000\005d\004\000\005\\\004\000\005l\005\000\005d\005\000\005l\006\000\005l\007\000\005l\b\000\005l\t\000\001\248\001\000\005l\n\000\005l\011\000\b\212\001\000\b@\001\000\b@\002\000\b@\003\000\001\248\001\000\005d\006\000\005d\007\000\005d\b\000\b<\001\000\001\248\001\000\005\\\005\000\000\216\002\000\000\216\003\000\005h\001\000\005`\001\000\005X\001\000\005T\001\000\r\\\001\000\rT\001\000\r\\\002\000\rX\001\000\bX\001\000\rX\002\000\005T\002\000\005T\003\000\005T\004\000\005T\005\000\005h\002\000\005`\002\000\005X\002\000\005h\003\000\005`\003\000\005X\003\000\005h\004\000\005`\004\000\005h\005\000\005h\006\000\005h\007\000\005h\b\000\001\248\001\000\005h\t\000\005h\n\000\005`\005\000\005`\006\000\005`\007\000\005X\004\000\003\164\001\000\003\164\002\000\b8\001\000\b4\001\000\b8\002\000\b4\002\000\007\236\001\000\007\224\001\000\007\216\001\000\007\208\001\000\007\204\001\000\b8\003\000\b8\004\000\012\\\001\000\012X\001\000\006,\001\000\006,\002\000\006,\003\000\006,\004\000\006,\005\000\007l\001\000\007l\002\000\006$\001\000\006 \001\000\006\024\001\000\006,\006\000\006,\007\000\012\\\002\000\012X\002\000\012\\\003\000\012X\003\000\012\\\004\000\012\\\005\000\012\\\006\000\012\\\007\000\004\136\001\000\004\136\002\000\004\136\003\000\004\136\004\000\004\136\005\000\004\136\006\000\012\\\b\000\012X\004\000\012X\005\000\012X\006\000\003,\001\000\003,\002\000\012p\001\000\012p\002\000\012p\003\000\012p\004\000\005\240\001\000\005\236\001\000\005\228\001\000\012p\005\000\bP\001\000\bP\002\000\bP\003\000\bP\004\000\bP\005\000\bP\006\000\001\248\001\000\bP\007\000\006p\001\000\006l\001\000\006p\002\000\bP\b\000\bP\t\000\011\208\001\000\t|\001\000\011\208\002\000\t|\002\000\011\208\003\000\t|\003\000\011\208\004\000\t|\004\000\011\208\005\000\011\208\006\000\011\208\007\000\011\208\b\000\t|\005\000\t|\006\000\t|\007\000\b0\001\000\b,\001\000\004\184\001\000\006\184\001\000\006\180\001\000\006\184\002\000\006\184\003\000\006\184\004\000\006\184\005\000\005\188\001\000\005|\001\000\006\184\006\000\006\180\002\000\006\180\003\000\006\180\004\000\005\188\001\000\005|\001\000\006\180\005\000\t\180\001\000\t\172\001\000\t\168\001\000\006,\001\000\006\004\001\000\t\180\002\000\t\172\002\000\t\168\002\000\006\004\002\000\t\180\003\000\t\172\003\000\t\168\003\000\006\004\003\000\006\004\004\000\005\252\001\000\006\004\005\000\006\004\006\000\005\188\001\000\005|\001\000\006\004\007\000\t\180\004\000\t\180\005\000\t\180\006\000\t\180\007\000\006$\001\000\006 \001\000\006\024\001\000\t\180\b\000\004\144\001\000\004\144\002\000\004\144\003\000\004\144\004\000\006$\001\000\006 \001\000\006\024\001\000\004\144\005\000\004\144\006\000\004\144\007\000\t\180\t\000\t\172\004\000\t\168\004\000\t\172\005\000\t\172\006\000\005\172\001\000\t\172\007\000\005\208\001\000\006$\001\000\006 \001\000\006\024\001\000\005\208\002\000\t\168\005\000\t\168\006\000\005\212\001\000\005\212\002\000\t\192\001\000\t\192\002\000\t\192\003\000\t\192\004\000\006$\001\000\006 \001\000\006\024\001\000\t\192\005\000\t|\001\000\t|\002\000\t|\003\000\t|\004\000\t\196\001\000\001p\001\000\001p\002\000\001p\003\000\001p\004\000\rD\001\000\001p\005\000\0034\001\000\t\016\001\000\0034\002\000\0034\003\000\001p\006\000\001p\007\000\001p\b\000\001<\001\000\001<\002\000\001\016\001\000\001\248\001\000\001\016\002\000\001\016\003\000\001<\003\000\001\028\001\000\001\028\002\000\006\\\001\000\006T\001\000\006\\\002\000\006X\001\000\006P\001\000\006X\002\000\001\028\003\000\001\028\004\000\001\028\005\000\001\248\001\000\001\028\006\000\001\028\007\000\001 \001\000\001 \002\000\bl\001\000\bd\001\000\bl\002\000\bh\001\000\b`\001\000\bh\002\000\001 \003\000\001 \004\000\001 \005\000\001 \006\000\001 \007\000\001\024\001\000\001\024\002\000\001H\001\000\001D\001\000\001H\002\000\001D\002\000\001H\003\000\001H\004\000\005\172\001\000\001H\005\000\001H\006\000\0014\001\000\t\b\001\000\0014\002\000\0014\003\000\0014\004\000\t\b\002\000\t\b\003\000\001\248\001\000\t\004\001\000\001\248\001\000\0018\001\000\0010\001\000\001H\007\000\001@\001\000\001@\002\000\001D\003\000\005\172\001\000\001D\004\000\001D\005\000\001D\006\000\001@\001\000\001@\001\000\001\024\003\000\001\024\004\000\001$\001\000\001$\002\000\001\248\001\000\001\220\001\000\001\220\002\000\001\248\001\000\001\220\003\000\001$\003\000\001$\004\000\001<\004\000\001<\005\000\001(\001\000\001(\002\000\001,\001\000\004\212\001\000\004\212\002\000\001p\t\000\001@\001\000\001p\n\000\004\128\001\000\004\128\002\000\004\128\003\000\004\128\004\000\004\128\005\000\004\128\006\000\004\128\007\000\001@\001\000\004\128\b\000\004\128\t\000\001p\011\000\t\196\002\000\t\196\003\000\t\196\004\000\t\196\005\000\t\196\006\000\t\196\007\000\005p\001\000\001h\001\000\001h\002\000\001h\003\000\001h\004\000\0014\001\000\000\136\001\000\000\132\001\000\000\128\001\000\t8\001\000\t\004\001\000\001\248\001\000\001l\001\000\001l\002\000\001d\001\000\001d\002\000\001d\003\000\012\204\001\000\001t\001\000\0018\001\000\000\156\001\000\001d\004\000\001`\001\000\001@\001\000\001l\003\000\001h\005\000\t\196\b\000\t\196\t\000\004x\001\000\004x\002\000\004x\003\000\004x\004\000\004x\005\000\004x\006\000\004x\007\000\004x\b\000\004x\t\000\t\196\n\000\t\140\001\000\004\188\001\000\t\164\001\000\t\144\001\000\t\188\001\000\t\184\001\000\t\176\001\000\004\188\002\000\t\132\001\000\t\132\002\000\t\148\001\000\004\160\001\000\004\160\002\000\004\160\003\000\004\160\004\000\004\160\005\000\b\180\001\000\004\160\006\000\004\160\007\000\004\160\b\000\t\148\002\000\t\152\001\000\004\168\001\000\004\168\002\000\004\168\003\000\004\168\004\000\004\168\005\000\004\168\006\000\b\180\001\000\004\168\007\000\004\168\b\000\004\168\t\000\t\152\002\000\t\136\001\000\t\200\001\000\004\184\002\000\b,\002\000\t\128\001\000\b0\002\000\001\248\001\000\012h\001\000\001p\001\000\012h\002\000\012h\003\000\012h\004\000\012h\005\000\012h\006\000\r\024\001\000\n\240\001\000\n\196\001\000\n\192\001\000\n\184\001\000\004\020\001\000\001\212\001\000\001\180\001\000\000\236\001\000\001\\\001\000\001\\\002\000\001\\\003\000\000\224\001\000\000\224\002\000\000\224\003\000\000\224\004\000\000\208\001\000\000\204\001\000\000\208\002\000\000\208\003\000\001X\001\000\001L\001\000\004H\001\000\004D\001\000\000\188\001\000\000\184\001\000\004H\002\000\004H\003\000\004H\004\000\004H\005\000\004H\006\000\004H\007\000\000\188\002\000\000\184\002\000\000\188\003\000\000\188\004\000\005\172\001\000\000\188\005\000\000\188\006\000\001T\001\000\t\b\001\000\001T\002\000\001T\003\000\001T\004\000\000\176\001\000\000\176\002\000\000\252\001\000\000\248\001\000\000\248\002\000\004L\001\000\000\180\001\000\000\180\002\000\000\200\001\000\000\196\001\000\000\172\001\000\b\196\001\000\000\196\002\000\001P\001\000\000\192\001\000\000\180\003\000\000\192\002\000\004L\002\000\000\248\003\000\000\192\001\000\000\252\002\000\000\176\003\000\000\192\001\000\000\188\007\000\000\184\003\000\005\172\001\000\000\184\004\000\000\184\005\000\000\192\001\000\000\184\006\000\004D\002\000\004D\003\000\004D\004\000\004D\005\000\001X\002\000\001L\002\000\000\192\001\000\001L\003\000\001X\003\000\001X\004\000\001X\005\000\000\208\004\000\000\192\001\000\007T\001\000\007T\002\000\000\208\005\000\000\208\006\000\000\204\002\000\000\204\003\000\000\192\001\000\000\204\004\000\000\204\005\000\000\220\001\000\000\220\002\000\000\220\003\000\000\220\004\000\001\\\004\000\001\\\005\000\000\228\001\000\000\228\002\000\000\232\001\000\004\220\001\000\004\220\002\000\000\236\002\000\000\192\001\000\000\240\001\000\000\240\002\000\000\240\003\000\000\240\004\000\000\192\001\000\000\244\001\000\000\244\002\000\012h\007\000\012h\b\000\004p\001\000\004p\002\000\004p\003\000\004p\004\000\004p\005\000\004p\006\000\004p\007\000\004p\b\000\012h\t\000\012D\001\000\004\204\001\000\004<\001\000\012T\001\000\011\204\001\000\012@\001\000\012d\001\000\012`\001\000\0120\001\000\005(\001\000\004\204\002\000\0124\001\000\004@\001\000\0128\001\000\0128\002\000\012H\001\000\012H\002\000\012<\001\000\012l\001\000\b(\001\000\012,\001\000\012,\002\000\012,\003\000\003,\003\000\003,\004\000\0120\001\000\005(\001\000\002\004\001\000\012(\001\000\0124\001\000\004@\001\000\002\212\001\000\003\164\003\000\003\164\004\000\002h\005\000\002h\006\000\005\216\003\000\005\216\004\000\006\176\005\000\005\240\001\000\005\236\001\000\005\228\001\000\006\176\006\000\006\172\002\000\006\172\003\000\006\172\004\000\005\240\001\000\005\236\001\000\005\228\001\000\006\172\005\000\004\200\002\000\004\200\003\000\004\200\004\000\004\196\002\000\bL\003\000\bL\004\000\003\128\n\000\t\160\006\000\t\160\007\000\t\160\b\000\t\160\t\000\b\172\001\000\t\160\n\000\b\172\002\000\b\164\001\000\b\168\001\000\t\156\004\000\003\132\004\000\003|\004\000\005p\001\000\003\132\005\000\003|\005\000\003|\006\000\003|\007\000\b\180\001\000\003|\b\000\003|\t\000\t\156\005\000\t\156\006\000\t\156\007\000\t\156\b\000\b\172\001\000\t\156\t\000\006\b\003\000\006\b\004\000\006$\001\000\006 \001\000\006\024\001\000\000T\005\000\000T\006\000\r<\006\000\001\248\001\000\r<\007\000\003\028\003\000\003\028\004\000\nh\001\000\nd\001\000\nX\001\000\nH\002\000\n \001\000\n\028\001\000\n\024\001\000\n\020\001\000\n\016\001\000\n\012\001\000\n\b\001\000\n\004\001\000\n\000\001\000\n4\002\000\n0\002\000\n4\003\000\n0\003\000\n4\004\000\n0\004\000\n4\005\000\n0\005\000\005\240\001\000\005\236\001\000\005\228\001\000\n0\006\000\n4\006\000\n4\007\000\006$\001\000\006 \001\000\006\024\001\000\n4\b\000\t\252\002\000\t\248\002\000\t\248\003\000\t\252\003\000\t\252\004\000\002L\004\000\002L\005\000\b\224\001\000\002L\006\000\002\024\004\000\002\020\004\000\002\016\004\000\002\012\004\000\002\024\005\000\002\016\005\000\b\224\001\000\002\024\006\000\002\016\006\000\002\024\007\000\002\024\b\000\002\020\005\000\002\020\006\000\002X\004\000\002X\005\000\002X\006\000\002X\007\000\000\168\003\000\000\168\004\000\002\028\003\000\002\028\004\000\002\028\005\000\002\028\006\000\002\028\007\000\003\148\001\000\003\148\002\000\000\000\001\000\000\004\000\000\003\160\001\000\003\160\002\000\000\004\001\000\000\b\000\000\r\024\001\000\005\132\001\000\001\180\001\000\005\132\002\000\005\132\003\000\005\136\001\000\000\b\001\000\005\188\001\000\005\148\001\000\005\144\001\000\005\140\001\000\005|\001\000\005\148\002\000\005\144\002\000\005\140\002\000\005|\002\000\r\024\001\000\005\144\003\000\005\144\004\000\005\144\005\000\005\148\003\000\005\140\003\000\000H\001\000\005\128\001\000\000L\001\000\007\168\001\000\007\168\002\000\000\012\000\000\000\012\001\000\007\172\001\000\007\172\002\000\000\016\000\000\000\016\001\000\007\176\001\000\001\248\001\000\007\176\002\000\000\020\000\000\007\180\001\000\007\180\002\000\000\020\001\000\000\024\000\000\000\024\001\000\007\184\001\000\005\188\001\000\005|r\020\001\000\r\020\002\000\r\020\003\000\r\020\004\000\r\016\001\000\r\016\002"), (16, "\000\000\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\b\000\t\000\n\000\011\000\012\000\r\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000 \000!\000\"\000#\000$\000%\000&\000'\000(\000)\000*\000+\000,\000-\000.\000/\0000\0001\0002\0003\0004\0005\0006\0007\0008\000:\000;\000<\000=\000>\000?\000@\000A\000B\000C\000D\000E\000I\000M\000Q\000R\000S\000T\000U\000V\000W\000X\000Y\000Z\000[\000\\\000^\000`\000a\000b\000c\000d\000e\000f\000g\000n\000o\000p\000r\000s\000t\000u\000v\000w\000x\000y\000z\000{\000|\000}\000~b\001\011\001\012\001\014\001\018\001\021\001\023\001\025\001 \001&\001)\001+\001,\001.\0010\0011\0012\0015\0016\0019\001:\001=\001>\001?\001@\001A\001C\001D\001E\001F\001G\001H\001I\001J\001N\001Q\001U\001Y\001\\\001`\001d\001f\001g\001h\001i\001l\001m\001n\001o\001s\001t\001w\001{\001|t\002\n\002\012\002\r\002\014\002\015\002\017\002\020\002\023\002\025\002\027\002\028\002\029\002\"\002$\002%\002'\002(\002)\002*\002-\002.\002/\0022\0024\0025\0026\0027\0028\002:\002=\002>\002?\002A\002E\002F\002G\002H\002I\002J\002L\002N\002P\002R\002T\002U\002V\002W\002X\002Z\002[\002\\\002]\002^\002`\002a\002c\002d\002e\002f\002g\002h\002i\002k\002m\002q\002r\002v\002x\002y\002z\002}b\003\t\003\012\003\r\003\015\003\016\003\017\003\018\003\020\003\021\003\022\003\023\003\024\003\025\003\026\003\027\003\028\003\029\003\031\003 \003\"\003#\003$\003&\003'\003(\003/\0032\0034\0036\0038\0039\003:\003<\003=\003>\003?\003@\003A\003B\003H\003L\003P\003Q\003R\003S\003T\003U\003V\003W\003X\003Y\003[\003\\\003]\003^\003_\003`\003a\003d\003g\003j\003l\003m\003o\003p\003r\003s\003t\003u\003v\003w\003z\003|\003}\003~\003\127\003\128\003\130\003\132\003\133\003\134\003\135\003\136\003\140\003\141\003\143\003\147\003\148\003\149\003\150\003\151\003\152\003\153\003\154\003\155\003\156\003\157\003\158\003\159\003\160\003\161\003\163\003\164\003\165\003\166\003\167\003\174\003\180\003\183\003\184\003\185\003\186\003\187\003\188\003\189\003\191\003\192\003\198\003\199\003\205\003\206\003\212\003\213\003\219\003\220\003\221\003\222\003\224\003\230\003\231\003\233\003\239\003\245\003\251\003\252\003\254\003\255\004\000\004\001\004\t\004\011\004\012\004\r\004\014\004\020\004\024\004\027\004\028\004\029\004\030\004\031\004 \004!\004\"\004$\004'\004(\004*\004+\0042\0043\0045\0046\0047\0048\0049\004:\004;\004<\004=\004F\004G\004I\004J\004K\004L\004N\004V\004Y\004Z\004`\004a\004h\004i\004j\004l\004m\004n\004o\004t\004v\004w\004x\004y\004z\004{\004}\004~t\005\011\005\r\005\015\005\017\005\019\005\020\005\021\005\022\005\023\005\031\005 \005\"\005$\005&\005/\0050\0051\0052\0053\0055\0057\0059\005@\005A\005B\005C\005D\005J\005K\005L\005M\005N\005[\005\\\005i\005j\005k\005n\005o\005p\005q\005r\005\127\005\134\005\135\005\136\005\160\005\162\005\163\005\164\005\165\005\167\005\169\005\172\005\173\005\175\005\176\005\177\005\178\005\179\005\180\005\181\005\194\005\195\005\210\005\224\005\229\005\230\005\232\005\234\005\235\005\236\005\237\005\241\005\242\005\246\005\247\005\249\005\251\005\253\005\255\006\000\006\002\006\003\006\004\006\006\006\007\006\t\006\022\006\023\006\024\006\025\006\026\006\028\006\029\006\030\006\031\006!\006\"\006#\006>\006?\006W\006X\006p\006q\006\137\006\138\006\162\006\163\006\187\006\188\006\212\006\213\006\237\006\238\007\006\007\007\007\031\007 \0078\0079\007Q\007R\007j\007k\007\131\007\132\007\156\007\157\007\181\007\182\007\206\007\207\007\231\007\232\b\000\b\001\b\025\b\026\b2\b3\bK\bL\bd\be\bg\bt\bu\b\141\b\144\b\145\b\146\b\147\b\148\b\149\b\150\b\155\b\159\b\160\b\161\b\162\b\164\b\165\b\166\b\168\b\169\b\171\b\172\b\173\b\174\b\175\b\176\b\177\b\178\b\179\b\180\b\181\b\182\b\183\b\184\b\186\b\187\b\189\b\190\b\191\b\197\b\198\b\199\b\200\b\206\b\207\b\213\b\214\b\220\b\221\b\222\b\223\b\224\b\226\b\227\b\233\b\234\b\235\b\236\b\237\t\005\t\011\t\012\t\r\t\015\t\016\t\017\t\018\t\019\t\020\t\022\t\023\t\024\t\027\t\028\t\029\t\030\t9\t;\t<\tV\tZ\t_\ta\tz\t{\t|\t}\t~\t\128\t\130\t\137\t\138\t\162\t\163\t\187\t\188\t\189\t\190\t\214\t\215\t\216\t\217\t\218\t\221\t\222\t\223\t\224\t\251\t\255\n\004\n\006\n\031\n \n!\n\"\n#\n$\n%\n&\n'\n(\n5\n6\n7\n:\n;\n>\nA\nC\nD\nE\nF\nG\nW\nf\nh\ni\nj\nw\n}\n\127\n\129\n\131\n\132\n\156\n\158\n\160\n\162\n\163\n\187\n\189\n\191\n\193\n\194\n\218\n\232\n\234\n\236\n\238\n\239\011\007\011\t\011\011\011\r\011\014\011&\011(\011A\011C\011D\011\\\011d\011j\011l\011n\011p\011q\011\137\011\139\011\141\011\143\011\144\011\168\011\170\011\172\011\174\011\175\011\199\011\201\011\202\011\226\011\239\011\241\011\242\011\243\012\011\012\012\012\r\012\014\012\015\012\016\012\017\012)\012*\012/\0122\0123\0124\0125\0126\0127\0128\0129\012:\012;\012<\012=\012>\012?\012@\012A\012B\012C\012D\012E\012F\012G\012H\012I\012J\012K\012L\012M\012N\012O\012P\012Q\012R\012S\012T\012U\012V\012_\012`\012a\012b\012c\012f\012g\012h\012i\012j\012k\012l\012m\012n\012o\012p\012q\012r\012s\012t\012v\012w\012x\012y\012{\012|\012}\012~\012\128\012\130\012\155\012\156\012\180\012\181\012\182\012\183\012\196\012\220\012\221\012\234\012\235\012\236\r\004\r\007\r\t\r\n\r\011\r\012\r\r\r\014\r\015\r*\r+\r,\r-\r.\rI\rJ\rK\rL\rM\rQ\rR\rS\rT\rU\rV\rW\rX\r\\\r]\ra\rb\rf\rg\rh\ri\rj\rk\rl\rm\rn\ro\rp\rq\rr\rs\rt\ru\rv\rw\rx\ry\rz\r{\r|\r}\r~\r\127\r\128\r\129\r\130\r\139\r\140\r\141\r\142\r\143\r\144\r\145\r\146\r\147\r\148\r\149\r\150\r\151\r\154\r\156\r\157\r\159\r\160\r\161\r\162\r\163\r\164\r\165\r\166\r\167\r\191\r\192\r\193\r\194\r\196\r\197\r\198\r\200\r\227\r\228\r\229\r\233\r\234\r\236\r\241\r\242\r\243\r\247\r\248\r\252\014\000\014\001\014\b\014\t\014\n\014\012\014\r\014\014\014\015\014\017\014\019\014\020\014\022\014\024\014\025\014\026\014\027\014\028\014\029\014\030\014\031\014\"\014$\014%\014'\014(\014)\014*\014+\014-\014/\0141\0142\0143\0144\0145\0146\0147\014:\014=\014@\014C\014E\014F\014G\014H\014J\014K\014L\014N\014O\014Q\014R\014S\014T\014V\014W\014X\014Y\014]\014_\014`\014b\014c\014d\014e\014f\014g\014j\014m\014o\014p\014q\014r\014t\014u\014v\014w\014x\014y\014z\014{\014|\014~b\015\t\015\011\015\012\015\r\015\017\015\018\015\019\015\020\015\021\015\022\015\023\015\024\015\028\015\029\015\030\015\031\015 \015!\015#\015$\015%\015&\015'\015(\015)\015+\015,\015-\015.\015/\0150\0151\0152\0154\0155\0156\0157\0158\015:\015;\015=\015>\015?\015@\015A\015C\015D\015E\015F\015H\015I\015K\015L\015M\015N\015O\015P\015Q\015R\015S\015U\015W\015X\015Y\015[\015\\\015]\015_\015`\015a\015b\015d\015f\015g\015h\015j\015k\015l\015n\015o\015q\015s\015t\015u\015v\015x\015y\015{\015|\015}\015~b\016\t\016\n\016\011\016\012\016\r\016\015\016\016\016\017\016\019\016\020\016\021\016\023\016\024\016\025\016\026\016\027\016\029\016\030\016 \016!\016\"\016$\016&\016'\016)\016*\016+\016-\016.\016/\0161\0162\0164\0165\0167\0168\0169\016:\016;\016>\016?\016@\016A\016B\016D\016E\016F\016G\016H\016I\016K\016L\016M\016N\016O\016P\016Q\016R\016S\016T\016U\016V\016W\016X\016Z\016[\016\\\016]\016_\016`\016a\016b\016c\016d\016e\016f\016g\016h\016i\016j\016k\016l\016m\016n\016o\016p\016q\016r\016s\016t\016v\016w\016y\016z\016{\016|\016}\016~b\017\t\017\n\017\011\017\012\017\r\017\014\017\015\017\016\017\017\017\018\017\019\017\022\017\023\017\024\017\025\017\026\017\031\017#\017%\017&\017'\017(\017)\017*\017+\017,\017-\017.\017/\0170\0171\0172\0173\0174\0176\0177\0178\0179\017:\017;\017<\017=\017@\017A\017B\017C\017E\017F\017G\017H\017I\017J\017K\017Q\017R\017S\017T\017U\017V\017W\017Y\017[\017\\\017c\017j\017k\017l\017m\017n\017o\017r\017s\017t\017u\017v\017w\017x\017y\017z\017{\017|\017}\017~\017\128\017\129\017\130\017\131\017\132\017\133\017\134\017\135\017\136\017\137\017\138\017\139\017\140\017\141\017\142\017\143"))
    
    and nullable =
      "\000\000@\164\004\000\128\000\001\014\016\000\007\254\003\128\000\000?\255\128\000\129\004 \000\003\000\000"
    
    and first =
      (137, "3\248H0\177J\223\230g\160*\007\220\138\000\028p\025\252$\024X\165o\2433\208\021\003\238E\000\0148\000 \000\000\000\000\001@\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001@\001\000\000\000\004\000\000\000\000\000H\001\004\000 @\000\132\000\004\000\001\144\000\002\000\003?\132\131\011\020\173\254fz\002\128}\200\160\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\b\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\128 \001\000\000\000\000\000\000\000\b\000\b\000\000\000\000\000P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000g\240\144ab\149\191\204\207@T\015\185\020\0008\224\000\000\000\000\144\000@\000\000\001\000\000\000\000\000\000@\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\002$\000\017\000\000\000@\000\000\000\000\000\016\000 \000\001\018\000\b\000\000\000 \000\000\000\000\000\b\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\0003\248H0\177J\223\230g\160*\007\220\138\000\028p\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000$\000\002\000\016 \nB\000\002\000\000\192\000\001\000\001\159\194A\133\138V\2553=\001@>\224P\000\227\128\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\000\003\020\128$$\000\138\004\138\192\004\000\164\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000/n\200\128\130\255\021\144\000L\028\007N8,\n\r\000b\016\004\004\000\017\000\145H\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\164\000@\n\000\000\001\004\000\024\132\001\b\000\128P$r\000\000\005\000\160\000\198\000\000\000\000\000\000\000\000\002(\000\000\000\000\000\000\000\000\000\001\000\000@\001\000\000\000\128\000\001\000\000\000 \000\004\128\000@\002\004\000\b@\000@\000\024\000\000 \000\002@\b \001\002\000\004 \000 \000\012\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\012n\016\004,\0187\248\145\232\002\001\244\002\128\003\028\000\016\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\198\225\000B\193#\127\137\030\128 \031@(\0001\192\003\000\0004\004\000\014\023\b\000\004\000\000\000\000\000@\001\128\000\024\000\000\005\011\132\000\002\000\000\000\000\000\000\024\220 \bX$o\241#\208\004\003\232\005\000\0068\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\0000\000\003\000\000\000\161p\128\000@\000\000\000\000\000\000\016\000\000\137\000\004\000\000\000\016\000\000\000\000\000\004\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\006\000\000h\b\000\028.\016\000\b\000\000\000\000\000\128\000\128\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\136@\016\024\000E\002M\160\002\000T\000\000\b \000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000b\016\004\004\000\017@\145h\000\128\021\000\000\002(\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\012R\000\148\016@(\018;\000\000\002\128P\000c\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\136\000\000\000\000\004\000\004\000\000\000\016\000\000\000\128\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000@\000\"\000\000\000\000\001\000\001\000\000\000\004\000\000\000 \0001\b\002\016\001\000\160H\228\000\000\n\001@\001\140\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\192\000\r\001\000\003\133\194\000\001\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\006\127\t\006V)[\252\204\244\005\000\251\129@\007\142\000\016\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\012B\000\128\128\002(\018-\000\016\002\128\000\000A\000\006!\000@@\001\020\t\022\128\b\001@\000\000 \128\003\016\128  \000\138\004\139@\004\000\160\000\000\016@\001\136@\016\016\000E\002E\160\002\000T\000\000\b \000\196 \b\b\000\"\129\"\208\001\000*\000\000\004\016\000 \000\000\000\000\001@\000\000\000\000\000\000\000\000\000\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\b\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000cp\128!`\145\191\196\143@\016\015\160\020\000\024\224\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\b\000\000\000\000\000\"\000\000\000\000\001@\001\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000@\001\248\001\128\144\000\015\136@\004\b\001\002\139\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000b\000\006\192\128\001\194\225@\000\128\004\000@\000 \000\000\bb\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\004\000\000\000\000\000\002\000\000 \000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001\000\000\000@\000\000@\002\000\000\000\000\000\000\000\016\0000\000\003\000\000\000\161p\128\000@\000\000 \000\000\000\024\132\001\001\000\004P$Z\000 \005@\000\000\130\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\003\020\128$$\000\138\004\138\192\004\000\164\000\000\016@\001\138@\018\018\000E\002E`\002\000R\000\001( \000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\144\002\b\000@\128)\b\000\b\128\003\000\000\004\000\000H\000\004\000 @\020\132\000\004\000\001\128\000\002\000\000 \000\002\000\000\002\000B\001\128\000\000\000\000\128\000\000\016\000\001\000\000\001\000!\000@\000\000\000\000@\000\000\t\000 \128\004\b\002\144\128\000\128\0000\000\000@\000\004\128\016@\002\004\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\196 \b\b\000\"\129\"\208\001\000(\000\000\004\016\000b\016\004\004\000\017@\145h\000\128\020\000\000\002\b\0001\b\002\002\000\b\160H\180\000@\n\128\000\001\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\006!\000@@\001\028\t\022\128\b\001@\000\000 \128\003\020\128$$\000\138\004\138\192\004\000\160\000\000\016@\001\138@\018\130\b\005\002G`\000\000P\n\000\012`\000@\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128 \000\000\000\002\000\000\000\000\000\000\000\000\000\000\001@\016\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\160\b\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\004\128\016@\002\004\000\b@\000@\000\025\000\000 \000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\252$\024X\165o\2433\208\020\003\238E\000\0148\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000 \000 \000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\0001H\002B@(\160H\172\000@\n\000\000\005\004\000\024\164\001! \004P$V\000 \005 \000\018\130\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\001\016\000\000\000\000\b\000\b\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\b\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\0067\b\002\022\t\027\252H\244\001\000\250\001@\001\142\000\000@\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\012\000\000\208\016\0008\\ \000\016\000\000\000\000\000\000\002 \000\000\000\000\016\000\016\000\000\000@\000\000\002\000\003\000\0000\000\000\n\023\n\000\004\000\000\000\000\000\000\001\128\000\026\002\000\007\011\132\000\002\000\000\000\000\000\000\000D\000\000\000\000\002\000\002\000\000\000\bb\000\000`\000\006\128\144\001J\225\000\000\128\000\000\000\000\000\000\016\000\000\000\b\000\160\000\128\000\000\000\000\000\000\000\000\b\000\001\000\004\000\018 @\000\000\000\000\000\000\000\000\016\000\001\000\000\001\000!\000@\000\000\000\000@\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\197 \t\t\000\"\129\"\176\001\000(\000\000\004\016\000b\144\004\132\128\017@\145X\000\128\020\128\000\n\b\000@\000\004\000\000\004\000\132\003\000\000\000\000\001\000\000\000\b\000\001\000\004\000R @\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\001{vD\004\023\248\172\128\002`\224:q\193`Ph\003\000\0000\000\000\n\023\b\000\004\000\000\000\000\000\000\000\136\000\000\000\000\005\000\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000`\000\006\128\128\001\194\225\000\000\128\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000")
    
  end) (ET) (TI)
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1928 lexer lexbuf) : (Parsetree.toplevel_phrase list))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1908 lexer lexbuf) : (Parsetree.toplevel_phrase))

and parse_val_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1902 lexer lexbuf) : (Longident.t))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1898 lexer lexbuf) : (Parsetree.pattern))

and parse_mty_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1894 lexer lexbuf) : (Longident.t))

and parse_mod_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1890 lexer lexbuf) : (Longident.t))

and parse_mod_ext_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1886 lexer lexbuf) : (Longident.t))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1882 lexer lexbuf) : (Parsetree.expression))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1878 lexer lexbuf) : (Parsetree.core_type))

and parse_constr_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1874 lexer lexbuf) : (Longident.t))

and parse_any_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1856 lexer lexbuf) : (Longident.t))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 1852 lexer lexbuf) : (Parsetree.signature))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (Parsetree.structure))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1928 initial_position) : (Parsetree.toplevel_phrase list) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1908 initial_position) : (Parsetree.toplevel_phrase) MenhirInterpreter.checkpoint)
  
  and parse_val_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1902 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1898 initial_position) : (Parsetree.pattern) MenhirInterpreter.checkpoint)
  
  and parse_mty_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1894 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1890 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_ext_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1886 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1882 initial_position) : (Parsetree.expression) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1878 initial_position) : (Parsetree.core_type) MenhirInterpreter.checkpoint)
  
  and parse_constr_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1874 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_any_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1856 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1852 initial_position) : (Parsetree.signature) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (Parsetree.structure) MenhirInterpreter.checkpoint)
  
end

# 4197 "src/ocaml/preprocess/parser_raw.mly"
  

# 48780 "src/ocaml/preprocess/parser_raw.ml"

# 269 "<standard.mly>"
  

# 48785 "src/ocaml/preprocess/parser_raw.ml"
